
uc3a0512-Lab2Int.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .init         0000001c  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         000034f0  80002024  80002024  00002424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .exception    00000200  80005600  80005600  00005a00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .fini         00000018  80005800  80005800  00005c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       00000184  80005818  80005818  00005c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .lalign       00000004  8000599c  8000599c  00005d9c  2**0
                  ALLOC
  8 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  9 .ctors        00000008  00000008  800059a0  00006008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .dtors        00000008  00000010  800059a8  00006010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .jcr          00000004  00000018  800059b0  00006018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .got          0000000c  0000001c  800059b4  0000601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .data         00000508  00000028  800059c0  00006028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00000370  00000530  00000530  00000000  2**2
                  ALLOC
 15 .heap         0000e760  000008a0  000008a0  00000000  2**0
                  ALLOC
 16 .comment      0000012b  00000000  00000000  00006530  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 00000e60  00000000  00000000  0000665b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_pubnames 000021d3  00000000  00000000  000074bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_info   0001b45c  00000000  00000000  0000968e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 00003e14  00000000  00000000  00024aea  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   000060b4  00000000  00000000  000288fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_frame  00002864  00000000  00000000  0002e9b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000042eb  00000000  00000000  00031218  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_loc    0000480d  00000000  00000000  00035503  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 26 .debug_ranges 00000c98  00000000  00000000  00039d10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:
80002000:	48 1f       	lddpc	pc,80002004 <program_start+0x4>
80002002:	00 00       	add	r0,r0
80002004:	80 00       	ld.sh	r0,r0[0x0]
80002006:	20 24       	sub	r4,2

Disassembly of section .init:

80002008 <_init>:
80002008:	eb cd 40 40 	pushm	r6,lr
8000200c:	48 26       	lddpc	r6,80002014 <_init+0xc>
8000200e:	1e 26       	rsub	r6,pc
80002010:	c0 48       	rjmp	80002018 <_init+0x10>
80002012:	00 00       	add	r0,r0
80002014:	80 00       	ld.sh	r0,r0[0x0]
80002016:	1f f2       	ld.ub	r2,pc[0x7]
80002018:	f0 16 00 01 	mcall	r6[4]
8000201c:	f0 16 00 00 	mcall	r6[0]
80002020:	e3 cd 80 40 	ldm	sp++,r6,pc

Disassembly of section .text:

80002024 <_stext>:
80002024:	30 07       	mov	r7,0
80002026:	49 5a       	lddpc	r10,80002078 <_stext+0x54>
80002028:	5b fa       	cp.w	r10,-1
8000202a:	f4 0d 17 10 	movne	sp,r10
8000202e:	49 4b       	lddpc	r11,8000207c <_stext+0x58>
80002030:	49 4c       	lddpc	r12,80002080 <_stext+0x5c>
80002032:	18 3b       	cp.w	r11,r12
80002034:	c0 60       	breq	80002040 <_stext+0x1c>
80002036:	49 4a       	lddpc	r10,80002084 <_stext+0x60>
80002038:	b7 09       	ld.d	r8,r11++
8000203a:	b9 28       	st.d	r12++,r8
8000203c:	14 3c       	cp.w	r12,r10
8000203e:	cf d5       	brlt	80002038 <_stext+0x14>
80002040:	49 2a       	lddpc	r10,80002088 <_stext+0x64>
80002042:	49 1c       	lddpc	r12,80002084 <_stext+0x60>
80002044:	30 08       	mov	r8,0
80002046:	30 09       	mov	r9,0
80002048:	b9 28       	st.d	r12++,r8
8000204a:	14 3c       	cp.w	r12,r10
8000204c:	cf e5       	brlt	80002048 <_stext+0x24>
8000204e:	f0 1f 00 10 	mcall	8000208c <_stext+0x68>
80002052:	49 0c       	lddpc	r12,80002090 <_stext+0x6c>
80002054:	f0 1f 00 10 	mcall	80002094 <_stext+0x70>
80002058:	f0 1f 00 10 	mcall	80002098 <_stext+0x74>
8000205c:	1a 9c       	mov	r12,sp
8000205e:	30 0b       	mov	r11,0
80002060:	f0 1f 00 0f 	mcall	8000209c <_stext+0x78>
80002064:	5b fc       	cp.w	r12,-1
80002066:	f9 bc 00 00 	moveq	r12,0
8000206a:	f9 ba 00 00 	moveq	r10,0
8000206e:	14 1d       	sub	sp,r10
80002070:	f0 1f 00 0c 	mcall	800020a0 <_stext+0x7c>
80002074:	f0 1f 00 0c 	mcall	800020a4 <_stext+0x80>
80002078:	00 01       	add	r1,r0
8000207a:	00 00       	add	r0,r0
8000207c:	80 00       	ld.sh	r0,r0[0x0]
8000207e:	59 a0       	cp.w	r0,26
80002080:	00 00       	add	r0,r0
80002082:	00 08       	add	r8,r0
80002084:	00 00       	add	r0,r0
80002086:	05 30       	ld.ub	r0,r2++
80002088:	00 00       	add	r0,r0
8000208a:	08 a0       	st.w	r4++,r0
8000208c:	80 00       	ld.sh	r0,r0[0x0]
8000208e:	4a 88       	lddpc	r8,8000212c <getBaudDiv+0x20>
80002090:	80 00       	ld.sh	r0,r0[0x0]
80002092:	58 00       	cp.w	r0,0
80002094:	80 00       	ld.sh	r0,r0[0x0]
80002096:	4b f4       	lddpc	r4,80002190 <spi_initMaster+0x24>
80002098:	80 00       	ld.sh	r0,r0[0x0]
8000209a:	20 08       	sub	r8,0
8000209c:	80 00       	ld.sh	r0,r0[0x0]
8000209e:	4b 48       	lddpc	r8,8000216c <spi_initMaster>
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	48 6c       	lddpc	r12,800020b8 <__do_global_dtors_aux+0x10>
800020a4:	80 00       	ld.sh	r0,r0[0x0]
800020a6:	4c 14       	lddpc	r4,800021a8 <spi_initMaster+0x3c>

800020a8 <__do_global_dtors_aux>:
800020a8:	eb cd 40 e0 	pushm	r5-r7,lr
800020ac:	48 e6       	lddpc	r6,800020e4 <__do_global_dtors_aux+0x3c>
800020ae:	30 08       	mov	r8,0
800020b0:	0d 89       	ld.ub	r9,r6[0x0]
800020b2:	f0 09 18 00 	cp.b	r9,r8
800020b6:	c1 41       	brne	800020de <__do_global_dtors_aux+0x36>
800020b8:	48 c5       	lddpc	r5,800020e8 <__do_global_dtors_aux+0x40>
800020ba:	48 d8       	lddpc	r8,800020ec <__do_global_dtors_aux+0x44>
800020bc:	6c 19       	ld.w	r9,r6[0x4]
800020be:	0a 18       	sub	r8,r5
800020c0:	a3 48       	asr	r8,0x2
800020c2:	f0 c7 00 01 	sub	r7,r8,1
800020c6:	0e 39       	cp.w	r9,r7
800020c8:	c0 92       	brcc	800020da <__do_global_dtors_aux+0x32>
800020ca:	2f f9       	sub	r9,-1
800020cc:	8d 19       	st.w	r6[0x4],r9
800020ce:	ea 09 03 28 	ld.w	r8,r5[r9<<0x2]
800020d2:	5d 18       	icall	r8
800020d4:	6c 19       	ld.w	r9,r6[0x4]
800020d6:	0e 39       	cp.w	r9,r7
800020d8:	cf 93       	brcs	800020ca <__do_global_dtors_aux+0x22>
800020da:	30 18       	mov	r8,1
800020dc:	ac 88       	st.b	r6[0x0],r8
800020de:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800020e2:	00 00       	add	r0,r0
800020e4:	00 00       	add	r0,r0
800020e6:	05 30       	ld.ub	r0,r2++
800020e8:	00 00       	add	r0,r0
800020ea:	00 10       	sub	r0,r0
800020ec:	00 00       	add	r0,r0
800020ee:	00 14       	sub	r4,r0

800020f0 <frame_dummy>:
800020f0:	d4 01       	pushm	lr
800020f2:	48 5c       	lddpc	r12,80002104 <frame_dummy+0x14>
800020f4:	78 08       	ld.w	r8,r12[0x0]
800020f6:	58 08       	cp.w	r8,0
800020f8:	c0 50       	breq	80002102 <frame_dummy+0x12>
800020fa:	48 48       	lddpc	r8,80002108 <frame_dummy+0x18>
800020fc:	58 08       	cp.w	r8,0
800020fe:	c0 20       	breq	80002102 <frame_dummy+0x12>
80002100:	5d 18       	icall	r8
80002102:	d8 02       	popm	pc
80002104:	00 00       	add	r0,r0
80002106:	00 18       	sub	r8,r0
80002108:	00 00       	add	r0,r0
	...

8000210c <getBaudDiv>:
 * \return Divider or error code.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
static int getBaudDiv(const spi_options_t *options, unsigned int pba_hz)
{
8000210c:	eb cd 40 80 	pushm	r7,lr
80002110:	1a 97       	mov	r7,sp
80002112:	20 4d       	sub	sp,16
80002114:	ef 4c ff f8 	st.w	r7[-8],r12
80002118:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + options->baudrate / 2) / options->baudrate;
8000211c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002120:	70 18       	ld.w	r8,r8[0x4]
80002122:	f0 09 16 01 	lsr	r9,r8,0x1
80002126:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000212a:	10 09       	add	r9,r8
8000212c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002130:	70 18       	ld.w	r8,r8[0x4]
80002132:	f2 08 0d 08 	divu	r8,r9,r8
80002136:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
8000213a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000213e:	58 08       	cp.w	r8,0
80002140:	e0 8a 00 08 	brle	80002150 <getBaudDiv+0x44>
80002144:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002148:	e0 48 00 ff 	cp.w	r8,255
8000214c:	e0 8a 00 06 	brle	80002158 <getBaudDiv+0x4c>
    return -1;
80002150:	3f f8       	mov	r8,-1
80002152:	ef 48 ff f0 	st.w	r7[-16],r8
80002156:	c0 58       	rjmp	80002160 <getBaudDiv+0x54>
  }

  return baudDiv;
80002158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000215c:	ef 48 ff f0 	st.w	r7[-16],r8
80002160:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002164:	10 9c       	mov	r12,r8
80002166:	2f cd       	sub	sp,-16
80002168:	e3 cd 80 80 	ldm	sp++,r7,pc

8000216c <spi_initMaster>:
  return SPI_OK;
}


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
8000216c:	eb cd 40 80 	pushm	r7,lr
80002170:	1a 97       	mov	r7,sp
80002172:	20 4d       	sub	sp,16
80002174:	ef 4c ff f8 	st.w	r7[-8],r12
80002178:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
8000217c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002180:	f1 39 00 0d 	ld.ub	r9,r8[13]
80002184:	30 18       	mov	r8,1
80002186:	f0 09 18 00 	cp.b	r9,r8
8000218a:	e0 88 00 06 	brls	80002196 <spi_initMaster+0x2a>
    return SPI_ERROR_ARGUMENT;
8000218e:	30 28       	mov	r8,2
80002190:	ef 48 ff f0 	st.w	r7[-16],r8
80002194:	c3 68       	rjmp	80002200 <spi_initMaster+0x94>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80002196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000219a:	e0 68 00 80 	mov	r8,128
8000219e:	93 08       	st.w	r9[0x0],r8

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
800021a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021a4:	70 18       	ld.w	r8,r8[0x4]
800021a6:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
800021aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021ae:	30 19       	mov	r9,1
800021b0:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800021b4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
800021b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800021bc:	f1 38 00 0d 	ld.ub	r8,r8[13]
800021c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800021c4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800021c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021cc:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800021d0:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
800021d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d8:	30 09       	mov	r9,0
800021da:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800021de:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800021e2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021e6:	30 f9       	mov	r9,15
800021e8:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800021ec:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
800021f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800021f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021f8:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
800021fa:	30 08       	mov	r8,0
800021fc:	ef 48 ff f0 	st.w	r7[-16],r8
80002200:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002204:	10 9c       	mov	r12,r8
80002206:	2f cd       	sub	sp,-16
80002208:	e3 cd 80 80 	ldm	sp++,r7,pc

8000220c <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
8000220c:	eb cd 40 80 	pushm	r7,lr
80002210:	1a 97       	mov	r7,sp
80002212:	20 6d       	sub	sp,24
80002214:	ef 4c ff f8 	st.w	r7[-8],r12
80002218:	16 98       	mov	r8,r11
8000221a:	ef 68 ff f4 	st.b	r7[-12],r8
8000221e:	14 98       	mov	r8,r10
80002220:	ef 68 ff f0 	st.b	r7[-16],r8
80002224:	12 98       	mov	r8,r9
80002226:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
8000222a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000222e:	30 18       	mov	r8,1
80002230:	f0 09 18 00 	cp.b	r9,r8
80002234:	e0 8b 00 09 	brhi	80002246 <spi_selectionMode+0x3a>
80002238:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000223c:	30 18       	mov	r8,1
8000223e:	f0 09 18 00 	cp.b	r9,r8
80002242:	e0 88 00 06 	brls	8000224e <spi_selectionMode+0x42>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
80002246:	30 28       	mov	r8,2
80002248:	ef 48 ff e8 	st.w	r7[-24],r8
8000224c:	c2 a8       	rjmp	800022a0 <spi_selectionMode+0x94>
  }

  u_avr32_spi_mr.mr = spi->mr;
8000224e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002252:	70 18       	ld.w	r8,r8[0x4]
80002254:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
80002258:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000225c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002260:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002268:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000226c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80002270:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80002274:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002278:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000227c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002280:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80002284:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
80002288:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000228c:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80002290:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002298:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
8000229a:	30 08       	mov	r8,0
8000229c:	ef 48 ff e8 	st.w	r7[-24],r8
800022a0:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
800022a4:	10 9c       	mov	r12,r8
800022a6:	2f ad       	sub	sp,-24
800022a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800022ac <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800022ac:	eb cd 40 80 	pushm	r7,lr
800022b0:	1a 97       	mov	r7,sp
800022b2:	20 3d       	sub	sp,12
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
800022b8:	16 98       	mov	r8,r11
800022ba:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800022be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022c2:	70 18       	ld.w	r8,r8[0x4]
800022c4:	10 99       	mov	r9,r8
800022c6:	ea 19 00 0f 	orh	r9,0xf
800022ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022ce:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800022d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022d4:	70 18       	ld.w	r8,r8[0x4]
800022d6:	e2 18 00 04 	andl	r8,0x4,COH
800022da:	c1 b0       	breq	80002310 <spi_selectChip+0x64>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
800022dc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800022e0:	30 e8       	mov	r8,14
800022e2:	f0 09 18 00 	cp.b	r9,r8
800022e6:	e0 88 00 06 	brls	800022f2 <spi_selectChip+0x46>
      return SPI_ERROR_ARGUMENT;
800022ea:	30 28       	mov	r8,2
800022ec:	ef 48 ff f4 	st.w	r7[-12],r8
800022f0:	c2 e8       	rjmp	8000234c <spi_selectChip+0xa0>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
800022f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800022f6:	70 19       	ld.w	r9,r8[0x4]
800022f8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800022fc:	b1 68       	lsl	r8,0x10
800022fe:	ea 18 ff f0 	orh	r8,0xfff0
80002302:	e8 18 ff ff 	orl	r8,0xffff
80002306:	10 69       	and	r9,r8
80002308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000230c:	91 19       	st.w	r8[0x4],r9
8000230e:	c1 c8       	rjmp	80002346 <spi_selectChip+0x9a>
  } else {
    if (chip > 3) {
80002310:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002314:	30 38       	mov	r8,3
80002316:	f0 09 18 00 	cp.b	r9,r8
8000231a:	e0 88 00 06 	brls	80002326 <spi_selectChip+0x7a>
      return SPI_ERROR_ARGUMENT;
8000231e:	30 28       	mov	r8,2
80002320:	ef 48 ff f4 	st.w	r7[-12],r8
80002324:	c1 48       	rjmp	8000234c <spi_selectChip+0xa0>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80002326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000232a:	70 1a       	ld.w	r10,r8[0x4]
8000232c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002330:	f0 c9 ff f0 	sub	r9,r8,-16
80002334:	30 18       	mov	r8,1
80002336:	f0 09 09 48 	lsl	r8,r8,r9
8000233a:	5c d8       	com	r8
8000233c:	f5 e8 00 09 	and	r9,r10,r8
80002340:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002344:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
80002346:	30 08       	mov	r8,0
80002348:	ef 48 ff f4 	st.w	r7[-12],r8
8000234c:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80002350:	10 9c       	mov	r12,r8
80002352:	2f dd       	sub	sp,-12
80002354:	e3 cd 80 80 	ldm	sp++,r7,pc

80002358 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80002358:	eb cd 40 80 	pushm	r7,lr
8000235c:	1a 97       	mov	r7,sp
8000235e:	20 4d       	sub	sp,16
80002360:	ef 4c ff f8 	st.w	r7[-8],r12
80002364:	16 98       	mov	r8,r11
80002366:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
8000236a:	e0 68 27 10 	mov	r8,10000
8000236e:	ef 48 ff fc 	st.w	r7[-4],r8
80002372:	c1 28       	rjmp	80002396 <spi_unselectChip+0x3e>

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
80002374:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002378:	58 08       	cp.w	r8,0
8000237a:	5f 08       	sreq	r8
8000237c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002384:	20 18       	sub	r8,1
80002386:	ef 48 ff fc 	st.w	r7[-4],r8
8000238a:	58 09       	cp.w	r9,0
8000238c:	c0 50       	breq	80002396 <spi_unselectChip+0x3e>
      return SPI_ERROR_TIMEOUT;
8000238e:	30 18       	mov	r8,1
80002390:	ef 48 ff f0 	st.w	r7[-16],r8
80002394:	c1 88       	rjmp	800023c4 <spi_unselectChip+0x6c>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80002396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000239a:	70 48       	ld.w	r8,r8[0x10]
8000239c:	e2 18 02 00 	andl	r8,0x200,COH
800023a0:	ce a0       	breq	80002374 <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
800023a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a6:	70 18       	ld.w	r8,r8[0x4]
800023a8:	10 99       	mov	r9,r8
800023aa:	ea 19 00 0f 	orh	r9,0xf
800023ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023b2:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800023b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b8:	fc 18 01 00 	movh	r8,0x100
800023bc:	93 08       	st.w	r9[0x0],r8

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
800023be:	30 08       	mov	r8,0
800023c0:	ef 48 ff f0 	st.w	r7[-16],r8
800023c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800023c8:	10 9c       	mov	r12,r8
800023ca:	2f cd       	sub	sp,-16
800023cc:	e3 cd 80 80 	ldm	sp++,r7,pc

800023d0 <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              unsigned int pba_hz)
{
800023d0:	eb cd 40 80 	pushm	r7,lr
800023d4:	1a 97       	mov	r7,sp
800023d6:	20 7d       	sub	sp,28
800023d8:	ef 4c ff f4 	st.w	r7[-12],r12
800023dc:	ef 4b ff f0 	st.w	r7[-16],r11
800023e0:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800023e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023e8:	f1 39 00 0c 	ld.ub	r9,r8[12]
800023ec:	30 38       	mov	r8,3
800023ee:	f0 09 18 00 	cp.b	r9,r8
800023f2:	e0 8b 00 1d 	brhi	8000242c <spi_setupChipReg+0x5c>
800023f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800023fa:	f1 39 00 0b 	ld.ub	r9,r8[11]
800023fe:	30 18       	mov	r8,1
80002400:	f0 09 18 00 	cp.b	r9,r8
80002404:	e0 8b 00 14 	brhi	8000242c <spi_setupChipReg+0x5c>
80002408:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000240c:	f1 39 00 08 	ld.ub	r9,r8[8]
80002410:	30 78       	mov	r8,7
80002412:	f0 09 18 00 	cp.b	r9,r8
80002416:	e0 88 00 0b 	brls	8000242c <spi_setupChipReg+0x5c>
8000241a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000241e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002422:	31 08       	mov	r8,16
80002424:	f0 09 18 00 	cp.b	r9,r8
80002428:	e0 88 00 06 	brls	80002434 <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
8000242c:	30 28       	mov	r8,2
8000242e:	ef 48 ff e4 	st.w	r7[-28],r8
80002432:	c9 e8       	rjmp	8000256e <spi_setupChipReg+0x19e>
  }

  int baudDiv = getBaudDiv(options, pba_hz);
80002434:	ee fb ff ec 	ld.w	r11,r7[-20]
80002438:	ee fc ff f0 	ld.w	r12,r7[-16]
8000243c:	f0 1f 00 50 	mcall	8000257c <spi_setupChipReg+0x1ac>
80002440:	18 98       	mov	r8,r12
80002442:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
80002446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000244a:	58 08       	cp.w	r8,0
8000244c:	c0 54       	brge	80002456 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
8000244e:	30 28       	mov	r8,2
80002450:	ef 48 ff e4 	st.w	r7[-28],r8
80002454:	c8 d8       	rjmp	8000256e <spi_setupChipReg+0x19e>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
80002456:	30 08       	mov	r8,0
80002458:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol = options->spi_mode >> 1;
8000245c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002460:	f1 38 00 0c 	ld.ub	r8,r8[12]
80002464:	a1 98       	lsr	r8,0x1
80002466:	5c 58       	castu.b	r8
80002468:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000246c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002470:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002474:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80002478:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha = (options->spi_mode & 0x1) ^ 0x1;
8000247c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002480:	f1 38 00 0c 	ld.ub	r8,r8[12]
80002484:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002488:	5f 08       	sreq	r8
8000248a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000248e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002492:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002496:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat = options->stay_act;
8000249a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000249e:	f1 38 00 0b 	ld.ub	r8,r8[11]
800024a2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800024a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800024aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024ae:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800024b2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits = options->bits - 8;
800024b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024ba:	f1 38 00 08 	ld.ub	r8,r8[8]
800024be:	20 88       	sub	r8,8
800024c0:	5c 58       	castu.b	r8
800024c2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800024c6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800024ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800024ce:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800024d2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr = baudDiv;
800024d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800024da:	5c 58       	castu.b	r8
800024dc:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs = options->spck_delay;
800024e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024e4:	f1 38 00 09 	ld.ub	r8,r8[9]
800024e8:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800024ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024f0:	f1 38 00 0a 	ld.ub	r8,r8[10]
800024f4:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
800024f8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800024fc:	11 88       	ld.ub	r8,r8[0x0]
800024fe:	ef 48 ff e8 	st.w	r7[-24],r8
80002502:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002506:	58 18       	cp.w	r8,1
80002508:	c1 a0       	breq	8000253c <spi_setupChipReg+0x16c>
8000250a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000250e:	58 18       	cp.w	r8,1
80002510:	e0 89 00 07 	brgt	8000251e <spi_setupChipReg+0x14e>
80002514:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002518:	58 08       	cp.w	r8,0
8000251a:	c0 b0       	breq	80002530 <spi_setupChipReg+0x160>
8000251c:	c2 28       	rjmp	80002560 <spi_setupChipReg+0x190>
8000251e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002522:	58 28       	cp.w	r8,2
80002524:	c1 20       	breq	80002548 <spi_setupChipReg+0x178>
80002526:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000252a:	58 38       	cp.w	r8,3
8000252c:	c1 40       	breq	80002554 <spi_setupChipReg+0x184>
8000252e:	c1 98       	rjmp	80002560 <spi_setupChipReg+0x190>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
80002530:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002534:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002538:	91 c9       	st.w	r8[0x30],r9
8000253a:	c1 78       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
8000253c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002540:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002544:	91 d9       	st.w	r8[0x34],r9
80002546:	c1 18       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
80002548:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000254c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002550:	91 e9       	st.w	r8[0x38],r9
80002552:	c0 b8       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
80002554:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002558:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000255c:	91 f9       	st.w	r8[0x3c],r9
8000255e:	c0 58       	rjmp	80002568 <spi_setupChipReg+0x198>
      break;
    default:
      return SPI_ERROR_ARGUMENT;
80002560:	30 28       	mov	r8,2
80002562:	ef 48 ff e4 	st.w	r7[-28],r8
80002566:	c0 48       	rjmp	8000256e <spi_setupChipReg+0x19e>
      while(1);
    }
  }
#endif

  return SPI_OK;
80002568:	30 08       	mov	r8,0
8000256a:	ef 48 ff e4 	st.w	r7[-28],r8
8000256e:	ee f8 ff e4 	ld.w	r8,r7[-28]
}
80002572:	10 9c       	mov	r12,r8
80002574:	2f 9d       	sub	sp,-28
80002576:	e3 cd 80 80 	ldm	sp++,r7,pc
8000257a:	00 00       	add	r0,r0
8000257c:	80 00       	ld.sh	r0,r0[0x0]
8000257e:	21 0c       	sub	r12,16

80002580 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
80002580:	eb cd 40 80 	pushm	r7,lr
80002584:	1a 97       	mov	r7,sp
80002586:	20 1d       	sub	sp,4
80002588:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
8000258c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002590:	30 18       	mov	r8,1
80002592:	93 08       	st.w	r9[0x0],r8
}
80002594:	2f fd       	sub	sp,-4
80002596:	e3 cd 80 80 	ldm	sp++,r7,pc

8000259a <spi_write>:
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}


spi_status_t spi_write(volatile avr32_spi_t *spi, unsigned short data)
{
8000259a:	eb cd 40 80 	pushm	r7,lr
8000259e:	1a 97       	mov	r7,sp
800025a0:	20 4d       	sub	sp,16
800025a2:	ef 4c ff f8 	st.w	r7[-8],r12
800025a6:	16 98       	mov	r8,r11
800025a8:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
800025ac:	e0 68 27 10 	mov	r8,10000
800025b0:	ef 48 ff fc 	st.w	r7[-4],r8
800025b4:	c1 28       	rjmp	800025d8 <spi_write+0x3e>

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
800025b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025ba:	58 08       	cp.w	r8,0
800025bc:	5f 08       	sreq	r8
800025be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800025c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800025c6:	20 18       	sub	r8,1
800025c8:	ef 48 ff fc 	st.w	r7[-4],r8
800025cc:	58 09       	cp.w	r9,0
800025ce:	c0 50       	breq	800025d8 <spi_write+0x3e>
      return SPI_ERROR_TIMEOUT;
800025d0:	30 18       	mov	r8,1
800025d2:	ef 48 ff f0 	st.w	r7[-16],r8
800025d6:	c0 f8       	rjmp	800025f4 <spi_write+0x5a>

spi_status_t spi_write(volatile avr32_spi_t *spi, unsigned short data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
800025d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025dc:	70 48       	ld.w	r8,r8[0x10]
800025de:	e2 18 00 02 	andl	r8,0x2,COH
800025e2:	ce a0       	breq	800025b6 <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
800025e4:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800025e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800025ec:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
800025ee:	30 08       	mov	r8,0
800025f0:	ef 48 ff f0 	st.w	r7[-16],r8
800025f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800025f8:	10 9c       	mov	r12,r8
800025fa:	2f cd       	sub	sp,-16
800025fc:	e3 cd 80 80 	ldm	sp++,r7,pc

80002600 <spi_read>:
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80002600:	eb cd 40 80 	pushm	r7,lr
80002604:	1a 97       	mov	r7,sp
80002606:	20 4d       	sub	sp,16
80002608:	ef 4c ff f8 	st.w	r7[-8],r12
8000260c:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80002610:	e0 68 27 10 	mov	r8,10000
80002614:	ef 48 ff fc 	st.w	r7[-4],r8
80002618:	c1 28       	rjmp	8000263c <spi_read+0x3c>

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
8000261a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000261e:	58 08       	cp.w	r8,0
80002620:	5f 08       	sreq	r8
80002622:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000262a:	20 18       	sub	r8,1
8000262c:	ef 48 ff fc 	st.w	r7[-4],r8
80002630:	58 09       	cp.w	r9,0
80002632:	c0 50       	breq	8000263c <spi_read+0x3c>
      return SPI_ERROR_TIMEOUT;
80002634:	30 18       	mov	r8,1
80002636:	ef 48 ff f0 	st.w	r7[-16],r8
8000263a:	c1 38       	rjmp	80002660 <spi_read+0x60>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
8000263c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002640:	70 48       	ld.w	r8,r8[0x10]
80002642:	e2 18 02 01 	andl	r8,0x201,COH
80002646:	e0 48 02 01 	cp.w	r8,513
8000264a:	ce 81       	brne	8000261a <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
8000264c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002650:	70 28       	ld.w	r8,r8[0x8]
80002652:	5c 88       	casts.h	r8
80002654:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002658:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
8000265a:	30 08       	mov	r8,0
8000265c:	ef 48 ff f0 	st.w	r7[-16],r8
80002660:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80002664:	10 9c       	mov	r12,r8
80002666:	2f cd       	sub	sp,-16
80002668:	e3 cd 80 80 	ldm	sp++,r7,pc

8000266c <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000266c:	eb cd 40 80 	pushm	r7,lr
80002670:	1a 97       	mov	r7,sp
80002672:	c0 08       	rjmp	80002672 <_unhandled_interrupt+0x6>

80002674 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80002674:	eb cd 40 80 	pushm	r7,lr
80002678:	1a 97       	mov	r7,sp
8000267a:	20 4d       	sub	sp,16
8000267c:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80002680:	fe 79 08 00 	mov	r9,-63488
80002684:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002688:	f0 08 11 03 	rsub	r8,r8,3
8000268c:	28 08       	sub	r8,-128
8000268e:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002692:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
80002696:	fe 79 08 00 	mov	r9,-63488
8000269a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000269e:	2c 08       	sub	r8,-64
800026a0:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800026a4:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
800026a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026ac:	58 08       	cp.w	r8,0
800026ae:	c1 50       	breq	800026d8 <_get_interrupt_handler+0x64>
800026b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800026b4:	48 e9       	lddpc	r9,800026ec <_get_interrupt_handler+0x78>
800026b6:	a1 78       	lsl	r8,0x1
800026b8:	2f f8       	sub	r8,-1
800026ba:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800026be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800026c2:	f0 08 12 00 	clz	r8,r8
800026c6:	f0 08 11 1f 	rsub	r8,r8,31
800026ca:	a3 68       	lsl	r8,0x2
800026cc:	f2 08 00 08 	add	r8,r9,r8
800026d0:	70 08       	ld.w	r8,r8[0x0]
800026d2:	ef 48 ff f0 	st.w	r7[-16],r8
800026d6:	c0 48       	rjmp	800026de <_get_interrupt_handler+0x6a>
800026d8:	30 08       	mov	r8,0
800026da:	ef 48 ff f0 	st.w	r7[-16],r8
800026de:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800026e2:	10 9c       	mov	r12,r8
800026e4:	2f cd       	sub	sp,-16
800026e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800026ea:	00 00       	add	r0,r0
800026ec:	80 00       	ld.sh	r0,r0[0x0]
800026ee:	58 18       	cp.w	r8,1

800026f0 <INTC_init_interrupts>:
{
  Set_system_register(AVR32_EVBA, (int)&_evba );
}

void INTC_init_interrupts(void)
{
800026f0:	eb cd 40 80 	pushm	r7,lr
800026f4:	1a 97       	mov	r7,sp
800026f6:	20 2d       	sub	sp,8
  unsigned int int_grp, int_req;

  INTC_init_evba();
800026f8:	f0 1f 00 1e 	mcall	80002770 <INTC_init_interrupts+0x80>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800026fc:	30 08       	mov	r8,0
800026fe:	ef 48 ff f8 	st.w	r7[-8],r8
80002702:	c2 e8       	rjmp	8000275e <INTC_init_interrupts+0x6e>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002704:	30 08       	mov	r8,0
80002706:	ef 48 ff fc 	st.w	r7[-4],r8
8000270a:	c1 38       	rjmp	80002730 <INTC_init_interrupts+0x40>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
8000270c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002710:	49 99       	lddpc	r9,80002774 <INTC_init_interrupts+0x84>
80002712:	a1 78       	lsl	r8,0x1
80002714:	2f f8       	sub	r8,-1
80002716:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
8000271a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000271e:	a3 68       	lsl	r8,0x2
80002720:	10 09       	add	r9,r8
80002722:	49 68       	lddpc	r8,80002778 <INTC_init_interrupts+0x88>
80002724:	93 08       	st.w	r9[0x0],r8

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80002726:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000272a:	2f f8       	sub	r8,-1
8000272c:	ef 48 ff fc 	st.w	r7[-4],r8
80002730:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002734:	49 08       	lddpc	r8,80002774 <INTC_init_interrupts+0x84>
80002736:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
8000273a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000273e:	10 39       	cp.w	r9,r8
80002740:	fe 9b ff e6 	brhi	8000270c <INTC_init_interrupts+0x1c>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80002744:	fe 7a 08 00 	mov	r10,-63488
80002748:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000274c:	48 c8       	lddpc	r8,8000277c <INTC_init_interrupts+0x8c>
8000274e:	70 08       	ld.w	r8,r8[0x0]
80002750:	f4 09 09 28 	st.w	r10[r9<<0x2],r8
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80002754:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002758:	2f f8       	sub	r8,-1
8000275a:	ef 48 ff f8 	st.w	r7[-8],r8
8000275e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002762:	59 38       	cp.w	r8,19
80002764:	fe 98 ff d0 	brls	80002704 <INTC_init_interrupts+0x14>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
80002768:	2f ed       	sub	sp,-8
8000276a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000276e:	00 00       	add	r0,r0
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	27 80       	sub	r0,120
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	58 18       	cp.w	r8,1
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	26 6c       	sub	r12,102
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	57 3c       	stdsp	sp[0x1cc],r12

80002780 <INTC_init_evba>:
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
}

//! Init EVBA address. This sequence might also be done in the UTILS/STARTUP/GCC/crt0.S
static __inline__ void INTC_init_evba(void)
{
80002780:	eb cd 40 80 	pushm	r7,lr
80002784:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int)&_evba );
80002786:	48 38       	lddpc	r8,80002790 <INTC_init_evba+0x10>
80002788:	e3 b8 00 01 	mtsr	0x4,r8
}
8000278c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002790:	80 00       	ld.sh	r0,r0[0x0]
80002792:	56 00       	stdsp	sp[0x180],r0

80002794 <INTC_register_interrupt>:
  }
}


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80002794:	eb cd 40 80 	pushm	r7,lr
80002798:	1a 97       	mov	r7,sp
8000279a:	20 4d       	sub	sp,16
8000279c:	ef 4c ff f8 	st.w	r7[-8],r12
800027a0:	ef 4b ff f4 	st.w	r7[-12],r11
800027a4:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800027a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800027ac:	a5 98       	lsr	r8,0x5
800027ae:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
800027b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800027b6:	49 09       	lddpc	r9,800027f4 <INTC_register_interrupt+0x60>
800027b8:	a1 78       	lsl	r8,0x1
800027ba:	2f f8       	sub	r8,-1
800027bc:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
800027c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800027c4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800027c8:	a3 68       	lsl	r8,0x2
800027ca:	10 09       	add	r9,r8
800027cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d0:	93 08       	st.w	r9[0x0],r8
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
800027d2:	fe 7b 08 00 	mov	r11,-63488
800027d6:	ee fa ff fc 	ld.w	r10,r7[-4]
800027da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800027de:	f3 d8 c0 02 	bfextu	r9,r8,0x0,0x2
800027e2:	48 68       	lddpc	r8,800027f8 <INTC_register_interrupt+0x64>
800027e4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800027e8:	f6 0a 09 28 	st.w	r11[r10<<0x2],r8
}
800027ec:	2f cd       	sub	sp,-16
800027ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800027f2:	00 00       	add	r0,r0
800027f4:	80 00       	ld.sh	r0,r0[0x0]
800027f6:	58 18       	cp.w	r8,1
800027f8:	80 00       	ld.sh	r0,r0[0x0]
800027fa:	57 3c       	stdsp	sp[0x1cc],r12

800027fc <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
800027fc:	eb cd 40 80 	pushm	r7,lr
80002800:	1a 97       	mov	r7,sp
80002802:	20 3d       	sub	sp,12
80002804:	ef 4c ff f8 	st.w	r7[-8],r12
80002808:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000280c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002810:	70 a9       	ld.w	r9,r8[0x28]
80002812:	30 08       	mov	r8,0
80002814:	ef 48 ff fc 	st.w	r7[-4],r8
80002818:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
8000281c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002820:	5c 58       	castu.b	r8
80002822:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002826:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000282a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000282e:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002832:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002836:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000283a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000283e:	91 a9       	st.w	r8[0x28],r9
}
80002840:	2f dd       	sub	sp,-12
80002842:	e3 cd 80 80 	ldm	sp++,r7,pc
80002846:	d7 03       	nop

80002848 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002848:	eb cd 40 80 	pushm	r7,lr
8000284c:	1a 97       	mov	r7,sp
8000284e:	20 5d       	sub	sp,20
80002850:	ef 4c ff fc 	st.w	r7[-4],r12
80002854:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000285c:	ec 58 bb 9f 	cp.w	r8,899999
80002860:	e0 88 00 28 	brls	800028b0 <pm_enable_osc0_crystal+0x68>
80002864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002868:	e0 69 c6 bf 	mov	r9,50879
8000286c:	ea 19 00 2d 	orh	r9,0x2d
80002870:	12 38       	cp.w	r8,r9
80002872:	e0 88 00 17 	brls	800028a0 <pm_enable_osc0_crystal+0x58>
80002876:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000287a:	e0 69 11 ff 	mov	r9,4607
8000287e:	ea 19 00 7a 	orh	r9,0x7a
80002882:	12 38       	cp.w	r8,r9
80002884:	e0 8b 00 06 	brhi	80002890 <pm_enable_osc0_crystal+0x48>
80002888:	30 68       	mov	r8,6
8000288a:	ef 48 ff f4 	st.w	r7[-12],r8
8000288e:	c0 48       	rjmp	80002896 <pm_enable_osc0_crystal+0x4e>
80002890:	30 79       	mov	r9,7
80002892:	ef 49 ff f4 	st.w	r7[-12],r9
80002896:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000289a:	ef 48 ff f0 	st.w	r7[-16],r8
8000289e:	c0 48       	rjmp	800028a6 <pm_enable_osc0_crystal+0x5e>
800028a0:	30 59       	mov	r9,5
800028a2:	ef 49 ff f0 	st.w	r7[-16],r9
800028a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800028aa:	ef 48 ff ec 	st.w	r7[-20],r8
800028ae:	c0 48       	rjmp	800028b6 <pm_enable_osc0_crystal+0x6e>
800028b0:	30 49       	mov	r9,4
800028b2:	ef 49 ff ec 	st.w	r7[-20],r9
800028b6:	ee fb ff ec 	ld.w	r11,r7[-20]
800028ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800028be:	f0 1f 00 03 	mcall	800028c8 <pm_enable_osc0_crystal+0x80>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800028c2:	2f bd       	sub	sp,-20
800028c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800028c8:	80 00       	ld.sh	r0,r0[0x0]
800028ca:	27 fc       	sub	r12,127

800028cc <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800028cc:	eb cd 40 80 	pushm	r7,lr
800028d0:	1a 97       	mov	r7,sp
800028d2:	20 2d       	sub	sp,8
800028d4:	ef 4c ff fc 	st.w	r7[-4],r12
800028d8:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
800028dc:	ee fb ff f8 	ld.w	r11,r7[-8]
800028e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800028e4:	f0 1f 00 05 	mcall	800028f8 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
800028e8:	ee fc ff fc 	ld.w	r12,r7[-4]
800028ec:	f0 1f 00 04 	mcall	800028fc <pm_enable_clk0+0x30>
}
800028f0:	2f ed       	sub	sp,-8
800028f2:	e3 cd 80 80 	ldm	sp++,r7,pc
800028f6:	00 00       	add	r0,r0
800028f8:	80 00       	ld.sh	r0,r0[0x0]
800028fa:	29 00       	sub	r0,-112
800028fc:	80 00       	ld.sh	r0,r0[0x0]
800028fe:	29 5a       	sub	r10,-107

80002900 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80002900:	eb cd 40 80 	pushm	r7,lr
80002904:	1a 97       	mov	r7,sp
80002906:	20 3d       	sub	sp,12
80002908:	ef 4c ff f8 	st.w	r7[-8],r12
8000290c:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002910:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002914:	70 a9       	ld.w	r9,r8[0x28]
80002916:	30 08       	mov	r8,0
80002918:	ef 48 ff fc 	st.w	r7[-4],r8
8000291c:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002920:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002924:	5c 58       	castu.b	r8
80002926:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000292a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000292e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002932:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80002936:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000293a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000293e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002942:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002948:	70 08       	ld.w	r8,r8[0x0]
8000294a:	10 99       	mov	r9,r8
8000294c:	a3 a9       	sbr	r9,0x2
8000294e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002952:	91 09       	st.w	r8[0x0],r9
}
80002954:	2f dd       	sub	sp,-12
80002956:	e3 cd 80 80 	ldm	sp++,r7,pc

8000295a <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
8000295a:	eb cd 40 80 	pushm	r7,lr
8000295e:	1a 97       	mov	r7,sp
80002960:	20 1d       	sub	sp,4
80002962:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
80002966:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000296a:	71 58       	ld.w	r8,r8[0x54]
8000296c:	e2 18 00 80 	andl	r8,0x80,COH
80002970:	cf b0       	breq	80002966 <pm_wait_for_clk0_ready+0xc>
}
80002972:	2f fd       	sub	sp,-4
80002974:	e3 cd 80 80 	ldm	sp++,r7,pc

80002978 <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
80002978:	eb cd 40 80 	pushm	r7,lr
8000297c:	1a 97       	mov	r7,sp
8000297e:	20 6d       	sub	sp,24
80002980:	ee ce ff f8 	sub	lr,r7,-8
80002984:	ef 4c ff f8 	st.w	r7[-8],r12
80002988:	ef 4b ff f4 	st.w	r7[-12],r11
8000298c:	ef 4a ff f0 	st.w	r7[-16],r10
80002990:	ef 49 ff ec 	st.w	r7[-20],r9
80002994:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
80002998:	30 08       	mov	r8,0
8000299a:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
8000299e:	7c 18       	ld.w	r8,lr[0x4]
800029a0:	5c 58       	castu.b	r8
800029a2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800029a6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029ae:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800029b2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
800029b6:	7c 08       	ld.w	r8,lr[0x0]
800029b8:	5c 58       	castu.b	r8
800029ba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800029be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029c6:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800029ca:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
800029ce:	7c 18       	ld.w	r8,lr[0x4]
800029d0:	5c 58       	castu.b	r8
800029d2:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800029d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029de:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
800029e2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
800029e6:	7c 08       	ld.w	r8,lr[0x0]
800029e8:	5c 58       	castu.b	r8
800029ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800029ee:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800029f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029f6:	f1 d9 d1 e1 	bfins	r8,r9,0xf,0x1
800029fa:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
800029fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a02:	5c 58       	castu.b	r8
80002a04:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a08:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a10:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80002a14:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
80002a18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a1c:	5c 58       	castu.b	r8
80002a1e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002a22:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a2a:	f1 d9 d2 e1 	bfins	r8,r9,0x17,0x1
80002a2e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80002a32:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002a36:	5c 58       	castu.b	r8
80002a38:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002a3c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a44:	f1 d9 d3 03 	bfins	r8,r9,0x18,0x3
80002a48:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80002a4c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002a50:	5c 58       	castu.b	r8
80002a52:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002a56:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002a5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a5e:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80002a62:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->cksel = u_avr32_pm_cksel.cksel;
80002a66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a6e:	91 19       	st.w	r8[0x4],r9

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
80002a70:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a74:	71 58       	ld.w	r8,r8[0x54]
80002a76:	e2 18 00 20 	andl	r8,0x20,COH
80002a7a:	cf b0       	breq	80002a70 <pm_cksel+0xf8>
}
80002a7c:	2f ad       	sub	sp,-24
80002a7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002a82 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
80002a82:	eb cd 40 80 	pushm	r7,lr
80002a86:	1a 97       	mov	r7,sp
80002a88:	20 6d       	sub	sp,24
80002a8a:	ee ce ff f8 	sub	lr,r7,-8
80002a8e:	ef 4c ff f8 	st.w	r7[-8],r12
80002a92:	ef 4b ff f4 	st.w	r7[-12],r11
80002a96:	ef 4a ff f0 	st.w	r7[-16],r10
80002a9a:	ef 49 ff ec 	st.w	r7[-20],r9
80002a9e:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
80002aa2:	30 08       	mov	r8,0
80002aa4:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_pll.PLL.pllosc   = osc;
80002aa8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002aac:	5c 58       	castu.b	r8
80002aae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002ab2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ab6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aba:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80002abe:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.plldiv   = div;
80002ac2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ac6:	5c 58       	castu.b	r8
80002ac8:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002acc:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ad0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ad4:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
80002ad8:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllmul   = mul;
80002adc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002ae0:	5c 58       	castu.b	r8
80002ae2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80002ae6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002aea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002aee:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80002af2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllcount = lockcount;
80002af6:	7c 08       	ld.w	r8,lr[0x0]
80002af8:	5c 58       	castu.b	r8
80002afa:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002afe:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b06:	f1 d9 d3 06 	bfins	r8,r9,0x18,0x6
80002b0a:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->pll[pll] = u_avr32_pm_pll.pll;
80002b0e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b12:	ee fa ff fc 	ld.w	r10,r7[-4]
80002b16:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b1a:	2f 88       	sub	r8,-8
80002b1c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002b20:	2f ad       	sub	sp,-24
80002b22:	e3 cd 80 80 	ldm	sp++,r7,pc

80002b26 <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
80002b26:	eb cd 40 80 	pushm	r7,lr
80002b2a:	1a 97       	mov	r7,sp
80002b2c:	20 6d       	sub	sp,24
80002b2e:	ef 4c ff f8 	st.w	r7[-8],r12
80002b32:	ef 4b ff f4 	st.w	r7[-12],r11
80002b36:	ef 4a ff f0 	st.w	r7[-16],r10
80002b3a:	ef 49 ff ec 	st.w	r7[-20],r9
80002b3e:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80002b42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b46:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002b4a:	2f 88       	sub	r8,-8
80002b4c:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80002b50:	30 08       	mov	r8,0
80002b52:	ef 48 ff fc 	st.w	r7[-4],r8
80002b56:	ef 49 ff fc 	st.w	r7[-4],r9
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
80002b5a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002b5e:	5c 58       	castu.b	r8
80002b60:	a1 78       	lsl	r8,0x1
80002b62:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b66:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002b6a:	5c 58       	castu.b	r8
80002b6c:	f3 e8 10 08 	or	r8,r9,r8
80002b70:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b74:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002b78:	5c 58       	castu.b	r8
80002b7a:	a3 68       	lsl	r8,0x2
80002b7c:	5c 58       	castu.b	r8
80002b7e:	f3 e8 10 08 	or	r8,r9,r8
80002b82:	5c 58       	castu.b	r8
80002b84:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002b88:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002b8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b90:	f1 d9 d0 43 	bfins	r8,r9,0x2,0x3
80002b94:	ef 48 ff fc 	st.w	r7[-4],r8
  pm->pll[pll] = u_avr32_pm_pll.pll;
80002b98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002b9c:	ee fa ff fc 	ld.w	r10,r7[-4]
80002ba0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ba4:	2f 88       	sub	r8,-8
80002ba6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002baa:	2f ad       	sub	sp,-24
80002bac:	e3 cd 80 80 	ldm	sp++,r7,pc

80002bb0 <pm_pll_enable>:
}


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
80002bb0:	eb cd 40 80 	pushm	r7,lr
80002bb4:	1a 97       	mov	r7,sp
80002bb6:	20 2d       	sub	sp,8
80002bb8:	ef 4c ff fc 	st.w	r7[-4],r12
80002bbc:	ef 4b ff f8 	st.w	r7[-8],r11
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
80002bc0:	ee fb ff f8 	ld.w	r11,r7[-8]
80002bc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002bc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002bcc:	2f 88       	sub	r8,-8
80002bce:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80002bd2:	10 9a       	mov	r10,r8
80002bd4:	a1 aa       	sbr	r10,0x0
80002bd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002bda:	f6 c8 ff f8 	sub	r8,r11,-8
80002bde:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
}
80002be2:	2f ed       	sub	sp,-8
80002be4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002be8 <pm_wait_for_pll0_locked>:
  pm->pll[pll] &= ~AVR32_PM_PLLEN_MASK;
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
80002be8:	eb cd 40 80 	pushm	r7,lr
80002bec:	1a 97       	mov	r7,sp
80002bee:	20 1d       	sub	sp,4
80002bf0:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80002bf4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002bf8:	71 58       	ld.w	r8,r8[0x54]
80002bfa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002bfe:	cf b0       	breq	80002bf4 <pm_wait_for_pll0_locked+0xc>
}
80002c00:	2f fd       	sub	sp,-4
80002c02:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c06 <pm_switch_to_clock>:
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK1_MASK));
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80002c06:	eb cd 40 80 	pushm	r7,lr
80002c0a:	1a 97       	mov	r7,sp
80002c0c:	20 3d       	sub	sp,12
80002c0e:	ef 4c ff f8 	st.w	r7[-8],r12
80002c12:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002c16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c1a:	70 09       	ld.w	r9,r8[0x0]
80002c1c:	30 08       	mov	r8,0
80002c1e:	ef 48 ff fc 	st.w	r7[-4],r8
80002c22:	ef 49 ff fc 	st.w	r7[-4],r9
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002c26:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c2a:	5c 58       	castu.b	r8
80002c2c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002c30:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c38:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80002c3c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80002c40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002c44:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c48:	91 09       	st.w	r8[0x0],r9
}
80002c4a:	2f dd       	sub	sp,-12
80002c4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c50 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80002c50:	eb cd 40 80 	pushm	r7,lr
80002c54:	1a 97       	mov	r7,sp
80002c56:	20 3d       	sub	sp,12
80002c58:	ef 4c ff fc 	st.w	r7[-4],r12
80002c5c:	ef 4b ff f8 	st.w	r7[-8],r11
80002c60:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80002c64:	ee fb ff f8 	ld.w	r11,r7[-8]
80002c68:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c6c:	f0 1f 00 08 	mcall	80002c8c <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80002c70:	ee fb ff f4 	ld.w	r11,r7[-12]
80002c74:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c78:	f0 1f 00 06 	mcall	80002c90 <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
80002c7c:	30 1b       	mov	r11,1
80002c7e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002c82:	f0 1f 00 05 	mcall	80002c94 <pm_switch_to_osc0+0x44>
}
80002c86:	2f dd       	sub	sp,-12
80002c88:	e3 cd 80 80 	ldm	sp++,r7,pc
80002c8c:	80 00       	ld.sh	r0,r0[0x0]
80002c8e:	28 48       	sub	r8,-124
80002c90:	80 00       	ld.sh	r0,r0[0x0]
80002c92:	28 cc       	sub	r12,-116
80002c94:	80 00       	ld.sh	r0,r0[0x0]
80002c96:	2c 06       	sub	r6,-64

80002c98 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80002c98:	eb cd 40 80 	pushm	r7,lr
80002c9c:	1a 97       	mov	r7,sp
80002c9e:	20 cd       	sub	sp,48
80002ca0:	ef 4c ff d4 	st.w	r7[-44],r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
80002ca4:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ca8:	70 08       	ld.w	r8,r8[0x0]
80002caa:	ef 48 ff d8 	st.w	r7[-40],r8
  unsigned long in_osc0_f = param->osc0_f;
80002cae:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002cb2:	70 28       	ld.w	r8,r8[0x8]
80002cb4:	ef 48 ff dc 	st.w	r7[-36],r8
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
80002cb8:	30 08       	mov	r8,0
80002cba:	ef 48 ff e8 	st.w	r7[-24],r8
80002cbe:	30 08       	mov	r8,0
80002cc0:	ef 48 ff ec 	st.w	r7[-20],r8
80002cc4:	30 08       	mov	r8,0
80002cc6:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long pll_freq, rest;
  Bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
80002cca:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002cce:	70 38       	ld.w	r8,r8[0xc]
80002cd0:	10 9a       	mov	r10,r8
80002cd2:	ee fb ff dc 	ld.w	r11,r7[-36]
80002cd6:	fe 7c 0c 00 	mov	r12,-62464
80002cda:	f0 1f 00 b0 	mcall	80002f98 <pm_configure_clocks+0x300>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
80002cde:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002ce2:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002ce6:	10 39       	cp.w	r9,r8
80002ce8:	c0 f1       	brne	80002d06 <pm_configure_clocks+0x6e>
  {
    param->cpu_f = in_osc0_f;
80002cea:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002cee:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002cf2:	93 08       	st.w	r9[0x0],r8
    param->pba_f = in_osc0_f;
80002cf4:	ee f9 ff d4 	ld.w	r9,r7[-44]
80002cf8:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002cfc:	93 18       	st.w	r9[0x4],r8
    return PM_FREQ_STATUS_OK;
80002cfe:	30 09       	mov	r9,0
80002d00:	ef 49 ff d0 	st.w	r7[-48],r9
80002d04:	c4 49       	rjmp	80002f8c <pm_configure_clocks+0x2f4>
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80002d06:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002d0a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002d0e:	f2 08 0d 08 	divu	r8,r9,r8
80002d12:	12 98       	mov	r8,r9
80002d14:	ef 48 ff f8 	st.w	r7[-8],r8

  for (div = 1; div < 32; div++)
80002d18:	30 18       	mov	r8,1
80002d1a:	ef 48 ff e4 	st.w	r7[-28],r8
80002d1e:	c1 28       	rjmp	80002d42 <pm_configure_clocks+0xaa>
  {
    if ((div * rest) % in_osc0_f == 0)
80002d20:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002d28:	b1 39       	mul	r9,r8
80002d2a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002d2e:	f2 08 0d 08 	divu	r8,r9,r8
80002d32:	12 98       	mov	r8,r9
80002d34:	58 08       	cp.w	r8,0
80002d36:	c0 b0       	breq	80002d4c <pm_configure_clocks+0xb4>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
80002d38:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d3c:	2f f8       	sub	r8,-1
80002d3e:	ef 48 ff e4 	st.w	r7[-28],r8
80002d42:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d46:	59 f8       	cp.w	r8,31
80002d48:	fe 98 ff ec 	brls	80002d20 <pm_configure_clocks+0x88>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
  }
  if (div == 32)
80002d4c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d50:	e0 48 00 20 	cp.w	r8,32
80002d54:	c0 51       	brne	80002d5e <pm_configure_clocks+0xc6>
    return PM_FREQ_STATUS_FAIL;
80002d56:	3f f8       	mov	r8,-1
80002d58:	ef 48 ff d0 	st.w	r7[-48],r8
80002d5c:	c1 89       	rjmp	80002f8c <pm_configure_clocks+0x2f4>

  mul = (in_cpu_f * div) / in_osc0_f;
80002d5e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002d62:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d66:	b1 39       	mul	r9,r8
80002d68:	ee f8 ff dc 	ld.w	r8,r7[-36]
80002d6c:	f2 08 0d 08 	divu	r8,r9,r8
80002d70:	ef 48 ff e0 	st.w	r7[-32],r8

  if (mul > PM_MAX_MUL)
80002d74:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002d78:	58 f8       	cp.w	r8,15
80002d7a:	e0 88 00 10 	brls	80002d9a <pm_configure_clocks+0x102>
    return PM_FREQ_STATUS_FAIL;
80002d7e:	3f f9       	mov	r9,-1
80002d80:	ef 49 ff d0 	st.w	r7[-48],r9
80002d84:	c0 49       	rjmp	80002f8c <pm_configure_clocks+0x2f4>

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
  {
    div /= 2;
80002d86:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d8a:	a1 98       	lsr	r8,0x1
80002d8c:	ef 48 ff e4 	st.w	r7[-28],r8
    div2_cpu++;
80002d90:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002d94:	2f f8       	sub	r8,-1
80002d96:	ef 48 ff ec 	st.w	r7[-20],r8

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80002d9a:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002d9e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002da2:	cf 20       	breq	80002d86 <pm_configure_clocks+0xee>
80002da4:	c1 18       	rjmp	80002dc6 <pm_configure_clocks+0x12e>
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
  {
    if (2 * mul > PM_MAX_MUL)
80002da6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002daa:	a1 78       	lsl	r8,0x1
80002dac:	58 f8       	cp.w	r8,15
80002dae:	e0 8b 00 1f 	brhi	80002dec <pm_configure_clocks+0x154>
      break;
    mul *= 2;
80002db2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002db6:	a1 78       	lsl	r8,0x1
80002db8:	ef 48 ff e0 	st.w	r7[-32],r8
    div2_cpu++;
80002dbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002dc0:	2f f8       	sub	r8,-1
80002dc2:	ef 48 ff ec 	st.w	r7[-20],r8

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80002dc6:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002dca:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002dce:	f2 08 02 48 	mul	r8,r9,r8
80002dd2:	f0 09 15 01 	lsl	r9,r8,0x1
80002dd6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002dda:	f2 08 0d 08 	divu	r8,r9,r8
80002dde:	e0 69 1b ff 	mov	r9,7167
80002de2:	ea 19 0e 4e 	orh	r9,0xe4e
80002de6:	12 38       	cp.w	r8,r9
80002de8:	fe 98 ff df 	brls	80002da6 <pm_configure_clocks+0x10e>
      break;
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
80002dec:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002df0:	58 08       	cp.w	r8,0
80002df2:	c0 90       	breq	80002e04 <pm_configure_clocks+0x16c>
  {
    div2_cpu--;
80002df4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002df8:	20 18       	sub	r8,1
80002dfa:	ef 48 ff ec 	st.w	r7[-20],r8
    div2_en = 1;
80002dfe:	30 18       	mov	r8,1
80002e00:	ef 48 ff e8 	st.w	r7[-24],r8
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80002e04:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002e08:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002e0c:	f2 08 02 4a 	mul	r10,r9,r8
80002e10:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002e14:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002e18:	f0 09 09 48 	lsl	r8,r8,r9
80002e1c:	f4 08 0d 08 	divu	r8,r10,r8
80002e20:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
80002e24:	ee f9 ff ec 	ld.w	r9,r7[-20]
80002e28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e2c:	f0 09 0a 49 	lsr	r9,r8,r9
80002e30:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002e34:	91 09       	st.w	r8[0x0],r9
  mul--;
80002e36:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002e3a:	20 18       	sub	r8,1
80002e3c:	ef 48 ff e0 	st.w	r7[-32],r8

  pm_pll_setup(&AVR32_PM
80002e40:	31 08       	mov	r8,16
80002e42:	1a d8       	st.w	--sp,r8
80002e44:	30 08       	mov	r8,0
80002e46:	ee f9 ff e4 	ld.w	r9,r7[-28]
80002e4a:	ee fa ff e0 	ld.w	r10,r7[-32]
80002e4e:	30 0b       	mov	r11,0
80002e50:	fe 7c 0c 00 	mov	r12,-62464
80002e54:	f0 1f 00 52 	mcall	80002f9c <pm_configure_clocks+0x304>
80002e58:	2f fd       	sub	sp,-4
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
80002e5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e5e:	e0 69 67 ff 	mov	r9,26623
80002e62:	ea 19 09 89 	orh	r9,0x989
80002e66:	12 38       	cp.w	r8,r9
80002e68:	5f 8a       	srls	r10
80002e6a:	30 08       	mov	r8,0
80002e6c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80002e70:	30 0b       	mov	r11,0
80002e72:	fe 7c 0c 00 	mov	r12,-62464
80002e76:	f0 1f 00 4b 	mcall	80002fa0 <pm_configure_clocks+0x308>
  , (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0 // pll_freq
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
80002e7a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e7e:	ef 48 ff f8 	st.w	r7[-8],r8
80002e82:	c1 68       	rjmp	80002eae <pm_configure_clocks+0x216>
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
         rest != param->pba_f)
  {
    div2_pba++;
80002e84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002e88:	2f f8       	sub	r8,-1
80002e8a:	ef 48 ff f0 	st.w	r7[-16],r8
    rest = pll_freq / (1 << div2_pba);
80002e8e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002e92:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002e96:	f0 09 0a 48 	lsr	r8,r8,r9
80002e9a:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rest < param->pba_f)
80002e9e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ea2:	70 19       	ld.w	r9,r8[0x4]
80002ea4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ea8:	10 39       	cp.w	r9,r8
80002eaa:	e0 8b 00 12 	brhi	80002ece <pm_configure_clocks+0x236>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80002eae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eb2:	e0 69 14 80 	mov	r9,5248
80002eb6:	ea 19 03 ef 	orh	r9,0x3ef
80002eba:	12 38       	cp.w	r8,r9
80002ebc:	fe 9b ff e4 	brhi	80002e84 <pm_configure_clocks+0x1ec>
80002ec0:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ec4:	70 19       	ld.w	r9,r8[0x4]
80002ec6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002eca:	10 39       	cp.w	r9,r8
80002ecc:	cd c1       	brne	80002e84 <pm_configure_clocks+0x1ec>
    if (rest < param->pba_f)
      break;
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
80002ece:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002ed2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002ed6:	f0 09 0a 49 	lsr	r9,r8,r9
80002eda:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002ede:	91 19       	st.w	r8[0x4],r9

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80002ee0:	30 0b       	mov	r11,0
80002ee2:	fe 7c 0c 00 	mov	r12,-62464
80002ee6:	f0 1f 00 30 	mcall	80002fa4 <pm_configure_clocks+0x30c>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
80002eea:	fe 7c 0c 00 	mov	r12,-62464
80002eee:	f0 1f 00 2f 	mcall	80002fa8 <pm_configure_clocks+0x310>

  if (div2_cpu)
80002ef2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002ef6:	58 08       	cp.w	r8,0
80002ef8:	c0 a0       	breq	80002f0c <pm_configure_clocks+0x274>
  {
    b_div2_cpu = TRUE;
80002efa:	30 18       	mov	r8,1
80002efc:	ef 68 ff ff 	st.b	r7[-1],r8
    div2_cpu--;
80002f00:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f04:	20 18       	sub	r8,1
80002f06:	ef 48 ff ec 	st.w	r7[-20],r8
80002f0a:	c0 48       	rjmp	80002f12 <pm_configure_clocks+0x27a>
  }
  else
    b_div2_cpu = FALSE;
80002f0c:	30 08       	mov	r8,0
80002f0e:	ef 68 ff ff 	st.b	r7[-1],r8

  if (div2_pba)
80002f12:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f16:	58 08       	cp.w	r8,0
80002f18:	c0 a0       	breq	80002f2c <pm_configure_clocks+0x294>
  {
    b_div2_pba = TRUE;
80002f1a:	30 18       	mov	r8,1
80002f1c:	ef 68 ff fe 	st.b	r7[-2],r8
    div2_pba--;
80002f20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002f24:	20 18       	sub	r8,1
80002f26:	ef 48 ff f0 	st.w	r7[-16],r8
80002f2a:	c0 48       	rjmp	80002f32 <pm_configure_clocks+0x29a>
  }
  else
    b_div2_pba = FALSE;
80002f2c:	30 08       	mov	r8,0
80002f2e:	ef 68 ff fe 	st.b	r7[-2],r8

  pm_cksel(&AVR32_PM
80002f32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002f36:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80002f3a:	ef 3b ff fe 	ld.ub	r11,r7[-2]
80002f3e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f42:	1a d8       	st.w	--sp,r8
80002f44:	1a d9       	st.w	--sp,r9
80002f46:	ee f8 ff ec 	ld.w	r8,r7[-20]
80002f4a:	14 99       	mov	r9,r10
80002f4c:	ee fa ff f0 	ld.w	r10,r7[-16]
80002f50:	fe 7c 0c 00 	mov	r12,-62464
80002f54:	f0 1f 00 16 	mcall	80002fac <pm_configure_clocks+0x314>
80002f58:	2f ed       	sub	sp,-8
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
80002f5a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002f5e:	70 08       	ld.w	r8,r8[0x0]
80002f60:	e0 69 8a 40 	mov	r9,35392
80002f64:	ea 19 01 f7 	orh	r9,0x1f7
80002f68:	12 38       	cp.w	r8,r9
80002f6a:	e0 88 00 06 	brls	80002f76 <pm_configure_clocks+0x2de>
  {
    flashc_set_wait_state(1);
80002f6e:	30 1c       	mov	r12,1
80002f70:	f0 1f 00 10 	mcall	80002fb0 <pm_configure_clocks+0x318>
80002f74:	c0 48       	rjmp	80002f7c <pm_configure_clocks+0x2e4>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
80002f76:	30 0c       	mov	r12,0
80002f78:	f0 1f 00 0e 	mcall	80002fb0 <pm_configure_clocks+0x318>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
80002f7c:	30 2b       	mov	r11,2
80002f7e:	fe 7c 0c 00 	mov	r12,-62464
80002f82:	f0 1f 00 0d 	mcall	80002fb4 <pm_configure_clocks+0x31c>

  return PM_FREQ_STATUS_OK;
80002f86:	30 08       	mov	r8,0
80002f88:	ef 48 ff d0 	st.w	r7[-48],r8
80002f8c:	ee f8 ff d0 	ld.w	r8,r7[-48]
}
80002f90:	10 9c       	mov	r12,r8
80002f92:	2f 4d       	sub	sp,-48
80002f94:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f98:	80 00       	ld.sh	r0,r0[0x0]
80002f9a:	2c 50       	sub	r0,-59
80002f9c:	80 00       	ld.sh	r0,r0[0x0]
80002f9e:	2a 82       	sub	r2,-88
80002fa0:	80 00       	ld.sh	r0,r0[0x0]
80002fa2:	2b 26       	sub	r6,-78
80002fa4:	80 00       	ld.sh	r0,r0[0x0]
80002fa6:	2b b0       	sub	r0,-69
80002fa8:	80 00       	ld.sh	r0,r0[0x0]
80002faa:	2b e8       	sub	r8,-66
80002fac:	80 00       	ld.sh	r0,r0[0x0]
80002fae:	29 78       	sub	r8,-105
80002fb0:	80 00       	ld.sh	r0,r0[0x0]
80002fb2:	2f b8       	sub	r8,-5
80002fb4:	80 00       	ld.sh	r0,r0[0x0]
80002fb6:	2c 06       	sub	r6,-64

80002fb8 <flashc_set_wait_state>:
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80002fb8:	eb cd 40 80 	pushm	r7,lr
80002fbc:	1a 97       	mov	r7,sp
80002fbe:	20 2d       	sub	sp,8
80002fc0:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002fc4:	fe 68 14 00 	mov	r8,-125952
80002fc8:	70 09       	ld.w	r9,r8[0x0]
80002fca:	30 08       	mov	r8,0
80002fcc:	ef 48 ff fc 	st.w	r7[-4],r8
80002fd0:	ef 49 ff fc 	st.w	r7[-4],r9
  u_avr32_flashc_fcr.FCR.fws = wait_state;
80002fd4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002fd8:	5c 58       	castu.b	r8
80002fda:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80002fde:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002fe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fe6:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
80002fea:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80002fee:	fe 69 14 00 	mov	r9,-125952
80002ff2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ff6:	93 08       	st.w	r9[0x0],r8
}
80002ff8:	2f ed       	sub	sp,-8
80002ffa:	e3 cd 80 80 	ldm	sp++,r7,pc

80002ffe <sdramc_ck_delay>:
/*! \brief Waits during at least the specified delay before returning.
 *
 * \param ck Number of HSB clock cycles to wait.
 */
static void sdramc_ck_delay(unsigned long ck)
{
80002ffe:	eb cd 40 80 	pushm	r7,lr
80003002:	1a 97       	mov	r7,sp
80003004:	20 3d       	sub	sp,12
80003006:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the CPU cycle counter (CPU and HSB clocks are the same).
  unsigned long delay_start_cycle = Get_system_register(AVR32_COUNT);
8000300a:	e1 b8 00 42 	mfsr	r8,0x108
8000300e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long delay_end_cycle = delay_start_cycle + ck;
80003012:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003016:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000301a:	f2 08 00 08 	add	r8,r9,r8
8000301e:	ef 48 ff fc 	st.w	r7[-4],r8

  // To be safer, the end of wait is based on an inequality test, so CPU cycle
  // counter wrap around is checked.
  if (delay_start_cycle > delay_end_cycle)
80003022:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000302a:	10 39       	cp.w	r9,r8
8000302c:	e0 88 00 0a 	brls	80003040 <sdramc_ck_delay+0x42>
  {
    while ((unsigned long)Get_system_register(AVR32_COUNT) > delay_end_cycle);
80003030:	e1 b8 00 42 	mfsr	r8,0x108
80003034:	10 99       	mov	r9,r8
80003036:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000303a:	10 39       	cp.w	r9,r8
8000303c:	fe 9b ff fa 	brhi	80003030 <sdramc_ck_delay+0x32>
  }
  while ((unsigned long)Get_system_register(AVR32_COUNT) < delay_end_cycle);
80003040:	e1 b8 00 42 	mfsr	r8,0x108
80003044:	10 99       	mov	r9,r8
80003046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000304a:	10 39       	cp.w	r9,r8
8000304c:	cf a3       	brcs	80003040 <sdramc_ck_delay+0x42>
}
8000304e:	2f dd       	sub	sp,-12
80003050:	e3 cd 80 80 	ldm	sp++,r7,pc

80003054 <sdramc_enable_muxed_pins>:
/*! \brief Puts the multiplexed MCU pins used for the SDRAM under control of the
 *         SDRAMC.
 */
#if BOARD == EVK1100 || BOARD == EVK1104 || BOARD == EVK1105 
static void sdramc_enable_muxed_pins(void)
{
80003054:	eb cd 40 80 	pushm	r7,lr
80003058:	1a 97       	mov	r7,sp
    // Enable clock-related pins.
    {AVR32_EBI_SDCK_0_PIN,            AVR32_EBI_SDCK_0_FUNCTION           },
    {AVR32_EBI_SDCKE_0_PIN,           AVR32_EBI_SDCKE_0_FUNCTION          }
  };

  gpio_enable_module(SDRAMC_EBI_GPIO_MAP, sizeof(SDRAMC_EBI_GPIO_MAP) / sizeof(SDRAMC_EBI_GPIO_MAP[0]));
8000305a:	32 7b       	mov	r11,39
8000305c:	48 3c       	lddpc	r12,80003068 <sdramc_enable_muxed_pins+0x14>
8000305e:	f0 1f 00 04 	mcall	8000306c <sdramc_enable_muxed_pins+0x18>
}
80003062:	e3 cd 80 80 	ldm	sp++,r7,pc
80003066:	00 00       	add	r0,r0
80003068:	80 00       	ld.sh	r0,r0[0x0]
8000306a:	58 b8       	cp.w	r8,11
8000306c:	80 00       	ld.sh	r0,r0[0x0]
8000306e:	3e 1c       	mov	r12,-31

80003070 <sdramc_init>:
}

#endif

void sdramc_init(unsigned long hsb_hz)
{
80003070:	eb cd 40 80 	pushm	r7,lr
80003074:	1a 97       	mov	r7,sp
80003076:	21 0d       	sub	sp,64
80003078:	ef 4c ff ec 	st.w	r7[-20],r12
  unsigned long hsb_mhz_dn = hsb_hz / 1000000;
8000307c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80003080:	e0 68 de 83 	mov	r8,56963
80003084:	ea 18 43 1b 	orh	r8,0x431b
80003088:	f2 08 06 48 	mulu.d	r8,r9,r8
8000308c:	f2 08 16 12 	lsr	r8,r9,0x12
80003090:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long hsb_mhz_up = (hsb_hz + 999999) / 1000000;
80003094:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003098:	ee 7a 42 3f 	mov	r10,999999
8000309c:	f0 0a 00 09 	add	r9,r8,r10
800030a0:	e0 68 de 83 	mov	r8,56963
800030a4:	ea 18 43 1b 	orh	r8,0x431b
800030a8:	f2 08 06 48 	mulu.d	r8,r9,r8
800030ac:	f2 08 16 12 	lsr	r8,r9,0x12
800030b0:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile ATPASTE2(U, SDRAM_DBW) *sdram = SDRAM;
800030b4:	fc 18 d0 00 	movh	r8,0xd000
800030b8:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int i;

  // Put the multiplexed MCU pins used for the SDRAM under control of the SDRAMC.
  sdramc_enable_muxed_pins();
800030bc:	f0 1f 00 90 	mcall	800032fc <sdramc_init+0x28c>

  // Enable SDRAM mode for CS1.
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR] |= 1 << AVR32_EBI_SDRAM_CS;
800030c0:	fe 69 10 00 	mov	r9,-126976
800030c4:	fe 68 10 00 	mov	r8,-126976
800030c8:	f0 f8 01 24 	ld.w	r8,r8[292]
800030cc:	a1 b8       	sbr	r8,0x1
800030ce:	f3 48 01 24 	st.w	r9[292],r8
  AVR32_HMATRIX.sfr[AVR32_EBI_HMATRIX_NR];
800030d2:	fe 68 10 00 	mov	r8,-126976
800030d6:	f0 f8 01 24 	ld.w	r8,r8[292]

  // Configure the SDRAM Controller with SDRAM setup and timing information.
  // All timings below are rounded up because they are minimal values.
  AVR32_SDRAMC.cr =
800030da:	fe 6a 20 00 	mov	r10,-122880
800030de:	ee f9 ff f4 	ld.w	r9,r7[-12]
800030e2:	12 98       	mov	r8,r9
800030e4:	a3 78       	lsl	r8,0x3
800030e6:	12 18       	sub	r8,r9
800030e8:	a1 78       	lsl	r8,0x1
800030ea:	f0 c9 fc 19 	sub	r9,r8,-999
800030ee:	e0 68 4d d3 	mov	r8,19923
800030f2:	ea 18 10 62 	orh	r8,0x1062
800030f6:	f2 08 06 48 	mulu.d	r8,r9,r8
800030fa:	f2 08 16 06 	lsr	r8,r9,0x6
800030fe:	a9 68       	lsl	r8,0x8
80003100:	10 9b       	mov	r11,r8
80003102:	e2 1b 0f 00 	andl	r11,0xf00,COH
80003106:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000310a:	12 98       	mov	r8,r9
8000310c:	a5 68       	lsl	r8,0x4
8000310e:	12 18       	sub	r8,r9
80003110:	a3 68       	lsl	r8,0x2
80003112:	f0 c9 fc 19 	sub	r9,r8,-999
80003116:	e0 68 4d d3 	mov	r8,19923
8000311a:	ea 18 10 62 	orh	r8,0x1062
8000311e:	f2 08 06 48 	mulu.d	r8,r9,r8
80003122:	f2 08 16 06 	lsr	r8,r9,0x6
80003126:	ad 68       	lsl	r8,0xc
80003128:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000312c:	10 4b       	or	r11,r8
8000312e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003132:	12 98       	mov	r8,r9
80003134:	a5 68       	lsl	r8,0x4
80003136:	12 18       	sub	r8,r9
80003138:	f0 c9 fc 19 	sub	r9,r8,-999
8000313c:	e0 68 4d d3 	mov	r8,19923
80003140:	ea 18 10 62 	orh	r8,0x1062
80003144:	f2 08 06 48 	mulu.d	r8,r9,r8
80003148:	f2 08 16 06 	lsr	r8,r9,0x6
8000314c:	b1 68       	lsl	r8,0x10
8000314e:	e6 18 00 0f 	andh	r8,0xf,COH
80003152:	10 4b       	or	r11,r8
80003154:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003158:	12 98       	mov	r8,r9
8000315a:	a5 68       	lsl	r8,0x4
8000315c:	12 18       	sub	r8,r9
8000315e:	f0 c9 fc 19 	sub	r9,r8,-999
80003162:	e0 68 4d d3 	mov	r8,19923
80003166:	ea 18 10 62 	orh	r8,0x1062
8000316a:	f2 08 06 48 	mulu.d	r8,r9,r8
8000316e:	f2 08 16 06 	lsr	r8,r9,0x6
80003172:	b5 68       	lsl	r8,0x14
80003174:	e6 18 00 f0 	andh	r8,0xf0,COH
80003178:	10 4b       	or	r11,r8
8000317a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000317e:	12 98       	mov	r8,r9
80003180:	a3 78       	lsl	r8,0x3
80003182:	12 08       	add	r8,r9
80003184:	a3 68       	lsl	r8,0x2
80003186:	12 08       	add	r8,r9
80003188:	f0 c9 fc 19 	sub	r9,r8,-999
8000318c:	e0 68 4d d3 	mov	r8,19923
80003190:	ea 18 10 62 	orh	r8,0x1062
80003194:	f2 08 06 48 	mulu.d	r8,r9,r8
80003198:	f2 08 16 06 	lsr	r8,r9,0x6
8000319c:	b9 68       	lsl	r8,0x18
8000319e:	e6 18 0f 00 	andh	r8,0xf00,COH
800031a2:	10 4b       	or	r11,r8
800031a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031a8:	12 98       	mov	r8,r9
800031aa:	a5 78       	lsl	r8,0x5
800031ac:	12 08       	add	r8,r9
800031ae:	a1 78       	lsl	r8,0x1
800031b0:	12 08       	add	r8,r9
800031b2:	f0 c9 fc 19 	sub	r9,r8,-999
800031b6:	e0 68 4d d3 	mov	r8,19923
800031ba:	ea 18 10 62 	orh	r8,0x1062
800031be:	f2 08 06 48 	mulu.d	r8,r9,r8
800031c2:	f2 08 16 06 	lsr	r8,r9,0x6
800031c6:	bd 68       	lsl	r8,0x1c
800031c8:	f7 e8 10 08 	or	r8,r11,r8
800031cc:	e8 18 00 d9 	orl	r8,0xd9
800031d0:	95 28       	st.w	r10[0x8],r8
      ((((SDRAM_TRC  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRC_OFFSET ) & AVR32_SDRAMC_CR_TRC_MASK ) |
      ((((SDRAM_TRP  * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRP_OFFSET ) & AVR32_SDRAMC_CR_TRP_MASK ) |
      ((((SDRAM_TRCD * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRCD_OFFSET) & AVR32_SDRAMC_CR_TRCD_MASK) |
      ((((SDRAM_TRAS * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TRAS_OFFSET) & AVR32_SDRAMC_CR_TRAS_MASK) |
      ((((SDRAM_TXSR * hsb_mhz_up + 999) / 1000) << AVR32_SDRAMC_CR_TXSR_OFFSET) & AVR32_SDRAMC_CR_TXSR_MASK);
  AVR32_SDRAMC.cr;
800031d2:	fe 68 20 00 	mov	r8,-122880
800031d6:	70 28       	ld.w	r8,r8[0x8]

  // Issue a NOP command to the SDRAM in order to start the generation of SDRAMC signals.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NOP;
800031d8:	fe 69 20 00 	mov	r9,-122880
800031dc:	30 18       	mov	r8,1
800031de:	93 08       	st.w	r9[0x0],r8
  AVR32_SDRAMC.mr;
800031e0:	fe 68 20 00 	mov	r8,-122880
800031e4:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
800031e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031ea:	90 08       	ld.sh	r8,r8[0x0]

  // Wait during the SDRAM stable-clock initialization delay.
  sdramc_us_delay(SDRAM_STABLE_CLOCK_INIT_DELAY, hsb_mhz_up);
800031ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031f0:	f0 08 10 64 	mul	r8,r8,100
800031f4:	10 9c       	mov	r12,r8
800031f6:	f0 1f 00 43 	mcall	80003300 <sdramc_init+0x290>

  // Issue a PRECHARGE ALL command to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_BANKS_PRECHARGE;
800031fa:	fe 69 20 00 	mov	r9,-122880
800031fe:	30 28       	mov	r8,2
80003200:	93 08       	st.w	r9[0x0],r8
  AVR32_SDRAMC.mr;
80003202:	fe 68 20 00 	mov	r8,-122880
80003206:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80003208:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000320c:	90 08       	ld.sh	r8,r8[0x0]
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);
8000320e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003212:	12 98       	mov	r8,r9
80003214:	a5 68       	lsl	r8,0x4
80003216:	12 18       	sub	r8,r9
80003218:	f0 c9 fc 19 	sub	r9,r8,-999
8000321c:	e0 68 4d d3 	mov	r8,19923
80003220:	ea 18 10 62 	orh	r8,0x1062
80003224:	f2 08 06 48 	mulu.d	r8,r9,r8
80003228:	f2 08 16 06 	lsr	r8,r9,0x6
8000322c:	10 9c       	mov	r12,r8
8000322e:	f0 1f 00 35 	mcall	80003300 <sdramc_init+0x290>

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
80003232:	fe 69 20 00 	mov	r9,-122880
80003236:	30 48       	mov	r8,4
80003238:	93 08       	st.w	r9[0x0],r8
  AVR32_SDRAMC.mr;
8000323a:	fe 68 20 00 	mov	r8,-122880
8000323e:	70 08       	ld.w	r8,r8[0x0]
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80003240:	30 08       	mov	r8,0
80003242:	ef 48 ff fc 	st.w	r7[-4],r8
80003246:	c1 c8       	rjmp	8000327e <sdramc_init+0x20e>
  {
    sdram[0];
80003248:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000324c:	90 08       	ld.sh	r8,r8[0x0]
    sdramc_ns_delay(SDRAM_TRFC, hsb_mhz_up);
8000324e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003252:	12 98       	mov	r8,r9
80003254:	a5 78       	lsl	r8,0x5
80003256:	12 08       	add	r8,r9
80003258:	a1 78       	lsl	r8,0x1
8000325a:	f0 c9 fc 19 	sub	r9,r8,-999
8000325e:	e0 68 4d d3 	mov	r8,19923
80003262:	ea 18 10 62 	orh	r8,0x1062
80003266:	f2 08 06 48 	mulu.d	r8,r9,r8
8000326a:	f2 08 16 06 	lsr	r8,r9,0x6
8000326e:	10 9c       	mov	r12,r8
80003270:	f0 1f 00 24 	mcall	80003300 <sdramc_init+0x290>
  sdramc_ns_delay(SDRAM_TRP, hsb_mhz_up);

  // Issue initialization AUTO REFRESH commands to the SDRAM.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_AUTO_REFRESH;
  AVR32_SDRAMC.mr;
  for (i = 0; i < SDRAM_INIT_AUTO_REFRESH_COUNT; i++)
80003274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003278:	2f f8       	sub	r8,-1
8000327a:	ef 48 ff fc 	st.w	r7[-4],r8
8000327e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003282:	58 18       	cp.w	r8,1
80003284:	fe 98 ff e2 	brls	80003248 <sdramc_init+0x1d8>
  //  - bit 3: burst type: sequential (0b);
  //  - bits 4 to 6: CAS latency: AVR32_SDRAMC.CR.cas;
  //  - bits 7 to 8: operating mode: standard operation (00b);
  //  - bit 9: write burst mode: programmed burst length (0b);
  //  - all other bits: reserved: 0b.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_LOAD_MODE;
80003288:	fe 69 20 00 	mov	r9,-122880
8000328c:	30 38       	mov	r8,3
8000328e:	93 08       	st.w	r9[0x0],r8
  AVR32_SDRAMC.mr;
80003290:	fe 68 20 00 	mov	r8,-122880
80003294:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
80003296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000329a:	90 08       	ld.sh	r8,r8[0x0]
  sdramc_ns_delay(SDRAM_TMRD, hsb_mhz_up);
8000329c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032a0:	a1 78       	lsl	r8,0x1
800032a2:	f0 c9 fc 19 	sub	r9,r8,-999
800032a6:	e0 68 4d d3 	mov	r8,19923
800032aa:	ea 18 10 62 	orh	r8,0x1062
800032ae:	f2 08 06 48 	mulu.d	r8,r9,r8
800032b2:	f2 08 16 06 	lsr	r8,r9,0x6
800032b6:	10 9c       	mov	r12,r8
800032b8:	f0 1f 00 12 	mcall	80003300 <sdramc_init+0x290>

  // Switch the SDRAM Controller to normal mode.
  AVR32_SDRAMC.mr = AVR32_SDRAMC_MR_MODE_NORMAL;
800032bc:	fe 69 20 00 	mov	r9,-122880
800032c0:	30 08       	mov	r8,0
800032c2:	93 08       	st.w	r9[0x0],r8
  AVR32_SDRAMC.mr;
800032c4:	fe 68 20 00 	mov	r8,-122880
800032c8:	70 08       	ld.w	r8,r8[0x0]
  sdram[0];
800032ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032ce:	90 08       	ld.sh	r8,r8[0x0]

  // Write the refresh period into the SDRAMC Refresh Timer Register.
  // tR is rounded down because it is a maximal value.
  AVR32_SDRAMC.tr = (SDRAM_TR * hsb_mhz_dn) / 1000;
800032d0:	fe 6a 20 00 	mov	r10,-122880
800032d4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800032d8:	e0 68 1e 84 	mov	r8,7812
800032dc:	b1 39       	mul	r9,r8
800032de:	e0 68 4d d3 	mov	r8,19923
800032e2:	ea 18 10 62 	orh	r8,0x1062
800032e6:	f2 08 06 48 	mulu.d	r8,r9,r8
800032ea:	f2 08 16 06 	lsr	r8,r9,0x6
800032ee:	95 18       	st.w	r10[0x4],r8
  AVR32_SDRAMC.tr;
800032f0:	fe 68 20 00 	mov	r8,-122880
800032f4:	70 18       	ld.w	r8,r8[0x4]
}
800032f6:	2f 0d       	sub	sp,-64
800032f8:	e3 cd 80 80 	ldm	sp++,r7,pc
800032fc:	80 00       	ld.sh	r0,r0[0x0]
800032fe:	30 54       	mov	r4,5
80003300:	80 00       	ld.sh	r0,r0[0x0]
80003302:	2f fe       	sub	lr,-1

80003304 <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
80003304:	eb cd 40 80 	pushm	r7,lr
80003308:	1a 97       	mov	r7,sp
8000330a:	20 3d       	sub	sp,12
8000330c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
80003310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003314:	a7 68       	lsl	r8,0x6
80003316:	e0 38 00 00 	sub	r8,65536
8000331a:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
8000331e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003322:	58 e8       	cp.w	r8,14
80003324:	e0 88 00 06 	brls	80003330 <pdca_get_handler+0x2c>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80003328:	3f f8       	mov	r8,-1
8000332a:	ef 48 ff f4 	st.w	r7[-12],r8
8000332e:	c0 58       	rjmp	80003338 <pdca_get_handler+0x34>

  return pdca_channel;
80003330:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003334:	ef 48 ff f4 	st.w	r7[-12],r8
80003338:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000333c:	10 9c       	mov	r12,r8
8000333e:	2f dd       	sub	sp,-12
80003340:	e3 cd 80 80 	ldm	sp++,r7,pc

80003344 <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
80003344:	eb cd 40 80 	pushm	r7,lr
80003348:	1a 97       	mov	r7,sp
8000334a:	20 5d       	sub	sp,20
8000334c:	ef 4c ff f4 	st.w	r7[-12],r12
80003350:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80003354:	ee fc ff f4 	ld.w	r12,r7[-12]
80003358:	f0 1f 00 2b 	mcall	80003404 <pdca_init_channel+0xc0>
8000335c:	18 98       	mov	r8,r12
8000335e:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
80003362:	ee fc ff f4 	ld.w	r12,r7[-12]
80003366:	f0 1f 00 29 	mcall	80003408 <pdca_init_channel+0xc4>
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
8000336a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000336e:	f0 1f 00 28 	mcall	8000340c <pdca_init_channel+0xc8>

  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003372:	e1 b8 00 00 	mfsr	r8,0x0
80003376:	e6 18 00 01 	andh	r8,0x1,COH
8000337a:	5f 08       	sreq	r8
8000337c:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80003380:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003384:	30 08       	mov	r8,0
80003386:	f0 09 18 00 	cp.b	r9,r8
8000338a:	c0 20       	breq	8000338e <pdca_init_channel+0x4a>
8000338c:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
8000338e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003392:	70 08       	ld.w	r8,r8[0x0]
80003394:	10 99       	mov	r9,r8
80003396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000339a:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
8000339c:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033a0:	70 19       	ld.w	r9,r8[0x4]
800033a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033a6:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
800033a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033ac:	70 49       	ld.w	r9,r8[0x10]
800033ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033b2:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
800033b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033b8:	70 28       	ld.w	r8,r8[0x8]
800033ba:	10 99       	mov	r9,r8
800033bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c0:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
800033c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033c6:	70 39       	ld.w	r9,r8[0xc]
800033c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033cc:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
800033ce:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033d2:	70 59       	ld.w	r9,r8[0x14]
800033d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033d8:	91 69       	st.w	r8[0x18],r9
#if (defined AVR32_PDCA_120_H_INCLUDED ) || (defined AVR32_PDCA_121_H_INCLUDED ) || (defined AVR32_PDCA_122_H_INCLUDED )
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif // #ifdef AVR32_PDCA_120_H_INCLUDED
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800033da:	ee f9 ff f8 	ld.w	r9,r7[-8]
800033de:	e0 68 01 00 	mov	r8,256
800033e2:	93 58       	st.w	r9[0x14],r8
  pdca_channel->isr;
800033e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033e8:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800033ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800033ee:	30 08       	mov	r8,0
800033f0:	f0 09 18 00 	cp.b	r9,r8
800033f4:	c0 20       	breq	800033f8 <pdca_init_channel+0xb4>
800033f6:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
800033f8:	30 08       	mov	r8,0
}
800033fa:	10 9c       	mov	r12,r8
800033fc:	2f bd       	sub	sp,-20
800033fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003402:	00 00       	add	r0,r0
80003404:	80 00       	ld.sh	r0,r0[0x0]
80003406:	33 04       	mov	r4,48
80003408:	80 00       	ld.sh	r0,r0[0x0]
8000340a:	34 e4       	mov	r4,78
8000340c:	80 00       	ld.sh	r0,r0[0x0]
8000340e:	35 6c       	mov	r12,86

80003410 <pdca_disable>:
  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
}


void pdca_disable(unsigned int pdca_ch_number)
{
80003410:	eb cd 40 80 	pushm	r7,lr
80003414:	1a 97       	mov	r7,sp
80003416:	20 2d       	sub	sp,8
80003418:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8000341c:	ee fc ff f8 	ld.w	r12,r7[-8]
80003420:	f0 1f 00 06 	mcall	80003438 <pdca_disable+0x28>
80003424:	18 98       	mov	r8,r12
80003426:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8000342a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000342e:	30 28       	mov	r8,2
80003430:	93 58       	st.w	r9[0x14],r8

}
80003432:	2f ed       	sub	sp,-8
80003434:	e3 cd 80 80 	ldm	sp++,r7,pc
80003438:	80 00       	ld.sh	r0,r0[0x0]
8000343a:	33 04       	mov	r4,48

8000343c <pdca_get_load_size>:
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
}


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
8000343c:	eb cd 40 80 	pushm	r7,lr
80003440:	1a 97       	mov	r7,sp
80003442:	20 2d       	sub	sp,8
80003444:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80003448:	ee fc ff f8 	ld.w	r12,r7[-8]
8000344c:	f0 1f 00 06 	mcall	80003464 <pdca_get_load_size+0x28>
80003450:	18 98       	mov	r8,r12
80003452:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
80003456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000345a:	70 28       	ld.w	r8,r8[0x8]
}
8000345c:	10 9c       	mov	r12,r8
8000345e:	2f ed       	sub	sp,-8
80003460:	e3 cd 80 80 	ldm	sp++,r7,pc
80003464:	80 00       	ld.sh	r0,r0[0x0]
80003466:	33 04       	mov	r4,48

80003468 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80003468:	eb cd 40 80 	pushm	r7,lr
8000346c:	1a 97       	mov	r7,sp
8000346e:	20 6d       	sub	sp,24
80003470:	ef 4c ff f4 	st.w	r7[-12],r12
80003474:	ef 4b ff f0 	st.w	r7[-16],r11
80003478:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8000347c:	ee fc ff f4 	ld.w	r12,r7[-12]
80003480:	f0 1f 00 18 	mcall	800034e0 <pdca_load_channel+0x78>
80003484:	18 98       	mov	r8,r12
80003486:	ef 48 ff f8 	st.w	r7[-8],r8

  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000348a:	e1 b8 00 00 	mfsr	r8,0x0
8000348e:	e6 18 00 01 	andh	r8,0x1,COH
80003492:	5f 08       	sreq	r8
80003494:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80003498:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000349c:	30 08       	mov	r8,0
8000349e:	f0 09 18 00 	cp.b	r9,r8
800034a2:	c0 20       	breq	800034a6 <pdca_load_channel+0x3e>
800034a4:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
800034a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800034aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034ae:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
800034b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800034b8:	93 28       	st.w	r9[0x8],r8
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800034ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800034be:	e0 68 01 00 	mov	r8,256
800034c2:	93 58       	st.w	r9[0x14],r8
  pdca_channel->isr;
800034c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034c8:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800034ca:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800034ce:	30 08       	mov	r8,0
800034d0:	f0 09 18 00 	cp.b	r9,r8
800034d4:	c0 20       	breq	800034d8 <pdca_load_channel+0x70>
800034d6:	d5 03       	csrf	0x10
}
800034d8:	2f ad       	sub	sp,-24
800034da:	e3 cd 80 80 	ldm	sp++,r7,pc
800034de:	00 00       	add	r0,r0
800034e0:	80 00       	ld.sh	r0,r0[0x0]
800034e2:	33 04       	mov	r4,48

800034e4 <pdca_disable_interrupt_transfer_complete>:
  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
}


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
800034e4:	eb cd 40 80 	pushm	r7,lr
800034e8:	1a 97       	mov	r7,sp
800034ea:	20 4d       	sub	sp,16
800034ec:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800034f0:	ee fc ff f4 	ld.w	r12,r7[-12]
800034f4:	f0 1f 00 12 	mcall	8000353c <pdca_disable_interrupt_transfer_complete+0x58>
800034f8:	18 98       	mov	r8,r12
800034fa:	ef 48 ff f8 	st.w	r7[-8],r8

  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034fe:	e1 b8 00 00 	mfsr	r8,0x0
80003502:	e6 18 00 01 	andh	r8,0x1,COH
80003506:	5f 08       	sreq	r8
80003508:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
8000350c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003510:	30 08       	mov	r8,0
80003512:	f0 09 18 00 	cp.b	r9,r8
80003516:	c0 20       	breq	8000351a <pdca_disable_interrupt_transfer_complete+0x36>
80003518:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
8000351a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000351e:	30 28       	mov	r8,2
80003520:	93 98       	st.w	r9[0x24],r8
  pdca_channel->isr;
80003522:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003526:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003528:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000352c:	30 08       	mov	r8,0
8000352e:	f0 09 18 00 	cp.b	r9,r8
80003532:	c0 20       	breq	80003536 <pdca_disable_interrupt_transfer_complete+0x52>
80003534:	d5 03       	csrf	0x10
}
80003536:	2f cd       	sub	sp,-16
80003538:	e3 cd 80 80 	ldm	sp++,r7,pc
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	33 04       	mov	r4,48

80003540 <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80003540:	eb cd 40 80 	pushm	r7,lr
80003544:	1a 97       	mov	r7,sp
80003546:	20 2d       	sub	sp,8
80003548:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8000354c:	ee fc ff f8 	ld.w	r12,r7[-8]
80003550:	f0 1f 00 06 	mcall	80003568 <pdca_enable_interrupt_transfer_complete+0x28>
80003554:	18 98       	mov	r8,r12
80003556:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
8000355a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000355e:	30 28       	mov	r8,2
80003560:	93 88       	st.w	r9[0x20],r8
}
80003562:	2f ed       	sub	sp,-8
80003564:	e3 cd 80 80 	ldm	sp++,r7,pc
80003568:	80 00       	ld.sh	r0,r0[0x0]
8000356a:	33 04       	mov	r4,48

8000356c <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
8000356c:	eb cd 40 80 	pushm	r7,lr
80003570:	1a 97       	mov	r7,sp
80003572:	20 4d       	sub	sp,16
80003574:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80003578:	ee fc ff f4 	ld.w	r12,r7[-12]
8000357c:	f0 1f 00 12 	mcall	800035c4 <pdca_disable_interrupt_reload_counter_zero+0x58>
80003580:	18 98       	mov	r8,r12
80003582:	ef 48 ff f8 	st.w	r7[-8],r8

  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003586:	e1 b8 00 00 	mfsr	r8,0x0
8000358a:	e6 18 00 01 	andh	r8,0x1,COH
8000358e:	5f 08       	sreq	r8
80003590:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
80003594:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003598:	30 08       	mov	r8,0
8000359a:	f0 09 18 00 	cp.b	r9,r8
8000359e:	c0 20       	breq	800035a2 <pdca_disable_interrupt_reload_counter_zero+0x36>
800035a0:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
800035a2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035a6:	30 18       	mov	r8,1
800035a8:	93 98       	st.w	r9[0x24],r8
  pdca_channel->isr;
800035aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035ae:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) Enable_global_interrupt();
800035b0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035b4:	30 08       	mov	r8,0
800035b6:	f0 09 18 00 	cp.b	r9,r8
800035ba:	c0 20       	breq	800035be <pdca_disable_interrupt_reload_counter_zero+0x52>
800035bc:	d5 03       	csrf	0x10
}
800035be:	2f cd       	sub	sp,-16
800035c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800035c4:	80 00       	ld.sh	r0,r0[0x0]
800035c6:	33 04       	mov	r4,48

800035c8 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_internal_init(void)
{
800035c8:	eb cd 40 80 	pushm	r7,lr
800035cc:	1a 97       	mov	r7,sp
800035ce:	20 2d       	sub	sp,8
  U16 retry;

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = FALSE;
800035d0:	4e c9       	lddpc	r9,80003780 <sd_mmc_spi_internal_init+0x1b8>
800035d2:	30 08       	mov	r8,0
800035d4:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
800035d6:	4e c9       	lddpc	r9,80003784 <sd_mmc_spi_internal_init+0x1bc>
800035d8:	30 08       	mov	r8,0
800035da:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
800035dc:	30 08       	mov	r8,0
800035de:	ef 58 ff fe 	st.h	r7[-2],r8
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
800035e2:	30 0b       	mov	r11,0
800035e4:	30 0c       	mov	r12,0
800035e6:	f0 1f 00 69 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
800035ea:	18 98       	mov	r8,r12
800035ec:	4e 89       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
800035ee:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800035f0:	e0 6b 00 ff 	mov	r11,255
800035f4:	fe 7c 28 00 	mov	r12,-55296
800035f8:	f0 1f 00 66 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>
    // do retry counter
    retry++;
800035fc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003600:	2f f8       	sub	r8,-1
80003602:	ef 58 ff fe 	st.h	r7[-2],r8
    if(retry > 100)
80003606:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000360a:	36 48       	mov	r8,100
8000360c:	f0 09 19 00 	cp.h	r9,r8
80003610:	e0 88 00 06 	brls	8000361c <sd_mmc_spi_internal_init+0x54>
      return KO;
80003614:	30 08       	mov	r8,0
80003616:	ef 48 ff f8 	st.w	r7[-8],r8
8000361a:	ca c8       	rjmp	80003772 <sd_mmc_spi_internal_init+0x1aa>
  }
  while(r1 != 0x01);   // check memory enters idle_state
8000361c:	4d c8       	lddpc	r8,8000378c <sd_mmc_spi_internal_init+0x1c4>
8000361e:	11 89       	ld.ub	r9,r8[0x0]
80003620:	30 18       	mov	r8,1
80003622:	f0 09 18 00 	cp.b	r9,r8
80003626:	cd e1       	brne	800035e2 <sd_mmc_spi_internal_init+0x1a>

  // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
  // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
  r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
80003628:	30 0b       	mov	r11,0
8000362a:	33 7c       	mov	r12,55
8000362c:	f0 1f 00 57 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
80003630:	18 98       	mov	r8,r12
80003632:	4d 79       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
80003634:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003636:	e0 6b 00 ff 	mov	r11,255
8000363a:	fe 7c 28 00 	mov	r12,-55296
8000363e:	f0 1f 00 55 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>

  r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80003642:	30 0b       	mov	r11,0
80003644:	32 9c       	mov	r12,41
80003646:	f0 1f 00 51 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
8000364a:	18 98       	mov	r8,r12
8000364c:	4d 09       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
8000364e:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80003650:	e0 6b 00 ff 	mov	r11,255
80003654:	fe 7c 28 00 	mov	r12,-55296
80003658:	f0 1f 00 4e 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>

  if ((r1&0xFE) == 0)   // ignore "in_idle_state" flag bit
8000365c:	4c c8       	lddpc	r8,8000378c <sd_mmc_spi_internal_init+0x1c4>
8000365e:	11 88       	ld.ub	r8,r8[0x0]
80003660:	e2 18 00 fe 	andl	r8,0xfe,COH
80003664:	c0 51       	brne	8000366e <sd_mmc_spi_internal_init+0xa6>
  {
    card_type = SD_CARD;    // card has accepted the command, this is a SD card
80003666:	4c 89       	lddpc	r9,80003784 <sd_mmc_spi_internal_init+0x1bc>
80003668:	30 18       	mov	r8,1
8000366a:	b2 88       	st.b	r9[0x0],r8
8000366c:	c2 a8       	rjmp	800036c0 <sd_mmc_spi_internal_init+0xf8>
  }
  else
  {
    card_type = MMC_CARD;   // card has not responded, this is a MMC card
8000366e:	4c 68       	lddpc	r8,80003784 <sd_mmc_spi_internal_init+0x1bc>
80003670:	30 09       	mov	r9,0
80003672:	b0 89       	st.b	r8[0x0],r9
    // reset card again
    retry = 0;
80003674:	30 08       	mov	r8,0
80003676:	ef 58 ff fe 	st.h	r7[-2],r8
    do
    {
      // reset card again
      r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
8000367a:	30 0b       	mov	r11,0
8000367c:	30 0c       	mov	r12,0
8000367e:	f0 1f 00 43 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
80003682:	18 98       	mov	r8,r12
80003684:	4c 29       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
80003686:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003688:	e0 6b 00 ff 	mov	r11,255
8000368c:	fe 7c 28 00 	mov	r12,-55296
80003690:	f0 1f 00 40 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>
      // do retry counter
      retry++;
80003694:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003698:	2f f8       	sub	r8,-1
8000369a:	ef 58 ff fe 	st.h	r7[-2],r8
      if(retry > 100)
8000369e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800036a2:	36 48       	mov	r8,100
800036a4:	f0 09 19 00 	cp.h	r9,r8
800036a8:	e0 88 00 06 	brls	800036b4 <sd_mmc_spi_internal_init+0xec>
        return KO;
800036ac:	30 08       	mov	r8,0
800036ae:	ef 48 ff f8 	st.w	r7[-8],r8
800036b2:	c6 08       	rjmp	80003772 <sd_mmc_spi_internal_init+0x1aa>
    }
    while(r1 != 0x01);   // check memory enters idle_state
800036b4:	4b 68       	lddpc	r8,8000378c <sd_mmc_spi_internal_init+0x1c4>
800036b6:	11 89       	ld.ub	r9,r8[0x0]
800036b8:	30 18       	mov	r8,1
800036ba:	f0 09 18 00 	cp.b	r9,r8
800036be:	cd e1       	brne	8000367a <sd_mmc_spi_internal_init+0xb2>
  }

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
800036c0:	30 08       	mov	r8,0
800036c2:	ef 58 ff fe 	st.h	r7[-2],r8
  do
  {
     // initializing card for operation
     r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800036c6:	30 0b       	mov	r11,0
800036c8:	30 1c       	mov	r12,1
800036ca:	f0 1f 00 30 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
800036ce:	18 98       	mov	r8,r12
800036d0:	4a f9       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
800036d2:	b2 88       	st.b	r9[0x0],r8
     spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800036d4:	e0 6b 00 ff 	mov	r11,255
800036d8:	fe 7c 28 00 	mov	r12,-55296
800036dc:	f0 1f 00 2d 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>
     // do retry counter
     retry++;
800036e0:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800036e4:	2f f8       	sub	r8,-1
800036e6:	ef 58 ff fe 	st.h	r7[-2],r8
     if(retry == 50000)    // measured approx. 500 on several cards
800036ea:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800036ee:	fe 78 c3 50 	mov	r8,-15536
800036f2:	f0 09 19 00 	cp.h	r9,r8
800036f6:	c0 51       	brne	80003700 <sd_mmc_spi_internal_init+0x138>
        return KO;
800036f8:	30 08       	mov	r8,0
800036fa:	ef 48 ff f8 	st.w	r7[-8],r8
800036fe:	c3 a8       	rjmp	80003772 <sd_mmc_spi_internal_init+0x1aa>
  }
  while (r1);
80003700:	4a 38       	lddpc	r8,8000378c <sd_mmc_spi_internal_init+0x1c4>
80003702:	11 88       	ld.ub	r8,r8[0x0]
80003704:	58 08       	cp.w	r8,0
80003706:	ce 01       	brne	800036c6 <sd_mmc_spi_internal_init+0xfe>

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
80003708:	30 0b       	mov	r11,0
8000370a:	33 bc       	mov	r12,59
8000370c:	f0 1f 00 1f 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
80003710:	18 98       	mov	r8,r12
80003712:	49 f9       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
80003714:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003716:	e0 6b 00 ff 	mov	r11,255
8000371a:	fe 7c 28 00 	mov	r12,-55296
8000371e:	f0 1f 00 1d 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80003722:	e0 6b 02 00 	mov	r11,512
80003726:	31 0c       	mov	r12,16
80003728:	f0 1f 00 18 	mcall	80003788 <sd_mmc_spi_internal_init+0x1c0>
8000372c:	18 98       	mov	r8,r12
8000372e:	49 89       	lddpc	r9,8000378c <sd_mmc_spi_internal_init+0x1c4>
80003730:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80003732:	e0 6b 00 ff 	mov	r11,255
80003736:	fe 7c 28 00 	mov	r12,-55296
8000373a:	f0 1f 00 16 	mcall	80003790 <sd_mmc_spi_internal_init+0x1c8>
  if (r1 != 0x00)
8000373e:	49 48       	lddpc	r8,8000378c <sd_mmc_spi_internal_init+0x1c4>
80003740:	11 88       	ld.ub	r8,r8[0x0]
80003742:	58 08       	cp.w	r8,0
80003744:	c0 50       	breq	8000374e <sd_mmc_spi_internal_init+0x186>
    return KO;    // card unsupported if block length of 512b is not accepted
80003746:	30 08       	mov	r8,0
80003748:	ef 48 ff f8 	st.w	r7[-8],r8
8000374c:	c1 38       	rjmp	80003772 <sd_mmc_spi_internal_init+0x1aa>

  // GET CARD SPECIFIC DATA
  if (KO ==  sd_mmc_spi_get_csd(csd))
8000374e:	49 2c       	lddpc	r12,80003794 <sd_mmc_spi_internal_init+0x1cc>
80003750:	f0 1f 00 12 	mcall	80003798 <sd_mmc_spi_internal_init+0x1d0>
80003754:	18 98       	mov	r8,r12
80003756:	58 08       	cp.w	r8,0
80003758:	c0 51       	brne	80003762 <sd_mmc_spi_internal_init+0x19a>
    return KO;
8000375a:	30 08       	mov	r8,0
8000375c:	ef 48 ff f8 	st.w	r7[-8],r8
80003760:	c0 98       	rjmp	80003772 <sd_mmc_spi_internal_init+0x1aa>

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
80003762:	f0 1f 00 0f 	mcall	8000379c <sd_mmc_spi_internal_init+0x1d4>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == ENABLED)
  if (KO ==  sd_mmc_spi_get_cid(cid))
    return KO;
#endif

  sd_mmc_spi_init_done = TRUE;
80003766:	48 79       	lddpc	r9,80003780 <sd_mmc_spi_internal_init+0x1b8>
80003768:	30 18       	mov	r8,1
8000376a:	b2 88       	st.b	r9[0x0],r8

  return(OK);
8000376c:	30 18       	mov	r8,1
8000376e:	ef 48 ff f8 	st.w	r7[-8],r8
80003772:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003776:	10 9c       	mov	r12,r8
80003778:	2f ed       	sub	sp,-8
8000377a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000377e:	00 00       	add	r0,r0
80003780:	00 00       	add	r0,r0
80003782:	06 24       	rsub	r4,r3
80003784:	00 00       	add	r0,r0
80003786:	08 7a       	tst	r10,r4
80003788:	80 00       	ld.sh	r0,r0[0x0]
8000378a:	37 d4       	mov	r4,125
8000378c:	00 00       	add	r0,r0
8000378e:	08 8c       	andn	r12,r4
80003790:	80 00       	ld.sh	r0,r0[0x0]
80003792:	25 9a       	sub	r10,89
80003794:	00 00       	add	r0,r0
80003796:	08 7c       	tst	r12,r4
80003798:	80 00       	ld.sh	r0,r0[0x0]
8000379a:	39 68       	mov	r8,-106
8000379c:	80 00       	ld.sh	r0,r0[0x0]
8000379e:	3a bc       	mov	r12,-85

800037a0 <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> OK (always)
Bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
800037a0:	eb cd 40 80 	pushm	r7,lr
800037a4:	1a 97       	mov	r7,sp
800037a6:	20 1d       	sub	sp,4
800037a8:	ee c8 ff f8 	sub	r8,r7,-8
800037ac:	ef 4c ff fc 	st.w	r7[-4],r12
  // Setup SPI registers according to spiOptions.
  spi_setupChipReg(SD_MMC_SPI, &spiOptions, pba_hz);
800037b0:	ee fa ff fc 	ld.w	r10,r7[-4]
800037b4:	10 9b       	mov	r11,r8
800037b6:	fe 7c 28 00 	mov	r12,-55296
800037ba:	f0 1f 00 05 	mcall	800037cc <sd_mmc_spi_init+0x2c>

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
800037be:	f0 1f 00 05 	mcall	800037d0 <sd_mmc_spi_init+0x30>
800037c2:	18 98       	mov	r8,r12
}
800037c4:	10 9c       	mov	r12,r8
800037c6:	2f fd       	sub	sp,-4
800037c8:	e3 cd 80 80 	ldm	sp++,r7,pc
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	23 d0       	sub	r0,61
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	35 c8       	mov	r8,92

800037d4 <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return U8
//!         R1 response (R1 == 0xFF if time out error)
U8 sd_mmc_spi_send_command(U8 command, U32 arg)
{
800037d4:	eb cd 40 80 	pushm	r7,lr
800037d8:	1a 97       	mov	r7,sp
800037da:	20 2d       	sub	sp,8
800037dc:	18 98       	mov	r8,r12
800037de:	ef 4b ff f8 	st.w	r7[-8],r11
800037e2:	ef 68 ff fc 	st.b	r7[-4],r8
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800037e6:	30 1b       	mov	r11,1
800037e8:	fe 7c 28 00 	mov	r12,-55296
800037ec:	f0 1f 00 0c 	mcall	8000381c <sd_mmc_spi_send_command+0x48>
  r1 = sd_mmc_spi_command(command, arg);
800037f0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800037f4:	ee fb ff f8 	ld.w	r11,r7[-8]
800037f8:	10 9c       	mov	r12,r8
800037fa:	f0 1f 00 0a 	mcall	80003820 <sd_mmc_spi_send_command+0x4c>
800037fe:	18 98       	mov	r8,r12
80003800:	48 99       	lddpc	r9,80003824 <sd_mmc_spi_send_command+0x50>
80003802:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003804:	30 1b       	mov	r11,1
80003806:	fe 7c 28 00 	mov	r12,-55296
8000380a:	f0 1f 00 08 	mcall	80003828 <sd_mmc_spi_send_command+0x54>
  return r1;
8000380e:	48 68       	lddpc	r8,80003824 <sd_mmc_spi_send_command+0x50>
80003810:	11 88       	ld.ub	r8,r8[0x0]
}
80003812:	10 9c       	mov	r12,r8
80003814:	2f ed       	sub	sp,-8
80003816:	e3 cd 80 80 	ldm	sp++,r7,pc
8000381a:	00 00       	add	r0,r0
8000381c:	80 00       	ld.sh	r0,r0[0x0]
8000381e:	22 ac       	sub	r12,42
80003820:	80 00       	ld.sh	r0,r0[0x0]
80003822:	38 2c       	mov	r12,-126
80003824:	00 00       	add	r0,r0
80003826:	08 8c       	andn	r12,r4
80003828:	80 00       	ld.sh	r0,r0[0x0]
8000382a:	23 58       	sub	r8,53

8000382c <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return U8
//!         R1 response (R1 == 0xFF time out error)
U8 sd_mmc_spi_command(U8 command, U32 arg)
{
8000382c:	eb cd 40 80 	pushm	r7,lr
80003830:	1a 97       	mov	r7,sp
80003832:	20 3d       	sub	sp,12
80003834:	18 98       	mov	r8,r12
80003836:	ef 4b ff f4 	st.w	r7[-12],r11
8000383a:	ef 68 ff f8 	st.b	r7[-8],r8
U8 retry;

  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
8000383e:	e0 6b 00 ff 	mov	r11,255
80003842:	fe 7c 28 00 	mov	r12,-55296
80003846:	f0 1f 00 30 	mcall	80003904 <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,command | 0x40);  // send command
8000384a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000384e:	a7 a8       	sbr	r8,0x6
80003850:	5c 58       	castu.b	r8
80003852:	10 9b       	mov	r11,r8
80003854:	fe 7c 28 00 	mov	r12,-55296
80003858:	f0 1f 00 2b 	mcall	80003904 <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg>>24);         // send parameter
8000385c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003860:	b9 88       	lsr	r8,0x18
80003862:	5c 88       	casts.h	r8
80003864:	5c 78       	castu.h	r8
80003866:	10 9b       	mov	r11,r8
80003868:	fe 7c 28 00 	mov	r12,-55296
8000386c:	f0 1f 00 26 	mcall	80003904 <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg>>16);
80003870:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003874:	b1 88       	lsr	r8,0x10
80003876:	5c 88       	casts.h	r8
80003878:	5c 78       	castu.h	r8
8000387a:	10 9b       	mov	r11,r8
8000387c:	fe 7c 28 00 	mov	r12,-55296
80003880:	f0 1f 00 21 	mcall	80003904 <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg>>8 );
80003884:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003888:	a9 88       	lsr	r8,0x8
8000388a:	5c 88       	casts.h	r8
8000388c:	5c 78       	castu.h	r8
8000388e:	10 9b       	mov	r11,r8
80003890:	fe 7c 28 00 	mov	r12,-55296
80003894:	f0 1f 00 1c 	mcall	80003904 <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,arg    );
80003898:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000389c:	5c 88       	casts.h	r8
8000389e:	5c 78       	castu.h	r8
800038a0:	10 9b       	mov	r11,r8
800038a2:	fe 7c 28 00 	mov	r12,-55296
800038a6:	f0 1f 00 18 	mcall	80003904 <sd_mmc_spi_command+0xd8>
  spi_write(SD_MMC_SPI,0x95);            // correct CRC for first command in SPI (CMD0)
800038aa:	e0 6b 00 95 	mov	r11,149
800038ae:	fe 7c 28 00 	mov	r12,-55296
800038b2:	f0 1f 00 15 	mcall	80003904 <sd_mmc_spi_command+0xd8>
                                  // after, the CRC is ignored
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
800038b6:	30 08       	mov	r8,0
800038b8:	ef 68 ff ff 	st.b	r7[-1],r8
  r1    = 0xFF;
800038bc:	49 39       	lddpc	r9,80003908 <sd_mmc_spi_command+0xdc>
800038be:	3f f8       	mov	r8,-1
800038c0:	b2 88       	st.b	r9[0x0],r8
800038c2:	c0 d8       	rjmp	800038dc <sd_mmc_spi_command+0xb0>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
  {
    retry++;
800038c4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038c8:	2f f8       	sub	r8,-1
800038ca:	ef 68 ff ff 	st.b	r7[-1],r8
    if(retry > 10) break;
800038ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038d2:	30 a8       	mov	r8,10
800038d4:	f0 09 18 00 	cp.b	r9,r8
800038d8:	e0 8b 00 0f 	brhi	800038f6 <sd_mmc_spi_command+0xca>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
800038dc:	e0 6c 00 ff 	mov	r12,255
800038e0:	f0 1f 00 0b 	mcall	8000390c <sd_mmc_spi_command+0xe0>
800038e4:	18 98       	mov	r8,r12
800038e6:	48 99       	lddpc	r9,80003908 <sd_mmc_spi_command+0xdc>
800038e8:	b2 88       	st.b	r9[0x0],r8
800038ea:	48 88       	lddpc	r8,80003908 <sd_mmc_spi_command+0xdc>
800038ec:	11 89       	ld.ub	r9,r8[0x0]
800038ee:	3f f8       	mov	r8,-1
800038f0:	f0 09 18 00 	cp.b	r9,r8
800038f4:	ce 80       	breq	800038c4 <sd_mmc_spi_command+0x98>
  {
    retry++;
    if(retry > 10) break;
  }
  return r1;
800038f6:	48 58       	lddpc	r8,80003908 <sd_mmc_spi_command+0xdc>
800038f8:	11 88       	ld.ub	r8,r8[0x0]
}
800038fa:	10 9c       	mov	r12,r8
800038fc:	2f dd       	sub	sp,-12
800038fe:	e3 cd 80 80 	ldm	sp++,r7,pc
80003902:	00 00       	add	r0,r0
80003904:	80 00       	ld.sh	r0,r0[0x0]
80003906:	25 9a       	sub	r10,89
80003908:	00 00       	add	r0,r0
8000390a:	08 8c       	andn	r12,r4
8000390c:	80 00       	ld.sh	r0,r0[0x0]
8000390e:	39 10       	mov	r0,-111

80003910 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return U8
//!   Byte read from the slave
U8 sd_mmc_spi_send_and_read(U8 data_to_send)
{
80003910:	eb cd 40 80 	pushm	r7,lr
80003914:	1a 97       	mov	r7,sp
80003916:	20 3d       	sub	sp,12
80003918:	18 98       	mov	r8,r12
8000391a:	ef 68 ff f8 	st.b	r7[-8],r8
   unsigned short data_read;
   spi_write(SD_MMC_SPI,data_to_send);
8000391e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003922:	10 9b       	mov	r11,r8
80003924:	fe 7c 28 00 	mov	r12,-55296
80003928:	f0 1f 00 0e 	mcall	80003960 <sd_mmc_spi_send_and_read+0x50>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI,&data_read) )
8000392c:	ee c8 00 02 	sub	r8,r7,2
80003930:	10 9b       	mov	r11,r8
80003932:	fe 7c 28 00 	mov	r12,-55296
80003936:	f0 1f 00 0c 	mcall	80003964 <sd_mmc_spi_send_and_read+0x54>
8000393a:	18 98       	mov	r8,r12
8000393c:	58 18       	cp.w	r8,1
8000393e:	c0 61       	brne	8000394a <sd_mmc_spi_send_and_read+0x3a>
     return 0xFF;
80003940:	e0 68 00 ff 	mov	r8,255
80003944:	ef 48 ff f4 	st.w	r7[-12],r8
80003948:	c0 68       	rjmp	80003954 <sd_mmc_spi_send_and_read+0x44>
   return (data_read);
8000394a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000394e:	5c 58       	castu.b	r8
80003950:	ef 48 ff f4 	st.w	r7[-12],r8
80003954:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80003958:	10 9c       	mov	r12,r8
8000395a:	2f dd       	sub	sp,-12
8000395c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003960:	80 00       	ld.sh	r0,r0[0x0]
80003962:	25 9a       	sub	r10,89
80003964:	80 00       	ld.sh	r0,r0[0x0]
80003966:	26 00       	sub	r0,96

80003968 <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         OK / KO
Bool sd_mmc_spi_get_csd(U8 *buffer)
{
80003968:	eb cd 40 80 	pushm	r7,lr
8000396c:	1a 97       	mov	r7,sp
8000396e:	20 3d       	sub	sp,12
80003970:	ef 4c ff f8 	st.w	r7[-8],r12
U8 retry;
unsigned short data_read;
  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80003974:	f0 1f 00 49 	mcall	80003a98 <sd_mmc_spi_get_csd+0x130>
80003978:	18 98       	mov	r8,r12
8000397a:	58 08       	cp.w	r8,0
8000397c:	c0 51       	brne	80003986 <sd_mmc_spi_get_csd+0x1e>
    return KO;
8000397e:	30 08       	mov	r8,0
80003980:	ef 48 ff f4 	st.w	r7[-12],r8
80003984:	c8 48       	rjmp	80003a8c <sd_mmc_spi_get_csd+0x124>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80003986:	30 1b       	mov	r11,1
80003988:	fe 7c 28 00 	mov	r12,-55296
8000398c:	f0 1f 00 44 	mcall	80003a9c <sd_mmc_spi_get_csd+0x134>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
80003990:	30 0b       	mov	r11,0
80003992:	30 9c       	mov	r12,9
80003994:	f0 1f 00 43 	mcall	80003aa0 <sd_mmc_spi_get_csd+0x138>
80003998:	18 98       	mov	r8,r12
8000399a:	4c 39       	lddpc	r9,80003aa4 <sd_mmc_spi_get_csd+0x13c>
8000399c:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0x00)
8000399e:	4c 28       	lddpc	r8,80003aa4 <sd_mmc_spi_get_csd+0x13c>
800039a0:	11 88       	ld.ub	r8,r8[0x0]
800039a2:	58 08       	cp.w	r8,0
800039a4:	c0 d0       	breq	800039be <sd_mmc_spi_get_csd+0x56>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800039a6:	30 1b       	mov	r11,1
800039a8:	fe 7c 28 00 	mov	r12,-55296
800039ac:	f0 1f 00 3f 	mcall	80003aa8 <sd_mmc_spi_get_csd+0x140>
    sd_mmc_spi_init_done = FALSE;
800039b0:	4b f9       	lddpc	r9,80003aac <sd_mmc_spi_get_csd+0x144>
800039b2:	30 08       	mov	r8,0
800039b4:	b2 88       	st.b	r9[0x0],r8
    return KO;
800039b6:	30 08       	mov	r8,0
800039b8:	ef 48 ff f4 	st.w	r7[-12],r8
800039bc:	c6 88       	rjmp	80003a8c <sd_mmc_spi_get_csd+0x124>
  }
  // wait for block start
  retry = 0;
800039be:	30 08       	mov	r8,0
800039c0:	ef 68 ff ff 	st.b	r7[-1],r8
800039c4:	c1 68       	rjmp	800039f0 <sd_mmc_spi_get_csd+0x88>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
  {
    if (retry > 8)
800039c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800039ca:	30 88       	mov	r8,8
800039cc:	f0 09 18 00 	cp.b	r9,r8
800039d0:	e0 88 00 0b 	brls	800039e6 <sd_mmc_spi_get_csd+0x7e>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800039d4:	30 1b       	mov	r11,1
800039d6:	fe 7c 28 00 	mov	r12,-55296
800039da:	f0 1f 00 34 	mcall	80003aa8 <sd_mmc_spi_get_csd+0x140>
      return KO;
800039de:	30 08       	mov	r8,0
800039e0:	ef 48 ff f4 	st.w	r7[-12],r8
800039e4:	c5 48       	rjmp	80003a8c <sd_mmc_spi_get_csd+0x124>
    }
    retry++;
800039e6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800039ea:	2f f8       	sub	r8,-1
800039ec:	ef 68 ff ff 	st.b	r7[-1],r8
    sd_mmc_spi_init_done = FALSE;
    return KO;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
800039f0:	e0 6c 00 ff 	mov	r12,255
800039f4:	f0 1f 00 2f 	mcall	80003ab0 <sd_mmc_spi_get_csd+0x148>
800039f8:	18 98       	mov	r8,r12
800039fa:	4a b9       	lddpc	r9,80003aa4 <sd_mmc_spi_get_csd+0x13c>
800039fc:	b2 88       	st.b	r9[0x0],r8
800039fe:	4a a8       	lddpc	r8,80003aa4 <sd_mmc_spi_get_csd+0x13c>
80003a00:	11 89       	ld.ub	r9,r8[0x0]
80003a02:	3f e8       	mov	r8,-2
80003a04:	f0 09 18 00 	cp.b	r9,r8
80003a08:	cd f1       	brne	800039c6 <sd_mmc_spi_get_csd+0x5e>
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
      return KO;
    }
    retry++;
  }
  for (retry = 0; retry <16; retry++)
80003a0a:	30 08       	mov	r8,0
80003a0c:	ef 68 ff ff 	st.b	r7[-1],r8
80003a10:	c1 d8       	rjmp	80003a4a <sd_mmc_spi_get_csd+0xe2>
  {
   spi_write(SD_MMC_SPI,0xFF);
80003a12:	e0 6b 00 ff 	mov	r11,255
80003a16:	fe 7c 28 00 	mov	r12,-55296
80003a1a:	f0 1f 00 27 	mcall	80003ab4 <sd_mmc_spi_get_csd+0x14c>
   spi_read(SD_MMC_SPI,&data_read);
80003a1e:	ee c8 00 04 	sub	r8,r7,4
80003a22:	10 9b       	mov	r11,r8
80003a24:	fe 7c 28 00 	mov	r12,-55296
80003a28:	f0 1f 00 24 	mcall	80003ab8 <sd_mmc_spi_get_csd+0x150>
    buffer[retry] = data_read;
80003a2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a34:	f0 09 00 09 	add	r9,r8,r9
80003a38:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80003a3c:	5c 58       	castu.b	r8
80003a3e:	b2 88       	st.b	r9[0x0],r8
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
      return KO;
    }
    retry++;
  }
  for (retry = 0; retry <16; retry++)
80003a40:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003a44:	2f f8       	sub	r8,-1
80003a46:	ef 68 ff ff 	st.b	r7[-1],r8
80003a4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003a4e:	30 f8       	mov	r8,15
80003a50:	f0 09 18 00 	cp.b	r9,r8
80003a54:	fe 98 ff df 	brls	80003a12 <sd_mmc_spi_get_csd+0xaa>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80003a58:	e0 6b 00 ff 	mov	r11,255
80003a5c:	fe 7c 28 00 	mov	r12,-55296
80003a60:	f0 1f 00 15 	mcall	80003ab4 <sd_mmc_spi_get_csd+0x14c>
   spi_write(SD_MMC_SPI,0xFF);
80003a64:	e0 6b 00 ff 	mov	r11,255
80003a68:	fe 7c 28 00 	mov	r12,-55296
80003a6c:	f0 1f 00 12 	mcall	80003ab4 <sd_mmc_spi_get_csd+0x14c>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80003a70:	e0 6b 00 ff 	mov	r11,255
80003a74:	fe 7c 28 00 	mov	r12,-55296
80003a78:	f0 1f 00 0f 	mcall	80003ab4 <sd_mmc_spi_get_csd+0x14c>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003a7c:	30 1b       	mov	r11,1
80003a7e:	fe 7c 28 00 	mov	r12,-55296
80003a82:	f0 1f 00 0a 	mcall	80003aa8 <sd_mmc_spi_get_csd+0x140>
  return OK;
80003a86:	30 18       	mov	r8,1
80003a88:	ef 48 ff f4 	st.w	r7[-12],r8
80003a8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
80003a90:	10 9c       	mov	r12,r8
80003a92:	2f dd       	sub	sp,-12
80003a94:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a98:	80 00       	ld.sh	r0,r0[0x0]
80003a9a:	3c 0c       	mov	r12,-64
80003a9c:	80 00       	ld.sh	r0,r0[0x0]
80003a9e:	22 ac       	sub	r12,42
80003aa0:	80 00       	ld.sh	r0,r0[0x0]
80003aa2:	38 2c       	mov	r12,-126
80003aa4:	00 00       	add	r0,r0
80003aa6:	08 8c       	andn	r12,r4
80003aa8:	80 00       	ld.sh	r0,r0[0x0]
80003aaa:	23 58       	sub	r8,53
80003aac:	00 00       	add	r0,r0
80003aae:	06 24       	rsub	r4,r3
80003ab0:	80 00       	ld.sh	r0,r0[0x0]
80003ab2:	39 10       	mov	r0,-111
80003ab4:	80 00       	ld.sh	r0,r0[0x0]
80003ab6:	25 9a       	sub	r10,89
80003ab8:	80 00       	ld.sh	r0,r0[0x0]
80003aba:	26 00       	sub	r0,96

80003abc <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         OK
void sd_mmc_spi_get_capacity(void)
{
80003abc:	eb cd 40 80 	pushm	r7,lr
80003ac0:	1a 97       	mov	r7,sp
80003ac2:	20 2d       	sub	sp,8
  U8  read_bl_len;
  U8  erase_grp_size;
  U8  erase_grp_mult;

  // extract variables from CSD array
  c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
80003ac4:	4c d8       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003ac6:	11 e8       	ld.ub	r8,r8[0x6]
80003ac8:	5c 88       	casts.h	r8
80003aca:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80003ace:	ab 68       	lsl	r8,0xa
80003ad0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003ad4:	4c 98       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003ad6:	11 f8       	ld.ub	r8,r8[0x7]
80003ad8:	a3 68       	lsl	r8,0x2
80003ada:	5c 88       	casts.h	r8
80003adc:	f2 08 00 08 	add	r8,r9,r8
80003ae0:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80003ae4:	4c 58       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003ae6:	f1 38 00 08 	ld.ub	r8,r8[8]
80003aea:	a7 88       	lsr	r8,0x6
80003aec:	5c 58       	castu.b	r8
80003aee:	f2 08 00 08 	add	r8,r9,r8
80003af2:	ef 58 ff fa 	st.h	r7[-6],r8
  c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
80003af6:	4c 18       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003af8:	f1 38 00 09 	ld.ub	r8,r8[9]
80003afc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80003b00:	a1 78       	lsl	r8,0x1
80003b02:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003b06:	4b d8       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b08:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003b0c:	a7 98       	lsr	r8,0x7
80003b0e:	5c 58       	castu.b	r8
80003b10:	f2 08 00 08 	add	r8,r9,r8
80003b14:	ef 68 ff fc 	st.b	r7[-4],r8
  read_bl_len = csd[5] & 0x0F;
80003b18:	4b 88       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b1a:	11 d8       	ld.ub	r8,r8[0x5]
80003b1c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003b20:	ef 68 ff fd 	st.b	r7[-3],r8
  if (card_type == MMC_CARD)
80003b24:	4b 68       	lddpc	r8,80003bfc <sd_mmc_spi_get_capacity+0x140>
80003b26:	11 88       	ld.ub	r8,r8[0x0]
80003b28:	58 08       	cp.w	r8,0
80003b2a:	c1 c1       	brne	80003b62 <sd_mmc_spi_get_capacity+0xa6>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80003b2c:	4b 38       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b2e:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003b32:	e2 18 00 7c 	andl	r8,0x7c,COH
80003b36:	a3 48       	asr	r8,0x2
80003b38:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
80003b3c:	4a f8       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b3e:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003b42:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80003b46:	a3 78       	lsl	r8,0x3
80003b48:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003b4c:	4a b8       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b4e:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003b52:	a5 98       	lsr	r8,0x5
80003b54:	5c 58       	castu.b	r8
80003b56:	f3 e8 10 08 	or	r8,r9,r8
80003b5a:	5c 58       	castu.b	r8
80003b5c:	ef 68 ff ff 	st.b	r7[-1],r8
80003b60:	c1 58       	rjmp	80003b8a <sd_mmc_spi_get_capacity+0xce>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
80003b62:	4a 68       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b64:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003b68:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003b6c:	a1 78       	lsl	r8,0x1
80003b6e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003b72:	4a 28       	lddpc	r8,80003bf8 <sd_mmc_spi_get_capacity+0x13c>
80003b74:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003b78:	a7 98       	lsr	r8,0x7
80003b7a:	5c 58       	castu.b	r8
80003b7c:	f2 08 00 08 	add	r8,r9,r8
80003b80:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = 0;
80003b84:	30 08       	mov	r8,0
80003b86:	ef 68 ff ff 	st.b	r7[-1],r8
  }

  // compute last block addr
  sd_mmc_spi_last_block_address = ((U32)(c_size + 1) * (U32)((1 << (c_size_mult + 2)))) - 1;
80003b8a:	ef 18 ff fa 	ld.uh	r8,r7[-6]
80003b8e:	2f f8       	sub	r8,-1
80003b90:	10 99       	mov	r9,r8
80003b92:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80003b96:	2f e8       	sub	r8,-2
80003b98:	f2 08 09 48 	lsl	r8,r9,r8
80003b9c:	f0 c9 00 01 	sub	r9,r8,1
80003ba0:	49 88       	lddpc	r8,80003c00 <sd_mmc_spi_get_capacity+0x144>
80003ba2:	91 09       	st.w	r8[0x0],r9
  if (read_bl_len > 9)  // 9 means 2^9 = 512b
80003ba4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80003ba8:	30 98       	mov	r8,9
80003baa:	f0 09 18 00 	cp.b	r9,r8
80003bae:	e0 88 00 0b 	brls	80003bc4 <sd_mmc_spi_get_capacity+0x108>
    sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
80003bb2:	49 48       	lddpc	r8,80003c00 <sd_mmc_spi_get_capacity+0x144>
80003bb4:	70 09       	ld.w	r9,r8[0x0]
80003bb6:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003bba:	20 98       	sub	r8,9
80003bbc:	f2 08 09 49 	lsl	r9,r9,r8
80003bc0:	49 08       	lddpc	r8,80003c00 <sd_mmc_spi_get_capacity+0x144>
80003bc2:	91 09       	st.w	r8[0x0],r9

  // compute card capacity in bytes
  capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
80003bc4:	48 f8       	lddpc	r8,80003c00 <sd_mmc_spi_get_capacity+0x144>
80003bc6:	70 08       	ld.w	r8,r8[0x0]
80003bc8:	f0 c9 ff ff 	sub	r9,r8,-1
80003bcc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80003bd0:	f2 08 09 49 	lsl	r9,r9,r8
80003bd4:	48 c8       	lddpc	r8,80003c04 <sd_mmc_spi_get_capacity+0x148>
80003bd6:	91 09       	st.w	r8[0x0],r9

  // compute block group size for erase operation
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
80003bd8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80003bdc:	f0 c9 ff ff 	sub	r9,r8,-1
80003be0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80003be4:	2f f8       	sub	r8,-1
80003be6:	f2 08 02 48 	mul	r8,r9,r8
80003bea:	5c 88       	casts.h	r8
80003bec:	48 79       	lddpc	r9,80003c08 <sd_mmc_spi_get_capacity+0x14c>
80003bee:	b2 08       	st.h	r9[0x0],r8
}
80003bf0:	2f ed       	sub	sp,-8
80003bf2:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bf6:	00 00       	add	r0,r0
80003bf8:	00 00       	add	r0,r0
80003bfa:	08 7c       	tst	r12,r4
80003bfc:	00 00       	add	r0,r0
80003bfe:	08 7a       	tst	r10,r4
80003c00:	00 00       	add	r0,r0
80003c02:	08 74       	tst	r4,r4
80003c04:	00 00       	add	r0,r0
80003c06:	08 6c       	and	r12,r4
80003c08:	00 00       	add	r0,r0
80003c0a:	08 70       	tst	r0,r4

80003c0c <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          OK when card is not busy
Bool sd_mmc_spi_wait_not_busy(void)
{
80003c0c:	eb cd 40 80 	pushm	r7,lr
80003c10:	1a 97       	mov	r7,sp
80003c12:	20 2d       	sub	sp,8
  U16 retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003c14:	30 1b       	mov	r11,1
80003c16:	fe 7c 28 00 	mov	r12,-55296
80003c1a:	f0 1f 00 1c 	mcall	80003c88 <sd_mmc_spi_wait_not_busy+0x7c>
  retry = 0;
80003c1e:	30 08       	mov	r8,0
80003c20:	ef 58 ff fe 	st.h	r7[-2],r8
80003c24:	c1 68       	rjmp	80003c50 <sd_mmc_spi_wait_not_busy+0x44>
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
  {
    retry++;
80003c26:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003c2a:	2f f8       	sub	r8,-1
80003c2c:	ef 58 ff fe 	st.h	r7[-2],r8
    if (retry == 50000)
80003c30:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003c34:	fe 78 c3 50 	mov	r8,-15536
80003c38:	f0 09 19 00 	cp.h	r9,r8
80003c3c:	c0 a1       	brne	80003c50 <sd_mmc_spi_wait_not_busy+0x44>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003c3e:	30 1b       	mov	r11,1
80003c40:	fe 7c 28 00 	mov	r12,-55296
80003c44:	f0 1f 00 12 	mcall	80003c8c <sd_mmc_spi_wait_not_busy+0x80>
      return KO;
80003c48:	30 08       	mov	r8,0
80003c4a:	ef 48 ff f8 	st.w	r7[-8],r8
80003c4e:	c1 68       	rjmp	80003c7a <sd_mmc_spi_wait_not_busy+0x6e>
  U16 retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80003c50:	e0 6c 00 ff 	mov	r12,255
80003c54:	f0 1f 00 0f 	mcall	80003c90 <sd_mmc_spi_wait_not_busy+0x84>
80003c58:	18 98       	mov	r8,r12
80003c5a:	48 f9       	lddpc	r9,80003c94 <sd_mmc_spi_wait_not_busy+0x88>
80003c5c:	b2 88       	st.b	r9[0x0],r8
80003c5e:	48 e8       	lddpc	r8,80003c94 <sd_mmc_spi_wait_not_busy+0x88>
80003c60:	11 89       	ld.ub	r9,r8[0x0]
80003c62:	3f f8       	mov	r8,-1
80003c64:	f0 09 18 00 	cp.b	r9,r8
80003c68:	cd f1       	brne	80003c26 <sd_mmc_spi_wait_not_busy+0x1a>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return KO;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003c6a:	30 1b       	mov	r11,1
80003c6c:	fe 7c 28 00 	mov	r12,-55296
80003c70:	f0 1f 00 07 	mcall	80003c8c <sd_mmc_spi_wait_not_busy+0x80>
  return OK;
80003c74:	30 18       	mov	r8,1
80003c76:	ef 48 ff f8 	st.w	r7[-8],r8
80003c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003c7e:	10 9c       	mov	r12,r8
80003c80:	2f ed       	sub	sp,-8
80003c82:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c86:	00 00       	add	r0,r0
80003c88:	80 00       	ld.sh	r0,r0[0x0]
80003c8a:	22 ac       	sub	r12,42
80003c8c:	80 00       	ld.sh	r0,r0[0x0]
80003c8e:	23 58       	sub	r8,53
80003c90:	80 00       	ld.sh	r0,r0[0x0]
80003c92:	39 10       	mov	r0,-111
80003c94:	00 00       	add	r0,r0
80003c96:	08 8c       	andn	r12,r4

80003c98 <sd_mmc_spi_write_open_PDCA>:
//!
//! @return bit
//!   The open succeeded      -> OK
//!/
Bool sd_mmc_spi_write_open_PDCA (U32 pos)
{
80003c98:	eb cd 40 80 	pushm	r7,lr
80003c9c:	1a 97       	mov	r7,sp
80003c9e:	20 2d       	sub	sp,8
80003ca0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;                    // gl_ptr_mem = pos * 512
80003ca4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ca8:	f0 09 15 09 	lsl	r9,r8,0x9
80003cac:	49 e8       	lddpc	r8,80003d24 <sd_mmc_spi_write_open_PDCA+0x8c>
80003cae:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  if (KO == sd_mmc_spi_wait_not_busy())
80003cb0:	f0 1f 00 1e 	mcall	80003d28 <sd_mmc_spi_write_open_PDCA+0x90>
80003cb4:	18 98       	mov	r8,r12
80003cb6:	58 08       	cp.w	r8,0
80003cb8:	c0 51       	brne	80003cc2 <sd_mmc_spi_write_open_PDCA+0x2a>
    return KO;
80003cba:	30 08       	mov	r8,0
80003cbc:	ef 48 ff f8 	st.w	r7[-8],r8
80003cc0:	c2 b8       	rjmp	80003d16 <sd_mmc_spi_write_open_PDCA+0x7e>


  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);          // select SD_MMC_SPI
80003cc2:	30 1b       	mov	r11,1
80003cc4:	fe 7c 28 00 	mov	r12,-55296
80003cc8:	f0 1f 00 19 	mcall	80003d2c <sd_mmc_spi_write_open_PDCA+0x94>
  // issue command
  r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80003ccc:	49 68       	lddpc	r8,80003d24 <sd_mmc_spi_write_open_PDCA+0x8c>
80003cce:	70 08       	ld.w	r8,r8[0x0]
80003cd0:	10 9b       	mov	r11,r8
80003cd2:	31 8c       	mov	r12,24
80003cd4:	f0 1f 00 17 	mcall	80003d30 <sd_mmc_spi_write_open_PDCA+0x98>
80003cd8:	18 98       	mov	r8,r12
80003cda:	49 79       	lddpc	r9,80003d34 <sd_mmc_spi_write_open_PDCA+0x9c>
80003cdc:	b2 88       	st.b	r9[0x0],r8

  // check for valid response
  if (r1 != 0x00)
80003cde:	49 68       	lddpc	r8,80003d34 <sd_mmc_spi_write_open_PDCA+0x9c>
80003ce0:	11 88       	ld.ub	r8,r8[0x0]
80003ce2:	58 08       	cp.w	r8,0
80003ce4:	c0 a0       	breq	80003cf8 <sd_mmc_spi_write_open_PDCA+0x60>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003ce6:	30 1b       	mov	r11,1
80003ce8:	fe 7c 28 00 	mov	r12,-55296
80003cec:	f0 1f 00 13 	mcall	80003d38 <sd_mmc_spi_write_open_PDCA+0xa0>
   // print_dbg("\n****** could not open SD_MMC_SPI for single block read\n");
   // Trace("\n****** could not open SD_MMC_SPI for single block read\n");
    return KO;
80003cf0:	30 08       	mov	r8,0
80003cf2:	ef 48 ff f8 	st.w	r7[-8],r8
80003cf6:	c1 08       	rjmp	80003d16 <sd_mmc_spi_write_open_PDCA+0x7e>
  }

  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80003cf8:	e0 6b 00 ff 	mov	r11,255
80003cfc:	fe 7c 28 00 	mov	r12,-55296
80003d00:	f0 1f 00 0f 	mcall	80003d3c <sd_mmc_spi_write_open_PDCA+0xa4>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80003d04:	e0 6b 00 fe 	mov	r11,254
80003d08:	fe 7c 28 00 	mov	r12,-55296
80003d0c:	f0 1f 00 0c 	mcall	80003d3c <sd_mmc_spi_write_open_PDCA+0xa4>

  return OK;   // Read done.
80003d10:	30 18       	mov	r8,1
80003d12:	ef 48 ff f8 	st.w	r7[-8],r8
80003d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003d1a:	10 9c       	mov	r12,r8
80003d1c:	2f ed       	sub	sp,-8
80003d1e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d22:	00 00       	add	r0,r0
80003d24:	00 00       	add	r0,r0
80003d26:	06 28       	rsub	r8,r3
80003d28:	80 00       	ld.sh	r0,r0[0x0]
80003d2a:	3c 0c       	mov	r12,-64
80003d2c:	80 00       	ld.sh	r0,r0[0x0]
80003d2e:	22 ac       	sub	r12,42
80003d30:	80 00       	ld.sh	r0,r0[0x0]
80003d32:	38 2c       	mov	r12,-126
80003d34:	00 00       	add	r0,r0
80003d36:	08 8c       	andn	r12,r4
80003d38:	80 00       	ld.sh	r0,r0[0x0]
80003d3a:	23 58       	sub	r8,53
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	25 9a       	sub	r10,89

80003d40 <sd_mmc_spi_write_close_PDCA>:
//! Stop PDCA transfer
//! @brief This function closes a PDCA write transfer
//! page programming.
//!
Bool sd_mmc_spi_write_close_PDCA (void)
{
80003d40:	eb cd 40 80 	pushm	r7,lr
80003d44:	1a 97       	mov	r7,sp
80003d46:	20 2d       	sub	sp,8
  U16 i;

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80003d48:	e0 6b 00 ff 	mov	r11,255
80003d4c:	fe 7c 28 00 	mov	r12,-55296
80003d50:	f0 1f 00 2e 	mcall	80003e08 <sd_mmc_spi_write_close_PDCA+0xc8>
  spi_write(SD_MMC_SPI,0xFF);
80003d54:	e0 6b 00 ff 	mov	r11,255
80003d58:	fe 7c 28 00 	mov	r12,-55296
80003d5c:	f0 1f 00 2b 	mcall	80003e08 <sd_mmc_spi_write_close_PDCA+0xc8>

  // read data response token
    r1 = sd_mmc_spi_send_and_read(0xFF);
80003d60:	e0 6c 00 ff 	mov	r12,255
80003d64:	f0 1f 00 2a 	mcall	80003e0c <sd_mmc_spi_write_close_PDCA+0xcc>
80003d68:	18 98       	mov	r8,r12
80003d6a:	4a a9       	lddpc	r9,80003e10 <sd_mmc_spi_write_close_PDCA+0xd0>
80003d6c:	b2 88       	st.b	r9[0x0],r8
    if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80003d6e:	4a 98       	lddpc	r8,80003e10 <sd_mmc_spi_write_close_PDCA+0xd0>
80003d70:	11 88       	ld.ub	r8,r8[0x0]
80003d72:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003d76:	58 58       	cp.w	r8,5
80003d78:	c1 60       	breq	80003da4 <sd_mmc_spi_write_close_PDCA+0x64>
    {
      spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003d7a:	e0 6b 00 ff 	mov	r11,255
80003d7e:	fe 7c 28 00 	mov	r12,-55296
80003d82:	f0 1f 00 22 	mcall	80003e08 <sd_mmc_spi_write_close_PDCA+0xc8>
      spi_write(SD_MMC_SPI,0xFF);
80003d86:	e0 6b 00 ff 	mov	r11,255
80003d8a:	fe 7c 28 00 	mov	r12,-55296
80003d8e:	f0 1f 00 1f 	mcall	80003e08 <sd_mmc_spi_write_close_PDCA+0xc8>
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80003d92:	30 1b       	mov	r11,1
80003d94:	fe 7c 28 00 	mov	r12,-55296
80003d98:	f0 1f 00 1f 	mcall	80003e14 <sd_mmc_spi_write_close_PDCA+0xd4>
       return KO;
80003d9c:	30 08       	mov	r8,0
80003d9e:	ef 48 ff f8 	st.w	r7[-8],r8
80003da2:	c2 d8       	rjmp	80003dfc <sd_mmc_spi_write_close_PDCA+0xbc>
  //     return r1;             // return ERROR byte
    }

    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80003da4:	e0 6b 00 ff 	mov	r11,255
80003da8:	fe 7c 28 00 	mov	r12,-55296
80003dac:	f0 1f 00 17 	mcall	80003e08 <sd_mmc_spi_write_close_PDCA+0xc8>
    spi_write(SD_MMC_SPI,0xFF);
80003db0:	e0 6b 00 ff 	mov	r11,255
80003db4:	fe 7c 28 00 	mov	r12,-55296
80003db8:	f0 1f 00 14 	mcall	80003e08 <sd_mmc_spi_write_close_PDCA+0xc8>

    // release chip select
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80003dbc:	30 1b       	mov	r11,1
80003dbe:	fe 7c 28 00 	mov	r12,-55296
80003dc2:	f0 1f 00 15 	mcall	80003e14 <sd_mmc_spi_write_close_PDCA+0xd4>

    // wait card not busy after last programming operation
    i=0;
80003dc6:	30 08       	mov	r8,0
80003dc8:	ef 58 ff fe 	st.h	r7[-2],r8
80003dcc:	c1 08       	rjmp	80003dec <sd_mmc_spi_write_close_PDCA+0xac>
    while (KO == sd_mmc_spi_wait_not_busy())
    {
      i++;
80003dce:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80003dd2:	2f f8       	sub	r8,-1
80003dd4:	ef 58 ff fe 	st.h	r7[-2],r8
      if (i == 10)
80003dd8:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80003ddc:	30 a8       	mov	r8,10
80003dde:	f0 09 19 00 	cp.h	r9,r8
80003de2:	c0 51       	brne	80003dec <sd_mmc_spi_write_close_PDCA+0xac>
        return KO;
80003de4:	30 08       	mov	r8,0
80003de6:	ef 48 ff f8 	st.w	r7[-8],r8
80003dea:	c0 98       	rjmp	80003dfc <sd_mmc_spi_write_close_PDCA+0xbc>
    // release chip select
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI

    // wait card not busy after last programming operation
    i=0;
    while (KO == sd_mmc_spi_wait_not_busy())
80003dec:	f0 1f 00 0b 	mcall	80003e18 <sd_mmc_spi_write_close_PDCA+0xd8>
80003df0:	18 98       	mov	r8,r12
80003df2:	58 08       	cp.w	r8,0
80003df4:	ce d0       	breq	80003dce <sd_mmc_spi_write_close_PDCA+0x8e>
      i++;
      if (i == 10)
        return KO;
    }

    return OK;                  // Write done
80003df6:	30 18       	mov	r8,1
80003df8:	ef 48 ff f8 	st.w	r7[-8],r8
80003dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003e00:	10 9c       	mov	r12,r8
80003e02:	2f ed       	sub	sp,-8
80003e04:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	25 9a       	sub	r10,89
80003e0c:	80 00       	ld.sh	r0,r0[0x0]
80003e0e:	39 10       	mov	r0,-111
80003e10:	00 00       	add	r0,r0
80003e12:	08 8c       	andn	r12,r4
80003e14:	80 00       	ld.sh	r0,r0[0x0]
80003e16:	23 58       	sub	r8,53
80003e18:	80 00       	ld.sh	r0,r0[0x0]
80003e1a:	3c 0c       	mov	r12,-64

80003e1c <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, unsigned int size)
{
80003e1c:	eb cd 40 80 	pushm	r7,lr
80003e20:	1a 97       	mov	r7,sp
80003e22:	20 4d       	sub	sp,16
80003e24:	ef 4c ff f4 	st.w	r7[-12],r12
80003e28:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80003e2c:	30 08       	mov	r8,0
80003e2e:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int i;

  for (i = 0; i < size; i++)
80003e32:	30 08       	mov	r8,0
80003e34:	ef 48 ff fc 	st.w	r7[-4],r8
80003e38:	c1 c8       	rjmp	80003e70 <gpio_enable_module+0x54>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003e3a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e3e:	11 98       	ld.ub	r8,r8[0x1]
80003e40:	10 99       	mov	r9,r8
80003e42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e46:	11 88       	ld.ub	r8,r8[0x0]
80003e48:	12 9b       	mov	r11,r9
80003e4a:	10 9c       	mov	r12,r8
80003e4c:	f0 1f 00 0f 	mcall	80003e88 <gpio_enable_module+0x6c>
80003e50:	18 99       	mov	r9,r12
80003e52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e56:	12 48       	or	r8,r9
80003e58:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
80003e5c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e60:	2f e8       	sub	r8,-2
80003e62:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, unsigned int size)
{
  int status = GPIO_SUCCESS;
  unsigned int i;

  for (i = 0; i < size; i++)
80003e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e6a:	2f f8       	sub	r8,-1
80003e6c:	ef 48 ff fc 	st.w	r7[-4],r8
80003e70:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e74:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e78:	10 39       	cp.w	r9,r8
80003e7a:	ce 03       	brcs	80003e3a <gpio_enable_module+0x1e>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
80003e7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003e80:	10 9c       	mov	r12,r8
80003e82:	2f cd       	sub	sp,-16
80003e84:	e3 cd 80 80 	ldm	sp++,r7,pc
80003e88:	80 00       	ld.sh	r0,r0[0x0]
80003e8a:	3e 8c       	mov	r12,-24

80003e8c <gpio_enable_module_pin>:


int gpio_enable_module_pin(unsigned int pin, unsigned int function)
{
80003e8c:	eb cd 40 80 	pushm	r7,lr
80003e90:	1a 97       	mov	r7,sp
80003e92:	20 5d       	sub	sp,20
80003e94:	ef 4c ff f8 	st.w	r7[-8],r12
80003e98:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80003e9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ea0:	a5 98       	lsr	r8,0x5
80003ea2:	a9 68       	lsl	r8,0x8
80003ea4:	e0 28 f0 00 	sub	r8,61440
80003ea8:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
80003eac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003eb0:	ef 48 ff ec 	st.w	r7[-20],r8
80003eb4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003eb8:	58 18       	cp.w	r8,1
80003eba:	c2 50       	breq	80003f04 <gpio_enable_module_pin+0x78>
80003ebc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003ec0:	58 18       	cp.w	r8,1
80003ec2:	c0 a3       	brcs	80003ed6 <gpio_enable_module_pin+0x4a>
80003ec4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003ec8:	58 28       	cp.w	r8,2
80003eca:	c3 40       	breq	80003f32 <gpio_enable_module_pin+0xa6>
80003ecc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003ed0:	58 38       	cp.w	r8,3
80003ed2:	c4 70       	breq	80003f60 <gpio_enable_module_pin+0xd4>
80003ed4:	c5 d8       	rjmp	80003f8e <gpio_enable_module_pin+0x102>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80003ed6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003eda:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003ede:	30 18       	mov	r8,1
80003ee0:	f0 09 09 48 	lsl	r8,r8,r9
80003ee4:	10 99       	mov	r9,r8
80003ee6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003eea:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003eec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ef0:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003ef4:	30 18       	mov	r8,1
80003ef6:	f0 09 09 48 	lsl	r8,r8,r9
80003efa:	10 99       	mov	r9,r8
80003efc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f00:	91 a9       	st.w	r8[0x28],r9
80003f02:	c4 a8       	rjmp	80003f96 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80003f04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f08:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f0c:	30 18       	mov	r8,1
80003f0e:	f0 09 09 48 	lsl	r8,r8,r9
80003f12:	10 99       	mov	r9,r8
80003f14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f18:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80003f1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f1e:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f22:	30 18       	mov	r8,1
80003f24:	f0 09 09 48 	lsl	r8,r8,r9
80003f28:	10 99       	mov	r9,r8
80003f2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f2e:	91 a9       	st.w	r8[0x28],r9
80003f30:	c3 38       	rjmp	80003f96 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80003f32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f36:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f3a:	30 18       	mov	r8,1
80003f3c:	f0 09 09 48 	lsl	r8,r8,r9
80003f40:	10 99       	mov	r9,r8
80003f42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f46:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80003f48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f4c:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f50:	30 18       	mov	r8,1
80003f52:	f0 09 09 48 	lsl	r8,r8,r9
80003f56:	10 99       	mov	r9,r8
80003f58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f5c:	91 99       	st.w	r8[0x24],r9
80003f5e:	c1 c8       	rjmp	80003f96 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
    break;

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80003f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f64:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f68:	30 18       	mov	r8,1
80003f6a:	f0 09 09 48 	lsl	r8,r8,r9
80003f6e:	10 99       	mov	r9,r8
80003f70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f74:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80003f76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f7a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f7e:	30 18       	mov	r8,1
80003f80:	f0 09 09 48 	lsl	r8,r8,r9
80003f84:	10 99       	mov	r9,r8
80003f86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003f8a:	91 99       	st.w	r8[0x24],r9
80003f8c:	c0 58       	rjmp	80003f96 <gpio_enable_module_pin+0x10a>
    gpio_port->pmr2s = 1 << (pin & 0x1F);
    break;
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80003f8e:	30 18       	mov	r8,1
80003f90:	ef 48 ff f0 	st.w	r7[-16],r8
80003f94:	c0 f8       	rjmp	80003fb2 <gpio_enable_module_pin+0x126>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80003f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003f9a:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003f9e:	30 18       	mov	r8,1
80003fa0:	f0 09 09 48 	lsl	r8,r8,r9
80003fa4:	10 99       	mov	r9,r8
80003fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003faa:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
80003fac:	30 08       	mov	r8,0
80003fae:	ef 48 ff f0 	st.w	r7[-16],r8
80003fb2:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80003fb6:	10 9c       	mov	r12,r8
80003fb8:	2f bd       	sub	sp,-20
80003fba:	e3 cd 80 80 	ldm	sp++,r7,pc

80003fbe <gpio_clr_gpio_pin>:
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
}


void gpio_clr_gpio_pin(unsigned int pin)
{
80003fbe:	eb cd 40 80 	pushm	r7,lr
80003fc2:	1a 97       	mov	r7,sp
80003fc4:	20 2d       	sub	sp,8
80003fc6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80003fca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fce:	a5 98       	lsr	r8,0x5
80003fd0:	a9 68       	lsl	r8,0x8
80003fd2:	e0 28 f0 00 	sub	r8,61440
80003fd6:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80003fda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003fde:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003fe2:	30 18       	mov	r8,1
80003fe4:	f0 09 09 48 	lsl	r8,r8,r9
80003fe8:	10 99       	mov	r9,r8
80003fea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003fee:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80003ff2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ff6:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80003ffa:	30 18       	mov	r8,1
80003ffc:	f0 09 09 48 	lsl	r8,r8,r9
80004000:	10 99       	mov	r9,r8
80004002:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004006:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8000400a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000400e:	f3 d8 c0 05 	bfextu	r9,r8,0x0,0x5
80004012:	30 18       	mov	r8,1
80004014:	f0 09 09 48 	lsl	r8,r8,r9
80004018:	10 99       	mov	r9,r8
8000401a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000401e:	91 19       	st.w	r8[0x4],r9
}
80004020:	2f ed       	sub	sp,-8
80004022:	e3 cd 80 80 	ldm	sp++,r7,pc
80004026:	d7 03       	nop

80004028 <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
80004028:	eb cd 40 80 	pushm	r7,lr
8000402c:	1a 97       	mov	r7,sp
8000402e:	20 1d       	sub	sp,4
80004030:	ef 4c ff fc 	st.w	r7[-4],r12
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80004034:	ee fb ff fc 	ld.w	r11,r7[-4]
80004038:	e0 6c e1 00 	mov	r12,57600
8000403c:	f0 1f 00 03 	mcall	80004048 <init_dbg_rs232+0x20>
}
80004040:	2f fd       	sub	sp,-4
80004042:	e3 cd 80 80 	ldm	sp++,r7,pc
80004046:	00 00       	add	r0,r0
80004048:	80 00       	ld.sh	r0,r0[0x0]
8000404a:	40 4c       	lddsp	r12,sp[0x10]

8000404c <init_dbg_rs232_ex>:


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
8000404c:	eb cd 40 80 	pushm	r7,lr
80004050:	1a 97       	mov	r7,sp
80004052:	20 5d       	sub	sp,20
80004054:	ef 4c ff f0 	st.w	r7[-16],r12
80004058:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
8000405c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004060:	ef 48 ff f4 	st.w	r7[-12],r8
80004064:	30 88       	mov	r8,8
80004066:	ef 68 ff f8 	st.b	r7[-8],r8
8000406a:	30 48       	mov	r8,4
8000406c:	ef 68 ff f9 	st.b	r7[-7],r8
80004070:	30 08       	mov	r8,0
80004072:	ef 58 ff fa 	st.h	r7[-6],r8
80004076:	30 08       	mov	r8,0
80004078:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
8000407c:	30 2b       	mov	r11,2
8000407e:	48 8c       	lddpc	r12,8000409c <init_dbg_rs232_ex+0x50>
80004080:	f0 1f 00 08 	mcall	800040a0 <init_dbg_rs232_ex+0x54>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80004084:	ee c8 00 0c 	sub	r8,r7,12
80004088:	ee fa ff ec 	ld.w	r10,r7[-20]
8000408c:	10 9b       	mov	r11,r8
8000408e:	fe 7c 18 00 	mov	r12,-59392
80004092:	f0 1f 00 05 	mcall	800040a4 <init_dbg_rs232_ex+0x58>
}
80004096:	2f bd       	sub	sp,-20
80004098:	e3 cd 80 80 	ldm	sp++,r7,pc
8000409c:	80 00       	ld.sh	r0,r0[0x0]
8000409e:	59 06       	cp.w	r6,16
800040a0:	80 00       	ld.sh	r0,r0[0x0]
800040a2:	3e 1c       	mov	r12,-31
800040a4:	80 00       	ld.sh	r0,r0[0x0]
800040a6:	43 30       	lddsp	r0,sp[0xcc]

800040a8 <print_dbg>:


void print_dbg(const char *str)
{
800040a8:	eb cd 40 80 	pushm	r7,lr
800040ac:	1a 97       	mov	r7,sp
800040ae:	20 1d       	sub	sp,4
800040b0:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(DBG_USART, str);
800040b4:	ee fb ff fc 	ld.w	r11,r7[-4]
800040b8:	fe 7c 18 00 	mov	r12,-59392
800040bc:	f0 1f 00 03 	mcall	800040c8 <print_dbg+0x20>
}
800040c0:	2f fd       	sub	sp,-4
800040c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800040c6:	00 00       	add	r0,r0
800040c8:	80 00       	ld.sh	r0,r0[0x0]
800040ca:	40 f0       	lddsp	r0,sp[0x3c]

800040cc <print_dbg_ulong>:
  print_char(DBG_USART, c);
}


void print_dbg_ulong(unsigned long n)
{
800040cc:	eb cd 40 80 	pushm	r7,lr
800040d0:	1a 97       	mov	r7,sp
800040d2:	20 1d       	sub	sp,4
800040d4:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print_ulong(DBG_USART, n);
800040d8:	ee fb ff fc 	ld.w	r11,r7[-4]
800040dc:	fe 7c 18 00 	mov	r12,-59392
800040e0:	f0 1f 00 03 	mcall	800040ec <print_dbg_ulong+0x20>
}
800040e4:	2f fd       	sub	sp,-4
800040e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800040ea:	00 00       	add	r0,r0
800040ec:	80 00       	ld.sh	r0,r0[0x0]
800040ee:	41 18       	lddsp	r8,sp[0x44]

800040f0 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
800040f0:	eb cd 40 80 	pushm	r7,lr
800040f4:	1a 97       	mov	r7,sp
800040f6:	20 2d       	sub	sp,8
800040f8:	ef 4c ff fc 	st.w	r7[-4],r12
800040fc:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
80004100:	ee fb ff f8 	ld.w	r11,r7[-8]
80004104:	ee fc ff fc 	ld.w	r12,r7[-4]
80004108:	f0 1f 00 03 	mcall	80004114 <print+0x24>
}
8000410c:	2f ed       	sub	sp,-8
8000410e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004112:	00 00       	add	r0,r0
80004114:	80 00       	ld.sh	r0,r0[0x0]
80004116:	45 a0       	lddsp	r0,sp[0x168]

80004118 <print_ulong>:
  usart_putchar(usart, c);
}


void print_ulong(volatile avr32_usart_t *usart, unsigned long n)
{
80004118:	eb cd 40 80 	pushm	r7,lr
8000411c:	1a 97       	mov	r7,sp
8000411e:	20 7d       	sub	sp,28
80004120:	ef 4c ff ec 	st.w	r7[-20],r12
80004124:	ef 4b ff e8 	st.w	r7[-24],r11
  char tmp[11];
  int i = sizeof(tmp) - 1;
80004128:	30 a8       	mov	r8,10
8000412a:	ef 48 ff fc 	st.w	r7[-4],r8

  // Convert the given number to an ASCII decimal representation.
  tmp[i] = '\0';
8000412e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004132:	ee 08 00 09 	add	r9,r7,r8
80004136:	30 08       	mov	r8,0
80004138:	f3 68 ff f0 	st.b	r9[-16],r8
  do
  {
    tmp[--i] = '0' + n % 10;
8000413c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004140:	20 18       	sub	r8,1
80004142:	ef 48 ff fc 	st.w	r7[-4],r8
80004146:	ee fb ff fc 	ld.w	r11,r7[-4]
8000414a:	ee fa ff e8 	ld.w	r10,r7[-24]
8000414e:	e0 68 cc cd 	mov	r8,52429
80004152:	ea 18 cc cc 	orh	r8,0xcccc
80004156:	f4 08 06 48 	mulu.d	r8,r10,r8
8000415a:	f2 0c 16 03 	lsr	r12,r9,0x3
8000415e:	ef 4c ff e4 	st.w	r7[-28],r12
80004162:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004166:	a3 68       	lsl	r8,0x2
80004168:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000416c:	12 08       	add	r8,r9
8000416e:	a1 78       	lsl	r8,0x1
80004170:	f4 08 01 08 	sub	r8,r10,r8
80004174:	ef 48 ff e4 	st.w	r7[-28],r8
80004178:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000417c:	5c 58       	castu.b	r8
8000417e:	2d 08       	sub	r8,-48
80004180:	5c 58       	castu.b	r8
80004182:	ee 0b 00 09 	add	r9,r7,r11
80004186:	f3 68 ff f0 	st.b	r9[-16],r8
    n /= 10;
8000418a:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000418e:	e0 68 cc cd 	mov	r8,52429
80004192:	ea 18 cc cc 	orh	r8,0xcccc
80004196:	f2 08 06 48 	mulu.d	r8,r9,r8
8000419a:	f2 08 16 03 	lsr	r8,r9,0x3
8000419e:	ef 48 ff e8 	st.w	r7[-24],r8
  } while (n);
800041a2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800041a6:	58 08       	cp.w	r8,0
800041a8:	cc a1       	brne	8000413c <print_ulong+0x24>

  // Transmit the resulting string with the given USART.
  print(usart, tmp + i);
800041aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
800041ae:	ee c8 00 10 	sub	r8,r7,16
800041b2:	12 08       	add	r8,r9
800041b4:	10 9b       	mov	r11,r8
800041b6:	ee fc ff ec 	ld.w	r12,r7[-20]
800041ba:	f0 1f 00 03 	mcall	800041c4 <print_ulong+0xac>
}
800041be:	2f 9d       	sub	sp,-28
800041c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800041c4:	80 00       	ld.sh	r0,r0[0x0]
800041c6:	40 f0       	lddsp	r0,sp[0x3c]

800041c8 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
800041c8:	eb cd 40 80 	pushm	r7,lr
800041cc:	1a 97       	mov	r7,sp
800041ce:	20 bd       	sub	sp,44
800041d0:	ef 4c ff ec 	st.w	r7[-20],r12
800041d4:	ef 4b ff e8 	st.w	r7[-24],r11
800041d8:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
800041dc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800041e0:	f0 09 15 04 	lsl	r9,r8,0x4
800041e4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800041e8:	10 39       	cp.w	r9,r8
800041ea:	e0 8b 00 06 	brhi	800041f6 <usart_set_async_baudrate+0x2e>
800041ee:	31 09       	mov	r9,16
800041f0:	ef 49 ff d4 	st.w	r7[-44],r9
800041f4:	c0 48       	rjmp	800041fc <usart_set_async_baudrate+0x34>
800041f6:	30 88       	mov	r8,8
800041f8:	ef 48 ff d4 	st.w	r7[-44],r8
800041fc:	ee f9 ff d4 	ld.w	r9,r7[-44]
80004200:	ef 49 ff f0 	st.w	r7[-16],r9
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80004204:	ee f8 ff e4 	ld.w	r8,r7[-28]
80004208:	f0 0a 15 03 	lsl	r10,r8,0x3
8000420c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004210:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004214:	f2 08 02 48 	mul	r8,r9,r8
80004218:	a1 98       	lsr	r8,0x1
8000421a:	10 0a       	add	r10,r8
8000421c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004220:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004224:	f2 08 02 48 	mul	r8,r9,r8
80004228:	f4 08 0d 08 	divu	r8,r10,r8
8000422c:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80004230:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004234:	a3 98       	lsr	r8,0x3
80004236:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8000423a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000423e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004242:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
80004246:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000424a:	58 08       	cp.w	r8,0
8000424c:	c0 70       	breq	8000425a <usart_set_async_baudrate+0x92>
8000424e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004252:	e0 48 ff ff 	cp.w	r8,65535
80004256:	e0 88 00 06 	brls	80004262 <usart_set_async_baudrate+0x9a>
    return USART_INVALID_INPUT;
8000425a:	30 18       	mov	r8,1
8000425c:	ef 48 ff d8 	st.w	r7[-40],r8
80004260:	c2 c8       	rjmp	800042b8 <usart_set_async_baudrate+0xf0>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004262:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004266:	70 18       	ld.w	r8,r8[0x4]
80004268:	10 99       	mov	r9,r8
8000426a:	e4 19 ff f7 	andh	r9,0xfff7
8000426e:	e0 19 fe cf 	andl	r9,0xfecf
80004272:	ef 49 ff dc 	st.w	r7[-36],r9
80004276:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000427a:	59 08       	cp.w	r8,16
8000427c:	c0 60       	breq	80004288 <usart_set_async_baudrate+0xc0>
8000427e:	e8 68 00 00 	mov	r8,524288
80004282:	ef 48 ff e0 	st.w	r7[-32],r8
80004286:	c0 48       	rjmp	8000428e <usart_set_async_baudrate+0xc6>
80004288:	30 09       	mov	r9,0
8000428a:	ef 49 ff e0 	st.w	r7[-32],r9
8000428e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80004292:	ee f8 ff e0 	ld.w	r8,r7[-32]
80004296:	10 49       	or	r9,r8
80004298:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000429c:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8000429e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042a2:	f0 09 15 10 	lsl	r9,r8,0x10
800042a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042aa:	10 49       	or	r9,r8
800042ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800042b0:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
800042b2:	30 09       	mov	r9,0
800042b4:	ef 49 ff d8 	st.w	r7[-40],r9
800042b8:	ee f8 ff d8 	ld.w	r8,r7[-40]
}
800042bc:	10 9c       	mov	r12,r8
800042be:	2f 5d       	sub	sp,-44
800042c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800042c4 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
800042c4:	eb cd 40 80 	pushm	r7,lr
800042c8:	1a 97       	mov	r7,sp
800042ca:	20 3d       	sub	sp,12
800042cc:	ef 4c ff f8 	st.w	r7[-8],r12
  Bool global_interrupt_enabled = Is_global_interrupt_enabled();
800042d0:	e1 b8 00 00 	mfsr	r8,0x0
800042d4:	e6 18 00 01 	andh	r8,0x1,COH
800042d8:	5f 08       	sreq	r8
800042da:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) Disable_global_interrupt();
800042de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800042e2:	30 08       	mov	r8,0
800042e4:	f0 09 18 00 	cp.b	r9,r8
800042e8:	c0 20       	breq	800042ec <usart_reset+0x28>
800042ea:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800042ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800042f0:	3f f8       	mov	r8,-1
800042f2:	93 38       	st.w	r9[0xc],r8
  usart->csr;
800042f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042f8:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) Enable_global_interrupt();
800042fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800042fe:	30 08       	mov	r8,0
80004300:	f0 09 18 00 	cp.b	r9,r8
80004304:	c0 20       	breq	80004308 <usart_reset+0x44>
80004306:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80004308:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000430c:	30 08       	mov	r8,0
8000430e:	93 18       	st.w	r9[0x4],r8
  usart->rtor = 0;
80004310:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004314:	30 08       	mov	r8,0
80004316:	93 98       	st.w	r9[0x24],r8
  usart->ttgr = 0;
80004318:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000431c:	30 08       	mov	r8,0
8000431e:	93 a8       	st.w	r9[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
80004320:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004324:	ea 68 61 0c 	mov	r8,680204
80004328:	93 08       	st.w	r9[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8000432a:	2f dd       	sub	sp,-12
8000432c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004330 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
80004330:	eb cd 40 80 	pushm	r7,lr
80004334:	1a 97       	mov	r7,sp
80004336:	20 4d       	sub	sp,16
80004338:	ef 4c ff fc 	st.w	r7[-4],r12
8000433c:	ef 4b ff f8 	st.w	r7[-8],r11
80004340:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
80004344:	ee fc ff fc 	ld.w	r12,r7[-4]
80004348:	f0 1f 00 57 	mcall	800044a4 <usart_init_rs232+0x174>

  // Check input values.
  if (!opt || // Null pointer.
8000434c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004350:	58 08       	cp.w	r8,0
80004352:	c3 90       	breq	800043c4 <usart_init_rs232+0x94>
80004354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004358:	11 c9       	ld.ub	r9,r8[0x4]
8000435a:	30 48       	mov	r8,4
8000435c:	f0 09 18 00 	cp.b	r9,r8
80004360:	e0 88 00 32 	brls	800043c4 <usart_init_rs232+0x94>
80004364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004368:	11 c9       	ld.ub	r9,r8[0x4]
8000436a:	30 98       	mov	r8,9
8000436c:	f0 09 18 00 	cp.b	r9,r8
80004370:	e0 8b 00 2a 	brhi	800043c4 <usart_init_rs232+0x94>
80004374:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004378:	11 d9       	ld.ub	r9,r8[0x5]
8000437a:	30 78       	mov	r8,7
8000437c:	f0 09 18 00 	cp.b	r9,r8
80004380:	e0 8b 00 22 	brhi	800043c4 <usart_init_rs232+0x94>
80004384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004388:	90 39       	ld.sh	r9,r8[0x6]
8000438a:	e0 68 01 01 	mov	r8,257
8000438e:	f0 09 19 00 	cp.h	r9,r8
80004392:	e0 8b 00 19 	brhi	800043c4 <usart_init_rs232+0x94>
80004396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000439a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000439e:	30 38       	mov	r8,3
800043a0:	f0 09 18 00 	cp.b	r9,r8
800043a4:	e0 8b 00 10 	brhi	800043c4 <usart_init_rs232+0x94>
800043a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800043ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043b0:	70 08       	ld.w	r8,r8[0x0]
800043b2:	12 9a       	mov	r10,r9
800043b4:	10 9b       	mov	r11,r8
800043b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800043ba:	f0 1f 00 3c 	mcall	800044a8 <usart_init_rs232+0x178>
800043be:	18 98       	mov	r8,r12
800043c0:	58 18       	cp.w	r8,1
800043c2:	c0 51       	brne	800043cc <usart_init_rs232+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
800043c4:	30 18       	mov	r8,1
800043c6:	ef 48 ff f0 	st.w	r7[-16],r8
800043ca:	c6 78       	rjmp	80004498 <usart_init_rs232+0x168>

  if (opt->charlength == 9)
800043cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043d0:	11 c9       	ld.ub	r9,r8[0x4]
800043d2:	30 98       	mov	r8,9
800043d4:	f0 09 18 00 	cp.b	r9,r8
800043d8:	c0 a1       	brne	800043ec <usart_init_rs232+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
800043da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043de:	70 18       	ld.w	r8,r8[0x4]
800043e0:	10 99       	mov	r9,r8
800043e2:	b1 b9       	sbr	r9,0x11
800043e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043e8:	91 19       	st.w	r8[0x4],r9
800043ea:	c0 d8       	rjmp	80004404 <usart_init_rs232+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
800043ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800043f0:	70 19       	ld.w	r9,r8[0x4]
800043f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043f6:	11 c8       	ld.ub	r8,r8[0x4]
800043f8:	20 58       	sub	r8,5
800043fa:	a7 68       	lsl	r8,0x6
800043fc:	10 49       	or	r9,r8
800043fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004402:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80004404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004408:	70 1a       	ld.w	r10,r8[0x4]
8000440a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000440e:	11 d8       	ld.ub	r8,r8[0x5]
80004410:	f0 09 15 09 	lsl	r9,r8,0x9
80004414:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004418:	f1 38 00 08 	ld.ub	r8,r8[8]
8000441c:	af 68       	lsl	r8,0xe
8000441e:	f3 e8 10 08 	or	r8,r9,r8
80004422:	f5 e8 10 09 	or	r9,r10,r8
80004426:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000442a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8000442c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004430:	90 39       	ld.sh	r9,r8[0x6]
80004432:	30 28       	mov	r8,2
80004434:	f0 09 19 00 	cp.h	r9,r8
80004438:	e0 88 00 14 	brls	80004460 <usart_init_rs232+0x130>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8000443c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004440:	70 18       	ld.w	r8,r8[0x4]
80004442:	10 99       	mov	r9,r8
80004444:	ad b9       	sbr	r9,0xd
80004446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000444a:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8000444c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004450:	90 38       	ld.sh	r8,r8[0x6]
80004452:	5c 78       	castu.h	r8
80004454:	20 28       	sub	r8,2
80004456:	10 99       	mov	r9,r8
80004458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000445c:	91 a9       	st.w	r8[0x28],r9
8000445e:	c0 d8       	rjmp	80004478 <usart_init_rs232+0x148>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
80004460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004464:	70 19       	ld.w	r9,r8[0x4]
80004466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000446a:	90 38       	ld.sh	r8,r8[0x6]
8000446c:	5c 78       	castu.h	r8
8000446e:	ad 68       	lsl	r8,0xc
80004470:	10 49       	or	r9,r8
80004472:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004476:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80004478:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000447c:	70 18       	ld.w	r8,r8[0x4]
8000447e:	10 99       	mov	r9,r8
80004480:	e0 19 ff f0 	andl	r9,0xfff0
80004484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004488:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8000448a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000448e:	35 08       	mov	r8,80
80004490:	93 08       	st.w	r9[0x0],r8
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80004492:	30 08       	mov	r8,0
80004494:	ef 48 ff f0 	st.w	r7[-16],r8
80004498:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
8000449c:	10 9c       	mov	r12,r8
8000449e:	2f cd       	sub	sp,-16
800044a0:	e3 cd 80 80 	ldm	sp++,r7,pc
800044a4:	80 00       	ld.sh	r0,r0[0x0]
800044a6:	42 c4       	lddsp	r4,sp[0xb0]
800044a8:	80 00       	ld.sh	r0,r0[0x0]
800044aa:	41 c8       	lddsp	r8,sp[0x70]

800044ac <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
800044ac:	eb cd 40 80 	pushm	r7,lr
800044b0:	1a 97       	mov	r7,sp
800044b2:	20 4d       	sub	sp,16
800044b4:	ef 4c ff f8 	st.w	r7[-8],r12
800044b8:	ef 4b ff f4 	st.w	r7[-12],r11
800044bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044c0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
extern __inline__ int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
800044c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044c8:	70 58       	ld.w	r8,r8[0x14]
800044ca:	e2 18 00 02 	andl	r8,0x2,COH
800044ce:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
800044d0:	58 08       	cp.w	r8,0
800044d2:	c0 c0       	breq	800044ea <usart_write_char+0x3e>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
800044d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800044d8:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800044dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044e0:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
800044e2:	30 08       	mov	r8,0
800044e4:	ef 48 ff f0 	st.w	r7[-16],r8
800044e8:	c0 48       	rjmp	800044f0 <usart_write_char+0x44>
  }
  else
    return USART_TX_BUSY;
800044ea:	30 28       	mov	r8,2
800044ec:	ef 48 ff f0 	st.w	r7[-16],r8
800044f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
800044f4:	10 9c       	mov	r12,r8
800044f6:	2f cd       	sub	sp,-16
800044f8:	e3 cd 80 80 	ldm	sp++,r7,pc

800044fc <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
800044fc:	eb cd 40 80 	pushm	r7,lr
80004500:	1a 97       	mov	r7,sp
80004502:	20 4d       	sub	sp,16
80004504:	ef 4c ff f8 	st.w	r7[-8],r12
80004508:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8000450c:	e0 68 27 10 	mov	r8,10000
80004510:	ef 48 ff fc 	st.w	r7[-4],r8

  if (c == '\n')
80004514:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004518:	58 a8       	cp.w	r8,10
8000451a:	c1 e1       	brne	80004556 <usart_putchar+0x5a>
  {
    do
    {
      if (!timeout--) return USART_FAILURE;
8000451c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004520:	58 08       	cp.w	r8,0
80004522:	5f 08       	sreq	r8
80004524:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000452c:	20 18       	sub	r8,1
8000452e:	ef 48 ff fc 	st.w	r7[-4],r8
80004532:	58 09       	cp.w	r9,0
80004534:	c0 50       	breq	8000453e <usart_putchar+0x42>
80004536:	3f f8       	mov	r8,-1
80004538:	ef 48 ff f0 	st.w	r7[-16],r8
8000453c:	c2 a8       	rjmp	80004590 <usart_putchar+0x94>
    } while (usart_write_char(usart, '\r') != USART_SUCCESS);
8000453e:	30 db       	mov	r11,13
80004540:	ee fc ff f8 	ld.w	r12,r7[-8]
80004544:	f0 1f 00 16 	mcall	8000459c <usart_putchar+0xa0>
80004548:	18 98       	mov	r8,r12
8000454a:	58 08       	cp.w	r8,0
8000454c:	ce 81       	brne	8000451c <usart_putchar+0x20>

    timeout = USART_DEFAULT_TIMEOUT;
8000454e:	e0 68 27 10 	mov	r8,10000
80004552:	ef 48 ff fc 	st.w	r7[-4],r8
  }

  do
  {
    if (!timeout--) return USART_FAILURE;
80004556:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000455a:	58 08       	cp.w	r8,0
8000455c:	5f 08       	sreq	r8
8000455e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004562:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004566:	20 18       	sub	r8,1
80004568:	ef 48 ff fc 	st.w	r7[-4],r8
8000456c:	58 09       	cp.w	r9,0
8000456e:	c0 50       	breq	80004578 <usart_putchar+0x7c>
80004570:	3f f8       	mov	r8,-1
80004572:	ef 48 ff f0 	st.w	r7[-16],r8
80004576:	c0 d8       	rjmp	80004590 <usart_putchar+0x94>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80004578:	ee fb ff f4 	ld.w	r11,r7[-12]
8000457c:	ee fc ff f8 	ld.w	r12,r7[-8]
80004580:	f0 1f 00 07 	mcall	8000459c <usart_putchar+0xa0>
80004584:	18 98       	mov	r8,r12
80004586:	58 08       	cp.w	r8,0
80004588:	ce 71       	brne	80004556 <usart_putchar+0x5a>

  return USART_SUCCESS;
8000458a:	30 08       	mov	r8,0
8000458c:	ef 48 ff f0 	st.w	r7[-16],r8
80004590:	ee f8 ff f0 	ld.w	r8,r7[-16]
}
80004594:	10 9c       	mov	r12,r8
80004596:	2f cd       	sub	sp,-16
80004598:	e3 cd 80 80 	ldm	sp++,r7,pc
8000459c:	80 00       	ld.sh	r0,r0[0x0]
8000459e:	44 ac       	lddsp	r12,sp[0x128]

800045a0 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800045a0:	eb cd 40 80 	pushm	r7,lr
800045a4:	1a 97       	mov	r7,sp
800045a6:	20 2d       	sub	sp,8
800045a8:	ef 4c ff fc 	st.w	r7[-4],r12
800045ac:	ef 4b ff f8 	st.w	r7[-8],r11
800045b0:	c0 f8       	rjmp	800045ce <usart_write_line+0x2e>
  while (*string != '\0')
    usart_putchar(usart, *string++);
800045b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045b6:	11 88       	ld.ub	r8,r8[0x0]
800045b8:	10 99       	mov	r9,r8
800045ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045be:	2f f8       	sub	r8,-1
800045c0:	ef 48 ff f8 	st.w	r7[-8],r8
800045c4:	12 9b       	mov	r11,r9
800045c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800045ca:	f0 1f 00 06 	mcall	800045e0 <usart_write_line+0x40>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800045ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045d2:	11 88       	ld.ub	r8,r8[0x0]
800045d4:	58 08       	cp.w	r8,0
800045d6:	ce e1       	brne	800045b2 <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
800045d8:	2f ed       	sub	sp,-8
800045da:	e3 cd 80 80 	ldm	sp++,r7,pc
800045de:	00 00       	add	r0,r0
800045e0:	80 00       	ld.sh	r0,r0[0x0]
800045e2:	44 fc       	lddsp	r12,sp[0x13c]
800045e4:	0a 49       	or	r9,r5
800045e6:	4e 54       	lddpc	r4,80004778 <sd_mmc_resources_init>
800045e8:	2d 54       	sub	r4,-43
800045ea:	72 61       	ld.w	r1,r9[0x18]
800045ec:	6e 73       	ld.w	r3,r7[0x1c]
800045ee:	66 65       	ld.w	r5,r3[0x18]
800045f0:	72 20       	ld.w	r0,r9[0x8]
800045f2:	63 6f       	ld.w	pc,r1[0x58]
800045f4:	6d 70       	ld.w	r0,r6[0x5c]
800045f6:	6c 65       	ld.w	r5,r6[0x18]
800045f8:	74 65       	ld.w	r5,r10[0x18]
800045fa:	64 00       	ld.w	r0,r2[0x0]
800045fc:	0a 52       	eor	r2,r5
800045fe:	65 73       	ld.w	r3,r2[0x5c]
80004600:	70 6f       	ld.w	pc,r8[0x18]
80004602:	6e 73       	ld.w	r3,r7[0x1c]
80004604:	65 20       	ld.w	r0,r2[0x48]
80004606:	72 65       	ld.w	r5,r9[0x18]
80004608:	63 65       	ld.w	r5,r1[0x58]
8000460a:	69 76       	ld.w	r6,r4[0x5c]
8000460c:	65 64       	ld.w	r4,r2[0x58]
8000460e:	00 00       	add	r0,r0
80004610:	0a 52       	eor	r2,r5
80004612:	65 73       	ld.w	r3,r2[0x5c]
80004614:	70 6f       	ld.w	pc,r8[0x18]
80004616:	6e 73       	ld.w	r3,r7[0x1c]
80004618:	65 20       	ld.w	r0,r2[0x48]
8000461a:	4e 4f       	lddpc	pc,800047a8 <sd_mmc_resources_init+0x30>
8000461c:	54 20       	stdsp	sp[0x108],r0
8000461e:	72 65       	ld.w	r5,r9[0x18]
80004620:	63 65       	ld.w	r5,r1[0x58]
80004622:	69 76       	ld.w	r6,r4[0x5c]
80004624:	65 64       	ld.w	r4,r2[0x58]
80004626:	00 00       	add	r0,r0
80004628:	0a 53       	eor	r3,r5
8000462a:	44 52       	lddsp	r2,sp[0x114]
8000462c:	41 4d       	lddsp	sp,sp[0x50]
8000462e:	20 69       	sub	r9,6
80004630:	6e 69       	ld.w	r9,r7[0x18]
80004632:	74 69       	ld.w	r9,r10[0x18]
80004634:	61 6c       	ld.w	r12,r0[0x58]
80004636:	69 7a       	ld.w	r10,r4[0x5c]
80004638:	65 64       	ld.w	r4,r2[0x58]
8000463a:	00 00       	add	r0,r0
8000463c:	0a 43       	or	r3,r5
8000463e:	61 72       	ld.w	r2,r0[0x5c]
80004640:	64 20       	ld.w	r0,r2[0x8]
80004642:	64 65       	ld.w	r5,r2[0x18]
80004644:	74 65       	ld.w	r5,r10[0x18]
80004646:	63 74       	ld.w	r4,r1[0x5c]
80004648:	65 64       	ld.w	r4,r2[0x58]
8000464a:	21 00       	sub	r0,16
8000464c:	43 61       	lddsp	r1,sp[0xd8]
8000464e:	70 61       	ld.w	r1,r8[0x18]
80004650:	63 69       	ld.w	r9,r1[0x58]
80004652:	74 79       	ld.w	r9,r10[0x1c]
80004654:	20 3d       	sub	sp,12
80004656:	20 00       	sub	r0,0
80004658:	20 4d       	sub	sp,16
8000465a:	42 79       	lddsp	r9,sp[0x9c]
8000465c:	74 65       	ld.w	r5,r10[0x18]
8000465e:	73 00       	ld.w	r0,r9[0x40]
80004660:	0a 50       	eor	r0,r5
80004662:	44 43       	lddsp	r3,sp[0x110]
80004664:	41 20       	lddsp	r0,sp[0x48]
80004666:	69 6e       	ld.w	lr,r4[0x58]
80004668:	69 74       	ld.w	r4,r4[0x5c]
8000466a:	69 61       	ld.w	r1,r4[0x58]
8000466c:	6c 69       	ld.w	r9,r6[0x18]
8000466e:	7a 65       	ld.w	r5,sp[0x18]
80004670:	64 00       	ld.w	r0,r2[0x0]
80004672:	00 00       	add	r0,r0
80004674:	70 72       	ld.w	r2,r8[0x1c]
80004676:	65 77       	ld.w	r7,r2[0x5c]
80004678:	72 69       	ld.w	r9,r9[0x18]
8000467a:	74 65       	ld.w	r5,r10[0x18]
8000467c:	20 53       	sub	r3,5
8000467e:	44 52       	lddsp	r2,sp[0x114]
80004680:	41 4d       	lddsp	sp,sp[0x50]
80004682:	20 64       	sub	r4,6
80004684:	6f 6e       	ld.w	lr,r7[0x58]
80004686:	65 21       	ld.w	r1,r2[0x48]
80004688:	21 00       	sub	r0,16
8000468a:	00 00       	add	r0,r0
8000468c:	0a 20       	rsub	r0,r5
8000468e:	35 31       	mov	r1,83
80004690:	32 20       	mov	r0,34
80004692:	42 79       	lddsp	r9,sp[0x9c]
80004694:	74 65       	ld.w	r5,r10[0x18]
80004696:	73 20       	ld.w	r0,r9[0x48]
80004698:	6f 66       	ld.w	r6,r7[0x58]
8000469a:	20 54       	sub	r4,5
8000469c:	72 61       	ld.w	r1,r9[0x18]
8000469e:	6e 73       	ld.w	r3,r7[0x1c]
800046a0:	66 65       	ld.w	r5,r3[0x18]
800046a2:	72 20       	ld.w	r0,r9[0x8]
800046a4:	4e 75       	lddpc	r5,80004840 <local_pdca_init+0x30>
800046a6:	6d 62       	ld.w	r2,r6[0x58]
800046a8:	65 72       	ld.w	r2,r2[0x5c]
800046aa:	20 00       	sub	r0,0
800046ac:	2f 00       	sub	r0,-16
800046ae:	00 00       	add	r0,r0
800046b0:	0a 21       	rsub	r1,r5
800046b2:	20 55       	sub	r5,5
800046b4:	6e 61       	ld.w	r1,r7[0x18]
800046b6:	62 6c       	ld.w	r12,r1[0x18]
800046b8:	65 20       	ld.w	r0,r2[0x48]
800046ba:	74 6f       	ld.w	pc,r10[0x18]
800046bc:	20 6f       	sub	pc,6
800046be:	70 65       	ld.w	r5,r8[0x18]
800046c0:	6e 20       	ld.w	r0,r7[0x8]
800046c2:	6d 65       	ld.w	r5,r6[0x58]
800046c4:	6d 6f       	ld.w	pc,r6[0x58]
800046c6:	72 79       	ld.w	r9,r9[0x1c]
800046c8:	20 0a       	sub	r10,0
800046ca:	00 00       	add	r0,r0
800046cc:	0a 45       	or	r5,r5
800046ce:	6e 64       	ld.w	r4,r7[0x18]
800046d0:	20 6f       	sub	pc,6
800046d2:	66 20       	ld.w	r0,r3[0x8]
800046d4:	74 68       	ld.w	r8,r10[0x18]
800046d6:	65 20       	ld.w	r0,r2[0x48]
800046d8:	6c 61       	ld.w	r1,r6[0x18]
800046da:	62 32       	ld.w	r2,r1[0xc]
800046dc:	2e 0a       	sub	r10,-32
	...

800046e0 <wait>:
//unsigned long sdram_size = SDRAM_SIZE >> 2;



void wait()
{
800046e0:	eb cd 40 80 	pushm	r7,lr
800046e4:	1a 97       	mov	r7,sp
800046e6:	20 1d       	sub	sp,4
  volatile int i;
  for(i = 0 ; i < 5000; i++);
800046e8:	30 08       	mov	r8,0
800046ea:	ef 48 ff fc 	st.w	r7[-4],r8
800046ee:	c0 68       	rjmp	800046fa <wait+0x1a>
800046f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046f4:	2f f8       	sub	r8,-1
800046f6:	ef 48 ff fc 	st.w	r7[-4],r8
800046fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800046fe:	e0 48 13 87 	cp.w	r8,4999
80004702:	fe 9a ff f7 	brle	800046f0 <wait+0x10>
}
80004706:	2f fd       	sub	sp,-4
80004708:	e3 cd 80 80 	ldm	sp++,r7,pc

8000470c <pdca_int_handler>:

static void pdca_int_handler(void)
{
8000470c:	eb cd 40 80 	pushm	r7,lr
80004710:	1a 97       	mov	r7,sp
  print_dbg("\nINT-Transfer completed");
80004712:	49 1c       	lddpc	r12,80004754 <pdca_int_handler+0x48>
80004714:	f0 1f 00 11 	mcall	80004758 <pdca_int_handler+0x4c>
	// Disable all interrupts.
  Disable_global_interrupt();
80004718:	d3 03       	ssrf	0x10

  // Disable interrupt channel.
  pdca_disable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_TX);
8000471a:	30 1c       	mov	r12,1
8000471c:	f0 1f 00 10 	mcall	8000475c <pdca_int_handler+0x50>

  if(sd_mmc_spi_write_close_PDCA()== OK)//unselects the SD/MMC memory.
80004720:	f0 1f 00 10 	mcall	80004760 <pdca_int_handler+0x54>
80004724:	18 98       	mov	r8,r12
80004726:	10 99       	mov	r9,r8
80004728:	30 18       	mov	r8,1
8000472a:	f0 09 18 00 	cp.b	r9,r8
8000472e:	c0 b1       	brne	80004744 <pdca_int_handler+0x38>
  {
	  wait();
80004730:	f0 1f 00 0d 	mcall	80004764 <pdca_int_handler+0x58>
  // Disable unnecessary channel
      pdca_disable(AVR32_PDCA_CHANNEL_SPI_TX);
80004734:	30 1c       	mov	r12,1
80004736:	f0 1f 00 0d 	mcall	80004768 <pdca_int_handler+0x5c>
 // pdca_disable(AVR32_PDCA_CHANNEL_SPI_RX);

     // Enable all interrupts.
      Enable_global_interrupt();
8000473a:	d5 03       	csrf	0x10
     print_dbg("\nResponse received");
8000473c:	48 cc       	lddpc	r12,8000476c <pdca_int_handler+0x60>
8000473e:	f0 1f 00 07 	mcall	80004758 <pdca_int_handler+0x4c>
80004742:	c0 48       	rjmp	8000474a <pdca_int_handler+0x3e>
  }
  else
  {
	  print_dbg("\nResponse NOT received");
80004744:	48 bc       	lddpc	r12,80004770 <pdca_int_handler+0x64>
80004746:	f0 1f 00 05 	mcall	80004758 <pdca_int_handler+0x4c>
  }

  end_of_transfer = TRUE;
8000474a:	48 b9       	lddpc	r9,80004774 <pdca_int_handler+0x68>
8000474c:	30 18       	mov	r8,1
8000474e:	b2 88       	st.b	r9[0x0],r8

}
80004750:	e3 cd 80 80 	ldm	sp++,r7,pc
80004754:	80 00       	ld.sh	r0,r0[0x0]
80004756:	45 e4       	lddsp	r4,sp[0x178]
80004758:	80 00       	ld.sh	r0,r0[0x0]
8000475a:	40 a8       	lddsp	r8,sp[0x28]
8000475c:	80 00       	ld.sh	r0,r0[0x0]
8000475e:	34 e4       	mov	r4,78
80004760:	80 00       	ld.sh	r0,r0[0x0]
80004762:	3d 40       	mov	r0,-44
80004764:	80 00       	ld.sh	r0,r0[0x0]
80004766:	46 e0       	lddsp	r0,sp[0x1b8]
80004768:	80 00       	ld.sh	r0,r0[0x0]
8000476a:	34 10       	mov	r0,65
8000476c:	80 00       	ld.sh	r0,r0[0x0]
8000476e:	45 fc       	lddsp	r12,sp[0x17c]
80004770:	80 00       	ld.sh	r0,r0[0x0]
80004772:	46 10       	lddsp	r0,sp[0x184]
80004774:	00 00       	add	r0,r0
80004776:	08 90       	mov	r0,r4

80004778 <sd_mmc_resources_init>:

void sd_mmc_resources_init(void)
{
80004778:	eb cd 40 80 	pushm	r7,lr
8000477c:	1a 97       	mov	r7,sp
8000477e:	20 4d       	sub	sp,16
	    .spck_delay   = 0,
	    .trans_delay  = 0,
	    .stay_act     = 1,
	    .spi_mode     = 0,
	    .modfdis      = 1
	  };
80004780:	49 d8       	lddpc	r8,800047f4 <sd_mmc_resources_init+0x7c>
80004782:	ee cb 00 10 	sub	r11,r7,16
80004786:	10 9a       	mov	r10,r8
80004788:	f4 e8 00 00 	ld.d	r8,r10[0]
8000478c:	f6 e9 00 00 	st.d	r11[0],r8
80004790:	f4 e8 00 08 	ld.d	r8,r10[8]
80004794:	f6 e9 00 08 	st.d	r11[8],r8

  // Assign I/Os to SPI.
  gpio_enable_module(SD_MMC_SPI_GPIO_MAP,sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));
80004798:	30 4b       	mov	r11,4
8000479a:	49 8c       	lddpc	r12,800047f8 <sd_mmc_resources_init+0x80>
8000479c:	f0 1f 00 18 	mcall	800047fc <sd_mmc_resources_init+0x84>

  // Initialize as master.
  spi_initMaster(SD_MMC_SPI, &spiOptions);
800047a0:	ee c8 00 10 	sub	r8,r7,16
800047a4:	10 9b       	mov	r11,r8
800047a6:	fe 7c 28 00 	mov	r12,-55296
800047aa:	f0 1f 00 16 	mcall	80004800 <sd_mmc_resources_init+0x88>

  // Set SPI selection mode: variable_ps, pcs_decode, delay.
  spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
800047ae:	30 09       	mov	r9,0
800047b0:	30 0a       	mov	r10,0
800047b2:	30 0b       	mov	r11,0
800047b4:	fe 7c 28 00 	mov	r12,-55296
800047b8:	f0 1f 00 13 	mcall	80004804 <sd_mmc_resources_init+0x8c>

  // Enable SPI module.
  spi_enable(SD_MMC_SPI);
800047bc:	fe 7c 28 00 	mov	r12,-55296
800047c0:	f0 1f 00 12 	mcall	80004808 <sd_mmc_resources_init+0x90>

  // Initialize SD/MMC driver with SPI clock (PBA).
  sd_mmc_spi_init(spiOptions, PBA_HZ);
800047c4:	20 4d       	sub	sp,16
800047c6:	1a 98       	mov	r8,sp
800047c8:	10 9b       	mov	r11,r8
800047ca:	ee ca 00 10 	sub	r10,r7,16
800047ce:	f4 e8 00 00 	ld.d	r8,r10[0]
800047d2:	f6 e9 00 00 	st.d	r11[0],r8
800047d6:	f4 e8 00 08 	ld.d	r8,r10[8]
800047da:	f6 e9 00 08 	st.d	r11[8],r8
800047de:	e0 6c c5 20 	mov	r12,50464
800047e2:	ea 1c 00 fb 	orh	r12,0xfb
800047e6:	f0 1f 00 0a 	mcall	8000480c <sd_mmc_resources_init+0x94>
800047ea:	2f cd       	sub	sp,-16
}
800047ec:	2f cd       	sub	sp,-16
800047ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800047f2:	00 00       	add	r0,r0
800047f4:	80 00       	ld.sh	r0,r0[0x0]
800047f6:	59 14       	cp.w	r4,17
800047f8:	80 00       	ld.sh	r0,r0[0x0]
800047fa:	59 0a       	cp.w	r10,16
800047fc:	80 00       	ld.sh	r0,r0[0x0]
800047fe:	3e 1c       	mov	r12,-31
80004800:	80 00       	ld.sh	r0,r0[0x0]
80004802:	21 6c       	sub	r12,22
80004804:	80 00       	ld.sh	r0,r0[0x0]
80004806:	22 0c       	sub	r12,32
80004808:	80 00       	ld.sh	r0,r0[0x0]
8000480a:	25 80       	sub	r0,88
8000480c:	80 00       	ld.sh	r0,r0[0x0]
8000480e:	37 a0       	mov	r0,122

80004810 <local_pdca_init>:

void local_pdca_init(void)
{
80004810:	eb cd 40 80 	pushm	r7,lr
80004814:	1a 97       	mov	r7,sp
80004816:	20 6d       	sub	sp,24
    .size = 512,                              // transfer counter: here the size of the string
    .r_addr = NULL,                           // next memory address after 1st transfer complete
    .r_size = 0,                              // next transfer counter not used here
    .pid = 16,        // select peripheral ID - data are on reception from SPI1 RX line
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer: 8,16,32 bits
  };
80004818:	49 18       	lddpc	r8,8000485c <local_pdca_init+0x4c>
8000481a:	70 08       	ld.w	r8,r8[0x0]
8000481c:	ef 48 ff e8 	st.w	r7[-24],r8
80004820:	e0 68 02 00 	mov	r8,512
80004824:	ef 48 ff ec 	st.w	r7[-20],r8
80004828:	30 08       	mov	r8,0
8000482a:	ef 48 ff f0 	st.w	r7[-16],r8
8000482e:	30 08       	mov	r8,0
80004830:	ef 48 ff f4 	st.w	r7[-12],r8
80004834:	31 08       	mov	r8,16
80004836:	ef 48 ff f8 	st.w	r7[-8],r8
8000483a:	30 08       	mov	r8,0
8000483c:	ef 48 ff fc 	st.w	r7[-4],r8

  // Init PDCA transmission channel
  pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_TX, &pdca_options_SPI_TX);
80004840:	ee c8 00 18 	sub	r8,r7,24
80004844:	10 9b       	mov	r11,r8
80004846:	30 1c       	mov	r12,1
80004848:	f0 1f 00 06 	mcall	80004860 <local_pdca_init+0x50>

  // Init PDCA Reception channel
 // pdca_init_channel(AVR32_PDCA_CHANNEL_SPI_RX, &pdca_options_SPI_RX);

  //\brief Enable pdca transfer interrupt when completed
   INTC_register_interrupt(&pdca_int_handler, AVR32_PDCA_IRQ_1, AVR32_INTC_INT1);  // pdca_channel_spi1_RX = 0
8000484c:	30 1a       	mov	r10,1
8000484e:	36 1b       	mov	r11,97
80004850:	48 5c       	lddpc	r12,80004864 <local_pdca_init+0x54>
80004852:	f0 1f 00 06 	mcall	80004868 <local_pdca_init+0x58>

}
80004856:	2f ad       	sub	sp,-24
80004858:	e3 cd 80 80 	ldm	sp++,r7,pc
8000485c:	00 00       	add	r0,r0
8000485e:	00 28       	rsub	r8,r0
80004860:	80 00       	ld.sh	r0,r0[0x0]
80004862:	33 44       	mov	r4,52
80004864:	80 00       	ld.sh	r0,r0[0x0]
80004866:	47 0c       	lddsp	r12,sp[0x1c0]
80004868:	80 00       	ld.sh	r0,r0[0x0]
8000486a:	27 94       	sub	r4,121

8000486c <main>:

int main(void)
{
8000486c:	eb cd 40 80 	pushm	r7,lr
80004870:	1a 97       	mov	r7,sp
80004872:	20 6d       	sub	sp,24
	pm_freq_param_t System_Clock = {
		    .cpu_f = CPU_HZ,
		    .pba_f = PBA_HZ,
		    .osc0_f = FOSC0,
		    .osc0_startup = OSC0_STARTUP
		};
80004874:	4e 78       	lddpc	r8,80004a10 <main+0x1a4>
80004876:	ee cb 00 18 	sub	r11,r7,24
8000487a:	10 9a       	mov	r10,r8
8000487c:	f4 e8 00 00 	ld.d	r8,r10[0]
80004880:	f6 e9 00 00 	st.d	r11[0],r8
80004884:	f4 e8 00 08 	ld.d	r8,r10[8]
80004888:	f6 e9 00 08 	st.d	r11[8],r8
	pm_configure_clocks(&System_Clock);
8000488c:	ee c8 00 18 	sub	r8,r7,24
80004890:	10 9c       	mov	r12,r8
80004892:	f0 1f 00 61 	mcall	80004a14 <main+0x1a8>

	// Initialize the debug USART module.
	init_dbg_rs232(PBA_HZ);
80004896:	e0 6c c5 20 	mov	r12,50464
8000489a:	ea 1c 00 fb 	orh	r12,0xfb
8000489e:	f0 1f 00 5f 	mcall	80004a18 <main+0x1ac>

	//SDRAM address
	// Initialize the external SDRAM chip.
	sdramc_init(CPU_HZ);
800048a2:	e0 6c 14 80 	mov	r12,5248
800048a6:	ea 1c 03 ef 	orh	r12,0x3ef
800048aa:	f0 1f 00 5d 	mcall	80004a1c <main+0x1b0>
	print_dbg("\nSDRAM initialized");
800048ae:	4d dc       	lddpc	r12,80004a20 <main+0x1b4>
800048b0:	f0 1f 00 5d 	mcall	80004a24 <main+0x1b8>
	//for detail, see SDRAM example

	// Setting EBI slave to have fixed default master
	AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_EBI].defmstr_type=AVR32_HMATRIX_DEFMSTR_TYPE_FIXED_DEFAULT;
800048b4:	fe 6a 10 00 	mov	r10,-126976
800048b8:	75 58       	ld.w	r8,r10[0x54]
800048ba:	30 29       	mov	r9,2
800048bc:	f1 d9 d2 02 	bfins	r8,r9,0x10,0x2
800048c0:	f5 48 00 54 	st.w	r10[84],r8

	//Setting EBI slave to have PDCA as a master
	AVR32_HMATRIX.SCFG[AVR32_HMATRIX_SLAVE_EBI].fixed_defmstr=AVR32_HMATRIX_MASTER_PDCA;
800048c4:	fe 6a 10 00 	mov	r10,-126976
800048c8:	75 58       	ld.w	r8,r10[0x54]
800048ca:	30 39       	mov	r9,3
800048cc:	f1 d9 d2 44 	bfins	r8,r9,0x12,0x4
800048d0:	f5 48 00 54 	st.w	r10[84],r8


	// Initialize Interrupt Controller
	  INTC_init_interrupts();
800048d4:	f0 1f 00 55 	mcall	80004a28 <main+0x1bc>

	  // Enable all interrupts.
	   Enable_global_interrupt();
800048d8:	d5 03       	csrf	0x10

	// Initialize SD/MMC driver resources: GPIO, SPI and SD/MMC.
	   sd_mmc_resources_init();
800048da:	f0 1f 00 55 	mcall	80004a2c <main+0x1c0>

	// Wait for a card to be inserted
//	  while ( sd_mmc_spi_mem_check() != OK );
	  print_dbg("\nCard detected!");
800048de:	4d 5c       	lddpc	r12,80004a30 <main+0x1c4>
800048e0:	f0 1f 00 51 	mcall	80004a24 <main+0x1b8>

	  // Read Card capacity
	  sd_mmc_spi_get_capacity();
800048e4:	f0 1f 00 54 	mcall	80004a34 <main+0x1c8>
	  print_dbg("Capacity = ");
800048e8:	4d 4c       	lddpc	r12,80004a38 <main+0x1cc>
800048ea:	f0 1f 00 4f 	mcall	80004a24 <main+0x1b8>
	  print_dbg_ulong(capacity >> 20);
800048ee:	4d 48       	lddpc	r8,80004a3c <main+0x1d0>
800048f0:	70 08       	ld.w	r8,r8[0x0]
800048f2:	b5 88       	lsr	r8,0x14
800048f4:	10 9c       	mov	r12,r8
800048f6:	f0 1f 00 53 	mcall	80004a40 <main+0x1d4>
	  print_dbg(" MBytes");
800048fa:	4d 3c       	lddpc	r12,80004a44 <main+0x1d8>
800048fc:	f0 1f 00 4a 	mcall	80004a24 <main+0x1b8>

	  // Initialize PDCA controller before starting a transfer
	  local_pdca_init();
80004900:	f0 1f 00 52 	mcall	80004a48 <main+0x1dc>
	  print_dbg("\nPDCA initialized");
80004904:	4d 2c       	lddpc	r12,80004a4c <main+0x1e0>
80004906:	f0 1f 00 48 	mcall	80004a24 <main+0x1b8>
	  /*Pre-write the following dummy data into the whole 32MB SDRAM:
	  Data byte sequence start from 0x00 increment to 0xFF and repeat again.
	  */
	  gpio_clr_gpio_pin(LED1_GPIO);
8000490a:	33 cc       	mov	r12,60
8000490c:	f0 1f 00 51 	mcall	80004a50 <main+0x1e4>

	  U32 i;
      U8 j;
	  for (i = 0, j = 0; i < SDRAM_SIZE; i++)
80004910:	30 08       	mov	r8,0
80004912:	ef 48 ff f8 	st.w	r7[-8],r8
80004916:	30 08       	mov	r8,0
80004918:	ef 68 ff ff 	st.b	r7[-1],r8
8000491c:	c1 38       	rjmp	80004942 <main+0xd6>
	  {
	      sdram[i] = j;
8000491e:	4c e8       	lddpc	r8,80004a54 <main+0x1e8>
80004920:	70 09       	ld.w	r9,r8[0x0]
80004922:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004926:	10 09       	add	r9,r8
80004928:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000492c:	b2 88       	st.b	r9[0x0],r8
	      j++;
8000492e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004932:	2f f8       	sub	r8,-1
80004934:	ef 68 ff ff 	st.b	r7[-1],r8
	  */
	  gpio_clr_gpio_pin(LED1_GPIO);

	  U32 i;
      U8 j;
	  for (i = 0, j = 0; i < SDRAM_SIZE; i++)
80004938:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000493c:	2f f8       	sub	r8,-1
8000493e:	ef 48 ff f8 	st.w	r7[-8],r8
80004942:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004946:	e0 69 ff ff 	mov	r9,65535
8000494a:	ea 19 01 ff 	orh	r9,0x1ff
8000494e:	12 38       	cp.w	r8,r9
80004950:	fe 98 ff e7 	brls	8000491e <main+0xb2>
	  {
	      sdram[i] = j;
	      j++;

	   }
	  gpio_clr_gpio_pin(LED3_GPIO);
80004954:	33 ec       	mov	r12,62
80004956:	f0 1f 00 3f 	mcall	80004a50 <main+0x1e4>
	  print_dbg("prewrite SDRAM done!!");
8000495a:	4c 0c       	lddpc	r12,80004a58 <main+0x1ec>
8000495c:	f0 1f 00 32 	mcall	80004a24 <main+0x1b8>

	  end_of_transfer = FALSE;
80004960:	4b f8       	lddpc	r8,80004a5c <main+0x1f0>
80004962:	30 09       	mov	r9,0
80004964:	b0 89       	st.b	r8[0x0],r9
	  for(i = 1; i <=SDRAM_SIZE/SECTOR_SIZE; i++)
80004966:	30 18       	mov	r8,1
80004968:	ef 48 ff f8 	st.w	r7[-8],r8
8000496c:	c4 48       	rjmp	800049f4 <main+0x188>
	  {
	     pdca_load_channel( AVR32_PDCA_CHANNEL_SPI_TX,(void *)sdram,512);
8000496e:	4b a8       	lddpc	r8,80004a54 <main+0x1e8>
80004970:	70 08       	ld.w	r8,r8[0x0]
80004972:	e0 6a 02 00 	mov	r10,512
80004976:	10 9b       	mov	r11,r8
80004978:	30 1c       	mov	r12,1
8000497a:	f0 1f 00 3a 	mcall	80004a60 <main+0x1f4>

	     // open sector number j
	     if(sd_mmc_spi_write_open_PDCA (i) == OK)
8000497e:	ee fc ff f8 	ld.w	r12,r7[-8]
80004982:	f0 1f 00 39 	mcall	80004a64 <main+0x1f8>
80004986:	18 98       	mov	r8,r12
80004988:	10 99       	mov	r9,r8
8000498a:	30 18       	mov	r8,1
8000498c:	f0 09 18 00 	cp.b	r9,r8
80004990:	c2 a1       	brne	800049e4 <main+0x178>
	     {
	    	 print_dbg("\n 512 Bytes of Transfer Number ");
80004992:	4b 6c       	lddpc	r12,80004a68 <main+0x1fc>
80004994:	f0 1f 00 24 	mcall	80004a24 <main+0x1b8>
	    	 print_dbg_ulong(i);
80004998:	ee fc ff f8 	ld.w	r12,r7[-8]
8000499c:	f0 1f 00 29 	mcall	80004a40 <main+0x1d4>
	    	// print_dbg(" :\n");
	    	 //print_dbg("at first remaining size:");
	    	// print_dbg_ulong(pdca_get_load_size(AVR32_PDCA_CHANNEL_SPI_TX)) ;
	       //spi_write(SD_MMC_SPI,0x11);
	        pdca_enable_interrupt_transfer_complete(AVR32_PDCA_CHANNEL_SPI_TX);
800049a0:	30 1c       	mov	r12,1
800049a2:	f0 1f 00 33 	mcall	80004a6c <main+0x200>
	      // pdca_channelrx =(volatile avr32_pdca_channel_t*) pdca_get_handler(AVR32_PDCA_CHANNEL_SPI_RX); // get the correct PDCA channel pointer
	        pdca_channeltx =(volatile avr32_pdca_channel_t*)pdca_get_handler(AVR32_PDCA_CHANNEL_SPI_TX); // get the correct PDCA channel pointer
800049a6:	30 1c       	mov	r12,1
800049a8:	f0 1f 00 32 	mcall	80004a70 <main+0x204>
800049ac:	18 99       	mov	r9,r12
800049ae:	4b 28       	lddpc	r8,80004a74 <main+0x208>
800049b0:	91 09       	st.w	r8[0x0],r9
	      // pdca_channelrx->cr = AVR32_PDCA_TEN_MASK; // Enable RX PDCA transfer first
	       pdca_channeltx->cr = AVR32_PDCA_TEN_MASK; // and TX PDCA transfer
800049b2:	4b 18       	lddpc	r8,80004a74 <main+0x208>
800049b4:	70 09       	ld.w	r9,r8[0x0]
800049b6:	30 18       	mov	r8,1
800049b8:	93 58       	st.w	r9[0x14],r8
	       print_dbg("/");
800049ba:	4b 0c       	lddpc	r12,80004a78 <main+0x20c>
800049bc:	f0 1f 00 1a 	mcall	80004a24 <main+0x1b8>
	       print_dbg_ulong(pdca_get_load_size(AVR32_PDCA_CHANNEL_SPI_TX)) ;
800049c0:	30 1c       	mov	r12,1
800049c2:	f0 1f 00 2f 	mcall	80004a7c <main+0x210>
800049c6:	18 98       	mov	r8,r12
800049c8:	10 9c       	mov	r12,r8
800049ca:	f0 1f 00 1e 	mcall	80004a40 <main+0x1d4>

	      // U32 status=pdca_get_channel_status(AVR32_PDCA_CHANNEL_SPI_TX);
	       //print_dbg("channel status:");
	      // print_dbg_ulong(status);

	       while(!end_of_transfer)
800049ce:	4a 48       	lddpc	r8,80004a5c <main+0x1f0>
800049d0:	11 88       	ld.ub	r8,r8[0x0]
800049d2:	5c 58       	castu.b	r8
800049d4:	cf d0       	breq	800049ce <main+0x162>
	       {

	       }
	       sdram+=512;
800049d6:	4a 08       	lddpc	r8,80004a54 <main+0x1e8>
800049d8:	70 08       	ld.w	r8,r8[0x0]
800049da:	f0 c9 fe 00 	sub	r9,r8,-512
800049de:	49 e8       	lddpc	r8,80004a54 <main+0x1e8>
800049e0:	91 09       	st.w	r8[0x0],r9
800049e2:	c0 48       	rjmp	800049ea <main+0x17e>

	     }
	     else
	     {
	       print_dbg("\n! Unable to open memory \n");
800049e4:	4a 7c       	lddpc	r12,80004a80 <main+0x214>
800049e6:	f0 1f 00 10 	mcall	80004a24 <main+0x1b8>
	   }
	  gpio_clr_gpio_pin(LED3_GPIO);
	  print_dbg("prewrite SDRAM done!!");

	  end_of_transfer = FALSE;
	  for(i = 1; i <=SDRAM_SIZE/SECTOR_SIZE; i++)
800049ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049ee:	2f f8       	sub	r8,-1
800049f0:	ef 48 ff f8 	st.w	r7[-8],r8
800049f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049f8:	e0 58 00 00 	cp.w	r8,65536
800049fc:	fe 98 ff b9 	brls	8000496e <main+0x102>
	     {
	       print_dbg("\n! Unable to open memory \n");
	     }
	   }

	  print_dbg("\nEnd of the lab2.\n");
80004a00:	4a 1c       	lddpc	r12,80004a84 <main+0x218>
80004a02:	f0 1f 00 09 	mcall	80004a24 <main+0x1b8>

	  while(1){
		  gpio_clr_gpio_pin(LED5_GPIO);
80004a06:	33 4c       	mov	r12,52
80004a08:	f0 1f 00 12 	mcall	80004a50 <main+0x1e4>
80004a0c:	cf db       	rjmp	80004a06 <main+0x19a>
80004a0e:	00 00       	add	r0,r0
80004a10:	80 00       	ld.sh	r0,r0[0x0]
80004a12:	59 24       	cp.w	r4,18
80004a14:	80 00       	ld.sh	r0,r0[0x0]
80004a16:	2c 98       	sub	r8,-55
80004a18:	80 00       	ld.sh	r0,r0[0x0]
80004a1a:	40 28       	lddsp	r8,sp[0x8]
80004a1c:	80 00       	ld.sh	r0,r0[0x0]
80004a1e:	30 70       	mov	r0,7
80004a20:	80 00       	ld.sh	r0,r0[0x0]
80004a22:	46 28       	lddsp	r8,sp[0x188]
80004a24:	80 00       	ld.sh	r0,r0[0x0]
80004a26:	40 a8       	lddsp	r8,sp[0x28]
80004a28:	80 00       	ld.sh	r0,r0[0x0]
80004a2a:	26 f0       	sub	r0,111
80004a2c:	80 00       	ld.sh	r0,r0[0x0]
80004a2e:	47 78       	lddsp	r8,sp[0x1dc]
80004a30:	80 00       	ld.sh	r0,r0[0x0]
80004a32:	46 3c       	lddsp	r12,sp[0x18c]
80004a34:	80 00       	ld.sh	r0,r0[0x0]
80004a36:	3a bc       	mov	r12,-85
80004a38:	80 00       	ld.sh	r0,r0[0x0]
80004a3a:	46 4c       	lddsp	r12,sp[0x190]
80004a3c:	00 00       	add	r0,r0
80004a3e:	08 6c       	and	r12,r4
80004a40:	80 00       	ld.sh	r0,r0[0x0]
80004a42:	40 cc       	lddsp	r12,sp[0x30]
80004a44:	80 00       	ld.sh	r0,r0[0x0]
80004a46:	46 58       	lddsp	r8,sp[0x194]
80004a48:	80 00       	ld.sh	r0,r0[0x0]
80004a4a:	48 10       	lddpc	r0,80004a4c <main+0x1e0>
80004a4c:	80 00       	ld.sh	r0,r0[0x0]
80004a4e:	46 60       	lddsp	r0,sp[0x198]
80004a50:	80 00       	ld.sh	r0,r0[0x0]
80004a52:	3f be       	mov	lr,-5
80004a54:	00 00       	add	r0,r0
80004a56:	00 28       	rsub	r8,r0
80004a58:	80 00       	ld.sh	r0,r0[0x0]
80004a5a:	46 74       	lddsp	r4,sp[0x19c]
80004a5c:	00 00       	add	r0,r0
80004a5e:	08 90       	mov	r0,r4
80004a60:	80 00       	ld.sh	r0,r0[0x0]
80004a62:	34 68       	mov	r8,70
80004a64:	80 00       	ld.sh	r0,r0[0x0]
80004a66:	3c 98       	mov	r8,-55
80004a68:	80 00       	ld.sh	r0,r0[0x0]
80004a6a:	46 8c       	lddsp	r12,sp[0x1a0]
80004a6c:	80 00       	ld.sh	r0,r0[0x0]
80004a6e:	35 40       	mov	r0,84
80004a70:	80 00       	ld.sh	r0,r0[0x0]
80004a72:	33 04       	mov	r4,48
80004a74:	00 00       	add	r0,r0
80004a76:	08 94       	mov	r4,r4
80004a78:	80 00       	ld.sh	r0,r0[0x0]
80004a7a:	46 ac       	lddsp	r12,sp[0x1a8]
80004a7c:	80 00       	ld.sh	r0,r0[0x0]
80004a7e:	34 3c       	mov	r12,67
80004a80:	80 00       	ld.sh	r0,r0[0x0]
80004a82:	46 b0       	lddsp	r0,sp[0x1ac]
80004a84:	80 00       	ld.sh	r0,r0[0x0]
80004a86:	46 cc       	lddsp	r12,sp[0x1b0]

80004a88 <_init_startup>:
80004a88:	eb cd 40 80 	pushm	r7,lr
80004a8c:	1a 97       	mov	r7,sp
80004a8e:	20 2d       	sub	sp,8
80004a90:	e0 6c 01 04 	mov	r12,260
80004a94:	f0 1f 00 0c 	mcall	80004ac4 <_init_startup+0x3c>
80004a98:	18 98       	mov	r8,r12
80004a9a:	ef 48 ff fc 	st.w	r7[-4],r8
80004a9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004aa2:	58 08       	cp.w	r8,0
80004aa4:	c0 a0       	breq	80004ab8 <_init_startup+0x30>
80004aa6:	ee fb ff fc 	ld.w	r11,r7[-4]
80004aaa:	48 8c       	lddpc	r12,80004ac8 <_init_startup+0x40>
80004aac:	f0 1f 00 08 	mcall	80004acc <_init_startup+0x44>
80004ab0:	30 18       	mov	r8,1
80004ab2:	ef 48 ff f8 	st.w	r7[-8],r8
80004ab6:	c0 28       	rjmp	80004aba <_init_startup+0x32>
80004ab8:	c0 08       	rjmp	80004ab8 <_init_startup+0x30>
80004aba:	ee fc ff f8 	ld.w	r12,r7[-8]
80004abe:	2f ed       	sub	sp,-8
80004ac0:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ac4:	80 00       	ld.sh	r0,r0[0x0]
80004ac6:	4c 54       	lddpc	r4,80004bd8 <init_exceptions+0x64>
80004ac8:	80 00       	ld.sh	r0,r0[0x0]
80004aca:	56 00       	stdsp	sp[0x180],r0
80004acc:	80 00       	ld.sh	r0,r0[0x0]
80004ace:	4b 74       	lddpc	r4,80004ba8 <init_exceptions+0x34>

80004ad0 <_sbrk>:
80004ad0:	eb cd 40 80 	pushm	r7,lr
80004ad4:	1a 97       	mov	r7,sp
80004ad6:	20 3d       	sub	sp,12
80004ad8:	ef 4c ff f8 	st.w	r7[-8],r12
80004adc:	49 78       	lddpc	r8,80004b38 <_sbrk+0x68>
80004ade:	70 08       	ld.w	r8,r8[0x0]
80004ae0:	58 08       	cp.w	r8,0
80004ae2:	c0 41       	brne	80004aea <_sbrk+0x1a>
80004ae4:	49 59       	lddpc	r9,80004b38 <_sbrk+0x68>
80004ae6:	49 68       	lddpc	r8,80004b3c <_sbrk+0x6c>
80004ae8:	93 08       	st.w	r9[0x0],r8
80004aea:	49 48       	lddpc	r8,80004b38 <_sbrk+0x68>
80004aec:	70 09       	ld.w	r9,r8[0x0]
80004aee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004af2:	10 09       	add	r9,r8
80004af4:	49 38       	lddpc	r8,80004b40 <_sbrk+0x70>
80004af6:	10 39       	cp.w	r9,r8
80004af8:	e0 8b 00 12 	brhi	80004b1c <_sbrk+0x4c>
80004afc:	48 f8       	lddpc	r8,80004b38 <_sbrk+0x68>
80004afe:	70 08       	ld.w	r8,r8[0x0]
80004b00:	ef 48 ff fc 	st.w	r7[-4],r8
80004b04:	48 d8       	lddpc	r8,80004b38 <_sbrk+0x68>
80004b06:	70 09       	ld.w	r9,r8[0x0]
80004b08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b0c:	10 09       	add	r9,r8
80004b0e:	48 b8       	lddpc	r8,80004b38 <_sbrk+0x68>
80004b10:	91 09       	st.w	r8[0x0],r9
80004b12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b16:	ef 48 ff f4 	st.w	r7[-12],r8
80004b1a:	c0 98       	rjmp	80004b2c <_sbrk+0x5c>
80004b1c:	f0 1f 00 0a 	mcall	80004b44 <_sbrk+0x74>
80004b20:	18 99       	mov	r9,r12
80004b22:	30 c8       	mov	r8,12
80004b24:	93 08       	st.w	r9[0x0],r8
80004b26:	3f f8       	mov	r8,-1
80004b28:	ef 48 ff f4 	st.w	r7[-12],r8
80004b2c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b30:	10 9c       	mov	r12,r8
80004b32:	2f dd       	sub	sp,-12
80004b34:	e3 cd 80 80 	ldm	sp++,r7,pc
80004b38:	00 00       	add	r0,r0
80004b3a:	06 2c       	rsub	r12,r3
80004b3c:	00 00       	add	r0,r0
80004b3e:	08 a0       	st.w	r4++,r0
80004b40:	00 00       	add	r0,r0
80004b42:	f0 00       	*unknown*
80004b44:	80 00       	ld.sh	r0,r0[0x0]
80004b46:	4c 08       	lddpc	r8,80004c44 <free+0x8>

80004b48 <_init_argv>:
80004b48:	eb cd 40 80 	pushm	r7,lr
80004b4c:	1a 97       	mov	r7,sp
80004b4e:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b52 <_exit>:
80004b52:	eb cd 40 80 	pushm	r7,lr
80004b56:	1a 97       	mov	r7,sp
80004b58:	20 1d       	sub	sp,4
80004b5a:	ef 4c ff fc 	st.w	r7[-4],r12
80004b5e:	c0 08       	rjmp	80004b5e <_exit+0xc>

80004b60 <unhandled_exception>:
80004b60:	eb cd 40 80 	pushm	r7,lr
80004b64:	1a 97       	mov	r7,sp
80004b66:	20 2d       	sub	sp,8
80004b68:	ef 4c ff fc 	st.w	r7[-4],r12
80004b6c:	ef 4b ff f8 	st.w	r7[-8],r11
80004b70:	c0 08       	rjmp	80004b70 <unhandled_exception+0x10>
80004b72:	d7 03       	nop

80004b74 <init_exceptions>:
80004b74:	eb cd 40 80 	pushm	r7,lr
80004b78:	1a 97       	mov	r7,sp
80004b7a:	20 5d       	sub	sp,20
80004b7c:	ef 4c ff f0 	st.w	r7[-16],r12
80004b80:	ef 4b ff ec 	st.w	r7[-20],r11
80004b84:	34 18       	mov	r8,65
80004b86:	ef 48 ff f8 	st.w	r7[-8],r8
80004b8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004b8e:	e3 b8 00 01 	mtsr	0x4,r8
80004b92:	e1 b8 00 00 	mfsr	r8,0x0
80004b96:	ef 48 ff f4 	st.w	r7[-12],r8
80004b9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b9e:	e0 18 ff ea 	andl	r8,0xffea
80004ba2:	ef 48 ff f4 	st.w	r7[-12],r8
80004ba6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004baa:	e3 b8 00 00 	mtsr	0x0,r8
80004bae:	ee f9 ff ec 	ld.w	r9,r7[-20]
80004bb2:	48 f8       	lddpc	r8,80004bec <init_exceptions+0x78>
80004bb4:	91 09       	st.w	r8[0x0],r9
80004bb6:	30 08       	mov	r8,0
80004bb8:	ef 48 ff fc 	st.w	r7[-4],r8
80004bbc:	c0 f8       	rjmp	80004bda <init_exceptions+0x66>
80004bbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bc2:	a3 68       	lsl	r8,0x2
80004bc4:	10 99       	mov	r9,r8
80004bc6:	48 a8       	lddpc	r8,80004bec <init_exceptions+0x78>
80004bc8:	70 08       	ld.w	r8,r8[0x0]
80004bca:	10 09       	add	r9,r8
80004bcc:	48 98       	lddpc	r8,80004bf0 <init_exceptions+0x7c>
80004bce:	93 08       	st.w	r9[0x0],r8
80004bd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bd4:	2f f8       	sub	r8,-1
80004bd6:	ef 48 ff fc 	st.w	r7[-4],r8
80004bda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004bde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004be2:	10 39       	cp.w	r9,r8
80004be4:	ce d5       	brlt	80004bbe <init_exceptions+0x4a>
80004be6:	2f bd       	sub	sp,-20
80004be8:	e3 cd 80 80 	ldm	sp++,r7,pc
80004bec:	00 00       	add	r0,r0
80004bee:	06 30       	cp.w	r0,r3
80004bf0:	80 00       	ld.sh	r0,r0[0x0]
80004bf2:	4b 60       	lddpc	r0,80004cc8 <_malloc_r+0x5c>

80004bf4 <atexit>:
80004bf4:	d4 01       	pushm	lr
80004bf6:	30 09       	mov	r9,0
80004bf8:	18 9b       	mov	r11,r12
80004bfa:	12 9a       	mov	r10,r9
80004bfc:	12 9c       	mov	r12,r9
80004bfe:	f0 1f 00 02 	mcall	80004c04 <atexit+0x10>
80004c02:	d8 02       	popm	pc
80004c04:	80 00       	ld.sh	r0,r0[0x0]
80004c06:	51 18       	stdsp	sp[0x44],r8

80004c08 <__errno>:
80004c08:	48 28       	lddpc	r8,80004c10 <__errno+0x8>
80004c0a:	70 0c       	ld.w	r12,r8[0x0]
80004c0c:	2f 4c       	sub	r12,-12
80004c0e:	5e fc       	retal	r12
80004c10:	00 00       	add	r0,r0
80004c12:	01 1c       	ld.sh	r12,r0++

80004c14 <exit>:
80004c14:	d4 21       	pushm	r4-r7,lr
80004c16:	30 0b       	mov	r11,0
80004c18:	18 97       	mov	r7,r12
80004c1a:	f0 1f 00 06 	mcall	80004c30 <exit+0x1c>
80004c1e:	48 68       	lddpc	r8,80004c34 <exit+0x20>
80004c20:	70 0c       	ld.w	r12,r8[0x0]
80004c22:	78 a9       	ld.w	r9,r12[0x28]
80004c24:	58 09       	cp.w	r9,0
80004c26:	c0 20       	breq	80004c2a <exit+0x16>
80004c28:	5d 19       	icall	r9
80004c2a:	0e 9c       	mov	r12,r7
80004c2c:	f0 1f 00 03 	mcall	80004c38 <exit+0x24>
80004c30:	80 00       	ld.sh	r0,r0[0x0]
80004c32:	51 c4       	stdsp	sp[0x70],r4
80004c34:	80 00       	ld.sh	r0,r0[0x0]
80004c36:	59 38       	cp.w	r8,19
80004c38:	80 00       	ld.sh	r0,r0[0x0]
80004c3a:	4b 52       	lddpc	r2,80004d0c <_malloc_r+0xa0>

80004c3c <free>:
80004c3c:	d4 01       	pushm	lr
80004c3e:	48 48       	lddpc	r8,80004c4c <free+0x10>
80004c40:	18 9b       	mov	r11,r12
80004c42:	70 0c       	ld.w	r12,r8[0x0]
80004c44:	f0 1f 00 03 	mcall	80004c50 <free+0x14>
80004c48:	d8 02       	popm	pc
80004c4a:	00 00       	add	r0,r0
80004c4c:	00 00       	add	r0,r0
80004c4e:	01 1c       	ld.sh	r12,r0++
80004c50:	80 00       	ld.sh	r0,r0[0x0]
80004c52:	53 44       	stdsp	sp[0xd0],r4

80004c54 <malloc>:
80004c54:	d4 01       	pushm	lr
80004c56:	48 48       	lddpc	r8,80004c64 <malloc+0x10>
80004c58:	18 9b       	mov	r11,r12
80004c5a:	70 0c       	ld.w	r12,r8[0x0]
80004c5c:	f0 1f 00 03 	mcall	80004c68 <malloc+0x14>
80004c60:	d8 02       	popm	pc
80004c62:	00 00       	add	r0,r0
80004c64:	00 00       	add	r0,r0
80004c66:	01 1c       	ld.sh	r12,r0++
80004c68:	80 00       	ld.sh	r0,r0[0x0]
80004c6a:	4c 6c       	lddpc	r12,80004d80 <_malloc_r+0x114>

80004c6c <_malloc_r>:
80004c6c:	d4 31       	pushm	r0-r7,lr
80004c6e:	f6 c8 ff f5 	sub	r8,r11,-11
80004c72:	18 92       	mov	r2,r12
80004c74:	59 68       	cp.w	r8,22
80004c76:	f9 b5 08 10 	movls	r5,16
80004c7a:	f9 b9 0b f8 	movhi	r9,-8
80004c7e:	f1 d9 eb 25 	andhi	r5,r8,r9
80004c82:	16 35       	cp.w	r5,r11
80004c84:	5f 38       	srlo	r8
80004c86:	f1 e5 13 f8 	or	r8,r8,r5>>0x1f
80004c8a:	c0 50       	breq	80004c94 <_malloc_r+0x28>
80004c8c:	30 c8       	mov	r8,12
80004c8e:	99 38       	st.w	r12[0xc],r8
80004c90:	e0 8f 02 0b 	bral	800050a6 <_malloc_r+0x43a>
80004c94:	f0 1f 00 53 	mcall	80004de0 <_malloc_r+0x174>
80004c98:	e0 45 01 f7 	cp.w	r5,503
80004c9c:	e0 8b 00 1a 	brhi	80004cd0 <_malloc_r+0x64>
80004ca0:	ea 09 16 03 	lsr	r9,r5,0x3
80004ca4:	4d 08       	lddpc	r8,80004de4 <_malloc_r+0x178>
80004ca6:	f0 09 00 38 	add	r8,r8,r9<<0x3
80004caa:	70 36       	ld.w	r6,r8[0xc]
80004cac:	10 36       	cp.w	r6,r8
80004cae:	c0 61       	brne	80004cba <_malloc_r+0x4e>
80004cb0:	ec c8 ff f8 	sub	r8,r6,-8
80004cb4:	70 36       	ld.w	r6,r8[0xc]
80004cb6:	10 36       	cp.w	r6,r8
80004cb8:	c0 90       	breq	80004cca <_malloc_r+0x5e>
80004cba:	6c 19       	ld.w	r9,r6[0x4]
80004cbc:	04 9c       	mov	r12,r2
80004cbe:	e0 19 ff fc 	andl	r9,0xfffc
80004cc2:	6c 3a       	ld.w	r10,r6[0xc]
80004cc4:	ec 09 00 09 	add	r9,r6,r9
80004cc8:	c4 88       	rjmp	80004d58 <_malloc_r+0xec>
80004cca:	f2 c7 ff fe 	sub	r7,r9,-2
80004cce:	c5 18       	rjmp	80004d70 <_malloc_r+0x104>
80004cd0:	ea 08 16 09 	lsr	r8,r5,0x9
80004cd4:	c0 41       	brne	80004cdc <_malloc_r+0x70>
80004cd6:	ea 09 16 03 	lsr	r9,r5,0x3
80004cda:	c2 a8       	rjmp	80004d2e <_malloc_r+0xc2>
80004cdc:	58 48       	cp.w	r8,4
80004cde:	e0 8b 00 07 	brhi	80004cec <_malloc_r+0x80>
80004ce2:	ea 08 16 06 	lsr	r8,r5,0x6
80004ce6:	f0 c9 ff c8 	sub	r9,r8,-56
80004cea:	c2 28       	rjmp	80004d2e <_malloc_r+0xc2>
80004cec:	59 48       	cp.w	r8,20
80004cee:	e0 8b 00 05 	brhi	80004cf8 <_malloc_r+0x8c>
80004cf2:	f0 c9 ff a5 	sub	r9,r8,-91
80004cf6:	c1 c8       	rjmp	80004d2e <_malloc_r+0xc2>
80004cf8:	e0 48 00 54 	cp.w	r8,84
80004cfc:	e0 8b 00 07 	brhi	80004d0a <_malloc_r+0x9e>
80004d00:	ea 08 16 0c 	lsr	r8,r5,0xc
80004d04:	f0 c9 ff 92 	sub	r9,r8,-110
80004d08:	c1 38       	rjmp	80004d2e <_malloc_r+0xc2>
80004d0a:	e0 48 01 54 	cp.w	r8,340
80004d0e:	e0 8b 00 07 	brhi	80004d1c <_malloc_r+0xb0>
80004d12:	ea 08 16 0f 	lsr	r8,r5,0xf
80004d16:	f0 c9 ff 89 	sub	r9,r8,-119
80004d1a:	c0 a8       	rjmp	80004d2e <_malloc_r+0xc2>
80004d1c:	ea 09 16 12 	lsr	r9,r5,0x12
80004d20:	e0 48 05 54 	cp.w	r8,1364
80004d24:	e0 88 00 04 	brls	80004d2c <_malloc_r+0xc0>
80004d28:	37 e9       	mov	r9,126
80004d2a:	c0 28       	rjmp	80004d2e <_malloc_r+0xc2>
80004d2c:	28 49       	sub	r9,-124
80004d2e:	4a e8       	lddpc	r8,80004de4 <_malloc_r+0x178>
80004d30:	f0 09 00 3c 	add	r12,r8,r9<<0x3
80004d34:	78 36       	ld.w	r6,r12[0xc]
80004d36:	c1 98       	rjmp	80004d68 <_malloc_r+0xfc>
80004d38:	6c 18       	ld.w	r8,r6[0x4]
80004d3a:	e0 18 ff fc 	andl	r8,0xfffc
80004d3e:	f0 05 01 0b 	sub	r11,r8,r5
80004d42:	58 fb       	cp.w	r11,15
80004d44:	e0 8a 00 04 	brle	80004d4c <_malloc_r+0xe0>
80004d48:	20 19       	sub	r9,1
80004d4a:	c1 18       	rjmp	80004d6c <_malloc_r+0x100>
80004d4c:	6c 3a       	ld.w	r10,r6[0xc]
80004d4e:	58 0b       	cp.w	r11,0
80004d50:	c0 b5       	brlt	80004d66 <_malloc_r+0xfa>
80004d52:	ec 08 00 09 	add	r9,r6,r8
80004d56:	04 9c       	mov	r12,r2
80004d58:	6c 28       	ld.w	r8,r6[0x8]
80004d5a:	95 28       	st.w	r10[0x8],r8
80004d5c:	91 3a       	st.w	r8[0xc],r10
80004d5e:	72 18       	ld.w	r8,r9[0x4]
80004d60:	a1 a8       	sbr	r8,0x0
80004d62:	93 18       	st.w	r9[0x4],r8
80004d64:	cc d8       	rjmp	80004efe <_malloc_r+0x292>
80004d66:	14 96       	mov	r6,r10
80004d68:	18 36       	cp.w	r6,r12
80004d6a:	ce 71       	brne	80004d38 <_malloc_r+0xcc>
80004d6c:	f2 c7 ff ff 	sub	r7,r9,-1
80004d70:	49 db       	lddpc	r11,80004de4 <_malloc_r+0x178>
80004d72:	f6 c4 ff f8 	sub	r4,r11,-8
80004d76:	68 26       	ld.w	r6,r4[0x8]
80004d78:	08 36       	cp.w	r6,r4
80004d7a:	c7 e0       	breq	80004e76 <_malloc_r+0x20a>
80004d7c:	6c 19       	ld.w	r9,r6[0x4]
80004d7e:	e0 19 ff fc 	andl	r9,0xfffc
80004d82:	f2 05 01 08 	sub	r8,r9,r5
80004d86:	58 f8       	cp.w	r8,15
80004d88:	e0 8a 00 0e 	brle	80004da4 <_malloc_r+0x138>
80004d8c:	ec 05 00 09 	add	r9,r6,r5
80004d90:	89 39       	st.w	r4[0xc],r9
80004d92:	89 29       	st.w	r4[0x8],r9
80004d94:	a1 a5       	sbr	r5,0x0
80004d96:	f2 08 09 08 	st.w	r9[r8],r8
80004d9a:	8d 15       	st.w	r6[0x4],r5
80004d9c:	93 24       	st.w	r9[0x8],r4
80004d9e:	93 34       	st.w	r9[0xc],r4
80004da0:	04 9c       	mov	r12,r2
80004da2:	cd fb       	rjmp	80004d60 <_malloc_r+0xf4>
80004da4:	89 34       	st.w	r4[0xc],r4
80004da6:	89 24       	st.w	r4[0x8],r4
80004da8:	58 08       	cp.w	r8,0
80004daa:	c0 55       	brlt	80004db4 <_malloc_r+0x148>
80004dac:	ec 09 00 09 	add	r9,r6,r9
80004db0:	04 9c       	mov	r12,r2
80004db2:	cd 6b       	rjmp	80004d5e <_malloc_r+0xf2>
80004db4:	e0 49 01 ff 	cp.w	r9,511
80004db8:	e0 8b 00 18 	brhi	80004de8 <_malloc_r+0x17c>
80004dbc:	f2 0a 16 03 	lsr	r10,r9,0x3
80004dc0:	f6 0a 00 38 	add	r8,r11,r10<<0x3
80004dc4:	70 29       	ld.w	r9,r8[0x8]
80004dc6:	8d 38       	st.w	r6[0xc],r8
80004dc8:	8d 29       	st.w	r6[0x8],r9
80004dca:	93 36       	st.w	r9[0xc],r6
80004dcc:	91 26       	st.w	r8[0x8],r6
80004dce:	76 19       	ld.w	r9,r11[0x4]
80004dd0:	a3 4a       	asr	r10,0x2
80004dd2:	30 18       	mov	r8,1
80004dd4:	f0 0a 09 48 	lsl	r8,r8,r10
80004dd8:	10 49       	or	r9,r8
80004dda:	97 19       	st.w	r11[0x4],r9
80004ddc:	c4 d8       	rjmp	80004e76 <_malloc_r+0x20a>
80004dde:	00 00       	add	r0,r0
80004de0:	80 00       	ld.sh	r0,r0[0x0]
80004de2:	50 ec       	stdsp	sp[0x38],r12
80004de4:	00 00       	add	r0,r0
80004de6:	01 20       	ld.uh	r0,r0++
80004de8:	f2 0a 16 09 	lsr	r10,r9,0x9
80004dec:	58 4a       	cp.w	r10,4
80004dee:	e0 8b 00 07 	brhi	80004dfc <_malloc_r+0x190>
80004df2:	f2 08 16 06 	lsr	r8,r9,0x6
80004df6:	f0 ca ff c8 	sub	r10,r8,-56
80004dfa:	c2 28       	rjmp	80004e3e <_malloc_r+0x1d2>
80004dfc:	59 4a       	cp.w	r10,20
80004dfe:	e0 8b 00 04 	brhi	80004e06 <_malloc_r+0x19a>
80004e02:	2a 5a       	sub	r10,-91
80004e04:	c1 d8       	rjmp	80004e3e <_malloc_r+0x1d2>
80004e06:	e0 4a 00 54 	cp.w	r10,84
80004e0a:	e0 8b 00 07 	brhi	80004e18 <_malloc_r+0x1ac>
80004e0e:	f2 08 16 0c 	lsr	r8,r9,0xc
80004e12:	f0 ca ff 92 	sub	r10,r8,-110
80004e16:	c1 48       	rjmp	80004e3e <_malloc_r+0x1d2>
80004e18:	e0 4a 01 54 	cp.w	r10,340
80004e1c:	e0 8b 00 07 	brhi	80004e2a <_malloc_r+0x1be>
80004e20:	f2 08 16 0f 	lsr	r8,r9,0xf
80004e24:	f0 ca ff 89 	sub	r10,r8,-119
80004e28:	c0 b8       	rjmp	80004e3e <_malloc_r+0x1d2>
80004e2a:	f2 08 16 12 	lsr	r8,r9,0x12
80004e2e:	e0 4a 05 54 	cp.w	r10,1364
80004e32:	f9 ba 0b 7e 	movhi	r10,126
80004e36:	f9 bb 08 7c 	movls	r11,124
80004e3a:	f1 db e8 0a 	addls	r10,r8,r11
80004e3e:	4c 7e       	lddpc	lr,80004f58 <_malloc_r+0x2ec>
80004e40:	fc 0a 00 3c 	add	r12,lr,r10<<0x3
80004e44:	78 2b       	ld.w	r11,r12[0x8]
80004e46:	18 3b       	cp.w	r11,r12
80004e48:	c0 d1       	brne	80004e62 <_malloc_r+0x1f6>
80004e4a:	a3 4a       	asr	r10,0x2
80004e4c:	30 18       	mov	r8,1
80004e4e:	f0 0a 09 48 	lsl	r8,r8,r10
80004e52:	7c 19       	ld.w	r9,lr[0x4]
80004e54:	10 49       	or	r9,r8
80004e56:	16 98       	mov	r8,r11
80004e58:	9d 19       	st.w	lr[0x4],r9
80004e5a:	c0 a8       	rjmp	80004e6e <_malloc_r+0x202>
80004e5c:	76 2b       	ld.w	r11,r11[0x8]
80004e5e:	18 3b       	cp.w	r11,r12
80004e60:	c0 60       	breq	80004e6c <_malloc_r+0x200>
80004e62:	76 18       	ld.w	r8,r11[0x4]
80004e64:	e0 18 ff fc 	andl	r8,0xfffc
80004e68:	10 39       	cp.w	r9,r8
80004e6a:	cf 93       	brcs	80004e5c <_malloc_r+0x1f0>
80004e6c:	76 38       	ld.w	r8,r11[0xc]
80004e6e:	8d 38       	st.w	r6[0xc],r8
80004e70:	8d 2b       	st.w	r6[0x8],r11
80004e72:	97 36       	st.w	r11[0xc],r6
80004e74:	91 26       	st.w	r8[0x8],r6
80004e76:	ee 09 14 02 	asr	r9,r7,0x2
80004e7a:	30 18       	mov	r8,1
80004e7c:	4b 71       	lddpc	r1,80004f58 <_malloc_r+0x2ec>
80004e7e:	f0 09 09 4b 	lsl	r11,r8,r9
80004e82:	62 19       	ld.w	r9,r1[0x4]
80004e84:	12 3b       	cp.w	r11,r9
80004e86:	e0 8b 00 6d 	brhi	80004f60 <_malloc_r+0x2f4>
80004e8a:	f7 e9 00 08 	and	r8,r11,r9
80004e8e:	c0 d1       	brne	80004ea8 <_malloc_r+0x23c>
80004e90:	0e 98       	mov	r8,r7
80004e92:	a1 7b       	lsl	r11,0x1
80004e94:	e0 18 ff fc 	andl	r8,0xfffc
80004e98:	f0 c7 ff fc 	sub	r7,r8,-4
80004e9c:	c0 38       	rjmp	80004ea2 <_malloc_r+0x236>
80004e9e:	2f c7       	sub	r7,-4
80004ea0:	a1 7b       	lsl	r11,0x1
80004ea2:	f7 e9 00 08 	and	r8,r11,r9
80004ea6:	cf c0       	breq	80004e9e <_malloc_r+0x232>
80004ea8:	e2 07 00 33 	add	r3,r1,r7<<0x3
80004eac:	0e 9c       	mov	r12,r7
80004eae:	06 99       	mov	r9,r3
80004eb0:	72 36       	ld.w	r6,r9[0xc]
80004eb2:	c2 c8       	rjmp	80004f0a <_malloc_r+0x29e>
80004eb4:	6c 18       	ld.w	r8,r6[0x4]
80004eb6:	e0 18 ff fc 	andl	r8,0xfffc
80004eba:	f0 05 01 0e 	sub	lr,r8,r5
80004ebe:	58 fe       	cp.w	lr,15
80004ec0:	e0 8a 00 13 	brle	80004ee6 <_malloc_r+0x27a>
80004ec4:	6c 39       	ld.w	r9,r6[0xc]
80004ec6:	6c 28       	ld.w	r8,r6[0x8]
80004ec8:	93 28       	st.w	r9[0x8],r8
80004eca:	91 39       	st.w	r8[0xc],r9
80004ecc:	ec 05 00 09 	add	r9,r6,r5
80004ed0:	89 39       	st.w	r4[0xc],r9
80004ed2:	89 29       	st.w	r4[0x8],r9
80004ed4:	a1 a5       	sbr	r5,0x0
80004ed6:	f2 0e 09 0e 	st.w	r9[lr],lr
80004eda:	8d 15       	st.w	r6[0x4],r5
80004edc:	93 24       	st.w	r9[0x8],r4
80004ede:	93 34       	st.w	r9[0xc],r4
80004ee0:	04 9c       	mov	r12,r2
80004ee2:	1c 98       	mov	r8,lr
80004ee4:	c3 eb       	rjmp	80004d60 <_malloc_r+0xf4>
80004ee6:	6c 3a       	ld.w	r10,r6[0xc]
80004ee8:	58 0e       	cp.w	lr,0
80004eea:	c0 f5       	brlt	80004f08 <_malloc_r+0x29c>
80004eec:	ec 08 00 08 	add	r8,r6,r8
80004ef0:	04 9c       	mov	r12,r2
80004ef2:	70 19       	ld.w	r9,r8[0x4]
80004ef4:	a1 a9       	sbr	r9,0x0
80004ef6:	91 19       	st.w	r8[0x4],r9
80004ef8:	6c 28       	ld.w	r8,r6[0x8]
80004efa:	95 28       	st.w	r10[0x8],r8
80004efc:	91 3a       	st.w	r8[0xc],r10
80004efe:	f0 1f 00 18 	mcall	80004f5c <_malloc_r+0x2f0>
80004f02:	ec cc ff f8 	sub	r12,r6,-8
80004f06:	d8 32       	popm	r0-r7,pc
80004f08:	14 96       	mov	r6,r10
80004f0a:	12 36       	cp.w	r6,r9
80004f0c:	cd 41       	brne	80004eb4 <_malloc_r+0x248>
80004f0e:	2f fc       	sub	r12,-1
80004f10:	f1 dc c0 02 	bfextu	r8,r12,0x0,0x2
80004f14:	c0 30       	breq	80004f1a <_malloc_r+0x2ae>
80004f16:	2f 89       	sub	r9,-8
80004f18:	cc cb       	rjmp	80004eb0 <_malloc_r+0x244>
80004f1a:	0e 99       	mov	r9,r7
80004f1c:	06 9a       	mov	r10,r3
80004f1e:	f1 d9 c0 02 	bfextu	r8,r9,0x0,0x2
80004f22:	c0 51       	brne	80004f2c <_malloc_r+0x2c0>
80004f24:	62 18       	ld.w	r8,r1[0x4]
80004f26:	16 88       	andn	r8,r11
80004f28:	83 18       	st.w	r1[0x4],r8
80004f2a:	c0 78       	rjmp	80004f38 <_malloc_r+0x2cc>
80004f2c:	f4 c8 00 08 	sub	r8,r10,8
80004f30:	20 19       	sub	r9,1
80004f32:	74 0a       	ld.w	r10,r10[0x0]
80004f34:	10 3a       	cp.w	r10,r8
80004f36:	cf 40       	breq	80004f1e <_malloc_r+0x2b2>
80004f38:	a1 7b       	lsl	r11,0x1
80004f3a:	62 19       	ld.w	r9,r1[0x4]
80004f3c:	12 3b       	cp.w	r11,r9
80004f3e:	e0 8b 00 11 	brhi	80004f60 <_malloc_r+0x2f4>
80004f42:	58 0b       	cp.w	r11,0
80004f44:	c0 e0       	breq	80004f60 <_malloc_r+0x2f4>
80004f46:	18 97       	mov	r7,r12
80004f48:	c0 38       	rjmp	80004f4e <_malloc_r+0x2e2>
80004f4a:	2f c7       	sub	r7,-4
80004f4c:	a1 7b       	lsl	r11,0x1
80004f4e:	f7 e9 00 08 	and	r8,r11,r9
80004f52:	ca b1       	brne	80004ea8 <_malloc_r+0x23c>
80004f54:	cf bb       	rjmp	80004f4a <_malloc_r+0x2de>
80004f56:	00 00       	add	r0,r0
80004f58:	00 00       	add	r0,r0
80004f5a:	01 20       	ld.uh	r0,r0++
80004f5c:	80 00       	ld.sh	r0,r0[0x0]
80004f5e:	50 ee       	stdsp	sp[0x38],lr
80004f60:	62 23       	ld.w	r3,r1[0x8]
80004f62:	66 14       	ld.w	r4,r3[0x4]
80004f64:	e0 14 ff fc 	andl	r4,0xfffc
80004f68:	0a 34       	cp.w	r4,r5
80004f6a:	5f 39       	srlo	r9
80004f6c:	e8 05 01 0a 	sub	r10,r4,r5
80004f70:	58 fa       	cp.w	r10,15
80004f72:	5f a8       	srle	r8
80004f74:	10 49       	or	r9,r8
80004f76:	e0 80 00 a9 	breq	800050c8 <_malloc_r+0x45c>
80004f7a:	4c c8       	lddpc	r8,800050a8 <_malloc_r+0x43c>
80004f7c:	70 08       	ld.w	r8,r8[0x0]
80004f7e:	2f 08       	sub	r8,-16
80004f80:	f0 05 00 07 	add	r7,r8,r5
80004f84:	4c a8       	lddpc	r8,800050ac <_malloc_r+0x440>
80004f86:	70 08       	ld.w	r8,r8[0x0]
80004f88:	5b f8       	cp.w	r8,-1
80004f8a:	f9 b9 01 7f 	movne	r9,127
80004f8e:	ef d9 e1 08 	addne	r8,r7,r9
80004f92:	f9 b9 01 80 	movne	r9,-128
80004f96:	f1 d9 e1 27 	andne	r7,r8,r9
80004f9a:	04 9c       	mov	r12,r2
80004f9c:	0e 9b       	mov	r11,r7
80004f9e:	f0 1f 00 45 	mcall	800050b0 <_malloc_r+0x444>
80004fa2:	18 96       	mov	r6,r12
80004fa4:	5b fc       	cp.w	r12,-1
80004fa6:	c7 10       	breq	80005088 <_malloc_r+0x41c>
80004fa8:	e6 04 00 0a 	add	r10,r3,r4
80004fac:	14 3c       	cp.w	r12,r10
80004fae:	c0 32       	brcc	80004fb4 <_malloc_r+0x348>
80004fb0:	02 33       	cp.w	r3,r1
80004fb2:	c6 b1       	brne	80005088 <_malloc_r+0x41c>
80004fb4:	4c 09       	lddpc	r9,800050b4 <_malloc_r+0x448>
80004fb6:	72 08       	ld.w	r8,r9[0x0]
80004fb8:	ee 08 00 0b 	add	r11,r7,r8
80004fbc:	93 0b       	st.w	r9[0x0],r11
80004fbe:	14 36       	cp.w	r6,r10
80004fc0:	c0 a1       	brne	80004fd4 <_malloc_r+0x368>
80004fc2:	f1 d6 c0 07 	bfextu	r8,r6,0x0,0x7
80004fc6:	c0 71       	brne	80004fd4 <_malloc_r+0x368>
80004fc8:	ee 04 00 08 	add	r8,r7,r4
80004fcc:	62 29       	ld.w	r9,r1[0x8]
80004fce:	a1 a8       	sbr	r8,0x0
80004fd0:	93 18       	st.w	r9[0x4],r8
80004fd2:	c4 f8       	rjmp	80005070 <_malloc_r+0x404>
80004fd4:	4b 69       	lddpc	r9,800050ac <_malloc_r+0x440>
80004fd6:	72 08       	ld.w	r8,r9[0x0]
80004fd8:	5b f8       	cp.w	r8,-1
80004fda:	c0 31       	brne	80004fe0 <_malloc_r+0x374>
80004fdc:	93 06       	st.w	r9[0x0],r6
80004fde:	c0 68       	rjmp	80004fea <_malloc_r+0x37e>
80004fe0:	ec 0b 00 09 	add	r9,r6,r11
80004fe4:	4b 48       	lddpc	r8,800050b4 <_malloc_r+0x448>
80004fe6:	14 19       	sub	r9,r10
80004fe8:	91 09       	st.w	r8[0x0],r9
80004fea:	f3 d6 c0 03 	bfextu	r9,r6,0x0,0x3
80004fee:	f2 08 11 08 	rsub	r8,r9,8
80004ff2:	58 09       	cp.w	r9,0
80004ff4:	f0 09 17 10 	movne	r9,r8
80004ff8:	ed d9 e1 06 	addne	r6,r6,r9
80004ffc:	28 09       	sub	r9,-128
80004ffe:	ec 07 00 08 	add	r8,r6,r7
80005002:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
80005006:	f2 08 01 07 	sub	r7,r9,r8
8000500a:	04 9c       	mov	r12,r2
8000500c:	0e 9b       	mov	r11,r7
8000500e:	f0 1f 00 29 	mcall	800050b0 <_malloc_r+0x444>
80005012:	5b fc       	cp.w	r12,-1
80005014:	ec 0c 17 00 	moveq	r12,r6
80005018:	f9 b7 00 00 	moveq	r7,0
8000501c:	f8 06 01 08 	sub	r8,r12,r6
80005020:	0e 08       	add	r8,r7
80005022:	a1 a8       	sbr	r8,0x0
80005024:	4a 49       	lddpc	r9,800050b4 <_malloc_r+0x448>
80005026:	8d 18       	st.w	r6[0x4],r8
80005028:	83 26       	st.w	r1[0x8],r6
8000502a:	72 08       	ld.w	r8,r9[0x0]
8000502c:	ee 08 00 08 	add	r8,r7,r8
80005030:	93 08       	st.w	r9[0x0],r8
80005032:	02 33       	cp.w	r3,r1
80005034:	c1 e0       	breq	80005070 <_malloc_r+0x404>
80005036:	58 f4       	cp.w	r4,15
80005038:	e0 8b 00 05 	brhi	80005042 <_malloc_r+0x3d6>
8000503c:	30 18       	mov	r8,1
8000503e:	8d 18       	st.w	r6[0x4],r8
80005040:	c2 48       	rjmp	80005088 <_malloc_r+0x41c>
80005042:	30 5a       	mov	r10,5
80005044:	e8 c9 00 0c 	sub	r9,r4,12
80005048:	e0 19 ff f8 	andl	r9,0xfff8
8000504c:	e6 09 00 08 	add	r8,r3,r9
80005050:	91 2a       	st.w	r8[0x8],r10
80005052:	91 1a       	st.w	r8[0x4],r10
80005054:	66 18       	ld.w	r8,r3[0x4]
80005056:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000505a:	f3 e8 10 08 	or	r8,r9,r8
8000505e:	87 18       	st.w	r3[0x4],r8
80005060:	58 f9       	cp.w	r9,15
80005062:	e0 88 00 07 	brls	80005070 <_malloc_r+0x404>
80005066:	e6 cb ff f8 	sub	r11,r3,-8
8000506a:	04 9c       	mov	r12,r2
8000506c:	f0 1f 00 13 	mcall	800050b8 <_malloc_r+0x44c>
80005070:	49 18       	lddpc	r8,800050b4 <_malloc_r+0x448>
80005072:	49 3a       	lddpc	r10,800050bc <_malloc_r+0x450>
80005074:	70 09       	ld.w	r9,r8[0x0]
80005076:	74 08       	ld.w	r8,r10[0x0]
80005078:	10 39       	cp.w	r9,r8
8000507a:	f5 f9 ba 00 	st.whi	r10[0x0],r9
8000507e:	49 1a       	lddpc	r10,800050c0 <_malloc_r+0x454>
80005080:	74 08       	ld.w	r8,r10[0x0]
80005082:	10 39       	cp.w	r9,r8
80005084:	f5 f9 ba 00 	st.whi	r10[0x0],r9
80005088:	62 28       	ld.w	r8,r1[0x8]
8000508a:	70 18       	ld.w	r8,r8[0x4]
8000508c:	e0 18 ff fc 	andl	r8,0xfffc
80005090:	0a 38       	cp.w	r8,r5
80005092:	5f 39       	srlo	r9
80005094:	f0 05 01 0a 	sub	r10,r8,r5
80005098:	58 fa       	cp.w	r10,15
8000509a:	5f a8       	srle	r8
8000509c:	10 49       	or	r9,r8
8000509e:	c1 50       	breq	800050c8 <_malloc_r+0x45c>
800050a0:	04 9c       	mov	r12,r2
800050a2:	f0 1f 00 09 	mcall	800050c4 <_malloc_r+0x458>
800050a6:	d8 3a       	popm	r0-r7,pc,r12=0
800050a8:	00 00       	add	r0,r0
800050aa:	06 3c       	cp.w	r12,r3
800050ac:	00 00       	add	r0,r0
800050ae:	05 2c       	ld.uh	r12,r2++
800050b0:	80 00       	ld.sh	r0,r0[0x0]
800050b2:	50 f0       	stdsp	sp[0x3c],r0
800050b4:	00 00       	add	r0,r0
800050b6:	06 40       	or	r0,r3
800050b8:	80 00       	ld.sh	r0,r0[0x0]
800050ba:	53 44       	stdsp	sp[0xd0],r4
800050bc:	00 00       	add	r0,r0
800050be:	06 38       	cp.w	r8,r3
800050c0:	00 00       	add	r0,r0
800050c2:	06 34       	cp.w	r4,r3
800050c4:	80 00       	ld.sh	r0,r0[0x0]
800050c6:	50 ee       	stdsp	sp[0x38],lr
800050c8:	0a 98       	mov	r8,r5
800050ca:	a1 a8       	sbr	r8,0x0
800050cc:	62 26       	ld.w	r6,r1[0x8]
800050ce:	a1 aa       	sbr	r10,0x0
800050d0:	8d 18       	st.w	r6[0x4],r8
800050d2:	ec 05 00 08 	add	r8,r6,r5
800050d6:	04 9c       	mov	r12,r2
800050d8:	83 28       	st.w	r1[0x8],r8
800050da:	91 1a       	st.w	r8[0x4],r10
800050dc:	f0 1f 00 03 	mcall	800050e8 <_malloc_r+0x47c>
800050e0:	ec cc ff f8 	sub	r12,r6,-8
800050e4:	d8 32       	popm	r0-r7,pc
800050e6:	00 00       	add	r0,r0
800050e8:	80 00       	ld.sh	r0,r0[0x0]
800050ea:	50 ee       	stdsp	sp[0x38],lr

800050ec <__malloc_lock>:
800050ec:	5e fc       	retal	r12

800050ee <__malloc_unlock>:
800050ee:	5e fc       	retal	r12

800050f0 <_sbrk_r>:
800050f0:	d4 21       	pushm	r4-r7,lr
800050f2:	30 08       	mov	r8,0
800050f4:	18 96       	mov	r6,r12
800050f6:	48 77       	lddpc	r7,80005110 <_sbrk_r+0x20>
800050f8:	16 9c       	mov	r12,r11
800050fa:	8f 08       	st.w	r7[0x0],r8
800050fc:	f0 1f 00 06 	mcall	80005114 <_sbrk_r+0x24>
80005100:	5b fc       	cp.w	r12,-1
80005102:	c0 51       	brne	8000510c <_sbrk_r+0x1c>
80005104:	6e 08       	ld.w	r8,r7[0x0]
80005106:	58 08       	cp.w	r8,0
80005108:	ed f8 1a 03 	st.wne	r6[0xc],r8
8000510c:	d8 22       	popm	r4-r7,pc
8000510e:	00 00       	add	r0,r0
80005110:	00 00       	add	r0,r0
80005112:	08 98       	mov	r8,r4
80005114:	80 00       	ld.sh	r0,r0[0x0]
80005116:	4a d0       	lddpc	r0,800051c8 <__call_exitprocs+0x4>

80005118 <__register_exitproc>:
80005118:	d4 31       	pushm	r0-r7,lr
8000511a:	4a 98       	lddpc	r8,800051bc <__register_exitproc+0xa4>
8000511c:	70 06       	ld.w	r6,r8[0x0]
8000511e:	6d 27       	ld.w	r7,r6[0x48]
80005120:	58 07       	cp.w	r7,0
80005122:	f9 b8 00 4c 	moveq	r8,76
80005126:	ed d8 e0 07 	addeq	r7,r6,r8
8000512a:	ed f7 0a 12 	st.weq	r6[0x48],r7
8000512e:	18 95       	mov	r5,r12
80005130:	16 92       	mov	r2,r11
80005132:	14 94       	mov	r4,r10
80005134:	12 93       	mov	r3,r9
80005136:	6e 18       	ld.w	r8,r7[0x4]
80005138:	59 f8       	cp.w	r8,31
8000513a:	e0 8a 00 0e 	brle	80005156 <__register_exitproc+0x3e>
8000513e:	e0 6c 00 8c 	mov	r12,140
80005142:	f0 1f 00 20 	mcall	800051c0 <__register_exitproc+0xa8>
80005146:	18 97       	mov	r7,r12
80005148:	c3 80       	breq	800051b8 <__register_exitproc+0xa0>
8000514a:	6d 28       	ld.w	r8,r6[0x48]
8000514c:	99 08       	st.w	r12[0x0],r8
8000514e:	ed 4c 00 48 	st.w	r6[72],r12
80005152:	30 08       	mov	r8,0
80005154:	99 18       	st.w	r12[0x4],r8
80005156:	58 05       	cp.w	r5,0
80005158:	c2 70       	breq	800051a6 <__register_exitproc+0x8e>
8000515a:	ee fc 00 88 	ld.w	r12,r7[136]
8000515e:	58 0c       	cp.w	r12,0
80005160:	c0 d1       	brne	8000517a <__register_exitproc+0x62>
80005162:	e0 6c 01 08 	mov	r12,264
80005166:	f0 1f 00 17 	mcall	800051c0 <__register_exitproc+0xa8>
8000516a:	c2 70       	breq	800051b8 <__register_exitproc+0xa0>
8000516c:	30 08       	mov	r8,0
8000516e:	ef 4c 00 88 	st.w	r7[136],r12
80005172:	f9 48 01 04 	st.w	r12[260],r8
80005176:	f9 48 01 00 	st.w	r12[256],r8
8000517a:	6e 1a       	ld.w	r10,r7[0x4]
8000517c:	f4 c8 ff e0 	sub	r8,r10,-32
80005180:	30 19       	mov	r9,1
80005182:	f8 08 09 23 	st.w	r12[r8<<0x2],r3
80005186:	f2 0a 09 49 	lsl	r9,r9,r10
8000518a:	f8 f8 01 00 	ld.w	r8,r12[256]
8000518e:	f8 0a 09 24 	st.w	r12[r10<<0x2],r4
80005192:	12 48       	or	r8,r9
80005194:	f9 48 01 00 	st.w	r12[256],r8
80005198:	58 25       	cp.w	r5,2
8000519a:	f9 f8 00 41 	ld.weq	r8,r12[0x104]
8000519e:	f1 d9 e0 38 	oreq	r8,r8,r9
800051a2:	f9 f8 0a 41 	st.weq	r12[0x104],r8
800051a6:	6e 18       	ld.w	r8,r7[0x4]
800051a8:	30 0c       	mov	r12,0
800051aa:	f0 c9 ff ff 	sub	r9,r8,-1
800051ae:	2f e8       	sub	r8,-2
800051b0:	8f 19       	st.w	r7[0x4],r9
800051b2:	ee 08 09 22 	st.w	r7[r8<<0x2],r2
800051b6:	d8 32       	popm	r0-r7,pc
800051b8:	dc 3a       	popm	r0-r7,pc,r12=-1
800051ba:	00 00       	add	r0,r0
800051bc:	80 00       	ld.sh	r0,r0[0x0]
800051be:	59 38       	cp.w	r8,19
800051c0:	80 00       	ld.sh	r0,r0[0x0]
800051c2:	4c 54       	lddpc	r4,800052d4 <_malloc_trim_r+0x38>

800051c4 <__call_exitprocs>:
800051c4:	d4 31       	pushm	r0-r7,lr
800051c6:	20 3d       	sub	sp,12
800051c8:	4b 38       	lddpc	r8,80005294 <__call_exitprocs+0xd0>
800051ca:	50 0c       	stdsp	sp[0x0],r12
800051cc:	70 08       	ld.w	r8,r8[0x0]
800051ce:	16 90       	mov	r0,r11
800051d0:	50 18       	stdsp	sp[0x4],r8
800051d2:	2b 88       	sub	r8,-72
800051d4:	50 28       	stdsp	sp[0x8],r8
800051d6:	40 18       	lddsp	r8,sp[0x4]
800051d8:	40 22       	lddsp	r2,sp[0x8]
800051da:	71 27       	ld.w	r7,r8[0x48]
800051dc:	c5 78       	rjmp	8000528a <__call_exitprocs+0xc6>
800051de:	6e 19       	ld.w	r9,r7[0x4]
800051e0:	ee f5 00 88 	ld.w	r5,r7[136]
800051e4:	f2 c8 ff ff 	sub	r8,r9,-1
800051e8:	f2 c6 00 01 	sub	r6,r9,1
800051ec:	ee 08 00 23 	add	r3,r7,r8<<0x2
800051f0:	ea 06 00 24 	add	r4,r5,r6<<0x2
800051f4:	c3 68       	rjmp	80005260 <__call_exitprocs+0x9c>
800051f6:	58 00       	cp.w	r0,0
800051f8:	c0 70       	breq	80005206 <__call_exitprocs+0x42>
800051fa:	58 05       	cp.w	r5,0
800051fc:	c2 f0       	breq	8000525a <__call_exitprocs+0x96>
800051fe:	e8 f8 00 80 	ld.w	r8,r4[128]
80005202:	00 38       	cp.w	r8,r0
80005204:	c2 b1       	brne	8000525a <__call_exitprocs+0x96>
80005206:	6e 18       	ld.w	r8,r7[0x4]
80005208:	66 0a       	ld.w	r10,r3[0x0]
8000520a:	20 18       	sub	r8,1
8000520c:	10 36       	cp.w	r6,r8
8000520e:	ef f6 0a 01 	st.weq	r7[0x4],r6
80005212:	f9 b8 01 00 	movne	r8,0
80005216:	e7 f8 1a 00 	st.wne	r3[0x0],r8
8000521a:	58 0a       	cp.w	r10,0
8000521c:	c1 f0       	breq	8000525a <__call_exitprocs+0x96>
8000521e:	6e 11       	ld.w	r1,r7[0x4]
80005220:	58 05       	cp.w	r5,0
80005222:	c0 90       	breq	80005234 <__call_exitprocs+0x70>
80005224:	30 18       	mov	r8,1
80005226:	f0 06 09 49 	lsl	r9,r8,r6
8000522a:	ea f8 01 00 	ld.w	r8,r5[256]
8000522e:	f3 e8 00 08 	and	r8,r9,r8
80005232:	c0 31       	brne	80005238 <__call_exitprocs+0x74>
80005234:	5d 1a       	icall	r10
80005236:	c0 c8       	rjmp	8000524e <__call_exitprocs+0x8a>
80005238:	ea f8 01 04 	ld.w	r8,r5[260]
8000523c:	68 0c       	ld.w	r12,r4[0x0]
8000523e:	f3 e8 00 08 	and	r8,r9,r8
80005242:	c0 51       	brne	8000524c <__call_exitprocs+0x88>
80005244:	18 9b       	mov	r11,r12
80005246:	40 0c       	lddsp	r12,sp[0x0]
80005248:	5d 1a       	icall	r10
8000524a:	c0 28       	rjmp	8000524e <__call_exitprocs+0x8a>
8000524c:	5d 1a       	icall	r10
8000524e:	6e 18       	ld.w	r8,r7[0x4]
80005250:	10 31       	cp.w	r1,r8
80005252:	cc 21       	brne	800051d6 <__call_exitprocs+0x12>
80005254:	64 08       	ld.w	r8,r2[0x0]
80005256:	0e 38       	cp.w	r8,r7
80005258:	cb f1       	brne	800051d6 <__call_exitprocs+0x12>
8000525a:	20 16       	sub	r6,1
8000525c:	20 44       	sub	r4,4
8000525e:	20 43       	sub	r3,4
80005260:	58 06       	cp.w	r6,0
80005262:	cc a4       	brge	800051f6 <__call_exitprocs+0x32>
80005264:	6e 18       	ld.w	r8,r7[0x4]
80005266:	58 08       	cp.w	r8,0
80005268:	c0 f1       	brne	80005286 <__call_exitprocs+0xc2>
8000526a:	6e 08       	ld.w	r8,r7[0x0]
8000526c:	58 08       	cp.w	r8,0
8000526e:	c0 c0       	breq	80005286 <__call_exitprocs+0xc2>
80005270:	85 08       	st.w	r2[0x0],r8
80005272:	58 05       	cp.w	r5,0
80005274:	c0 40       	breq	8000527c <__call_exitprocs+0xb8>
80005276:	0a 9c       	mov	r12,r5
80005278:	f0 1f 00 08 	mcall	80005298 <__call_exitprocs+0xd4>
8000527c:	0e 9c       	mov	r12,r7
8000527e:	f0 1f 00 07 	mcall	80005298 <__call_exitprocs+0xd4>
80005282:	64 07       	ld.w	r7,r2[0x0]
80005284:	c0 38       	rjmp	8000528a <__call_exitprocs+0xc6>
80005286:	0e 92       	mov	r2,r7
80005288:	6e 07       	ld.w	r7,r7[0x0]
8000528a:	58 07       	cp.w	r7,0
8000528c:	ca 91       	brne	800051de <__call_exitprocs+0x1a>
8000528e:	2f dd       	sub	sp,-12
80005290:	d8 32       	popm	r0-r7,pc
80005292:	00 00       	add	r0,r0
80005294:	80 00       	ld.sh	r0,r0[0x0]
80005296:	59 38       	cp.w	r8,19
80005298:	80 00       	ld.sh	r0,r0[0x0]
8000529a:	4c 3c       	lddpc	r12,800053a4 <_free_r+0x60>

8000529c <_malloc_trim_r>:
8000529c:	d4 21       	pushm	r4-r7,lr
8000529e:	16 96       	mov	r6,r11
800052a0:	18 97       	mov	r7,r12
800052a2:	f0 1f 00 23 	mcall	8000532c <_malloc_trim_r+0x90>
800052a6:	4a 34       	lddpc	r4,80005330 <_malloc_trim_r+0x94>
800052a8:	68 28       	ld.w	r8,r4[0x8]
800052aa:	70 15       	ld.w	r5,r8[0x4]
800052ac:	e0 15 ff fc 	andl	r5,0xfffc
800052b0:	ea c8 ff 91 	sub	r8,r5,-111
800052b4:	0c 18       	sub	r8,r6
800052b6:	e0 18 ff 80 	andl	r8,0xff80
800052ba:	f0 c6 00 80 	sub	r6,r8,128
800052be:	e0 46 00 7f 	cp.w	r6,127
800052c2:	e0 8a 00 23 	brle	80005308 <_malloc_trim_r+0x6c>
800052c6:	30 0b       	mov	r11,0
800052c8:	0e 9c       	mov	r12,r7
800052ca:	f0 1f 00 1b 	mcall	80005334 <_malloc_trim_r+0x98>
800052ce:	68 28       	ld.w	r8,r4[0x8]
800052d0:	0a 08       	add	r8,r5
800052d2:	10 3c       	cp.w	r12,r8
800052d4:	c1 a1       	brne	80005308 <_malloc_trim_r+0x6c>
800052d6:	ec 0b 11 00 	rsub	r11,r6,0
800052da:	0e 9c       	mov	r12,r7
800052dc:	f0 1f 00 16 	mcall	80005334 <_malloc_trim_r+0x98>
800052e0:	5b fc       	cp.w	r12,-1
800052e2:	c1 71       	brne	80005310 <_malloc_trim_r+0x74>
800052e4:	30 0b       	mov	r11,0
800052e6:	0e 9c       	mov	r12,r7
800052e8:	f0 1f 00 13 	mcall	80005334 <_malloc_trim_r+0x98>
800052ec:	68 29       	ld.w	r9,r4[0x8]
800052ee:	f8 09 01 08 	sub	r8,r12,r9
800052f2:	58 f8       	cp.w	r8,15
800052f4:	e0 8a 00 0a 	brle	80005308 <_malloc_trim_r+0x6c>
800052f8:	a1 a8       	sbr	r8,0x0
800052fa:	93 18       	st.w	r9[0x4],r8
800052fc:	48 f8       	lddpc	r8,80005338 <_malloc_trim_r+0x9c>
800052fe:	70 09       	ld.w	r9,r8[0x0]
80005300:	48 f8       	lddpc	r8,8000533c <_malloc_trim_r+0xa0>
80005302:	f8 09 01 09 	sub	r9,r12,r9
80005306:	91 09       	st.w	r8[0x0],r9
80005308:	0e 9c       	mov	r12,r7
8000530a:	f0 1f 00 0e 	mcall	80005340 <_malloc_trim_r+0xa4>
8000530e:	d8 2a       	popm	r4-r7,pc,r12=0
80005310:	68 29       	ld.w	r9,r4[0x8]
80005312:	ea 06 01 08 	sub	r8,r5,r6
80005316:	a1 a8       	sbr	r8,0x0
80005318:	93 18       	st.w	r9[0x4],r8
8000531a:	48 99       	lddpc	r9,8000533c <_malloc_trim_r+0xa0>
8000531c:	72 08       	ld.w	r8,r9[0x0]
8000531e:	0c 18       	sub	r8,r6
80005320:	0e 9c       	mov	r12,r7
80005322:	93 08       	st.w	r9[0x0],r8
80005324:	f0 1f 00 07 	mcall	80005340 <_malloc_trim_r+0xa4>
80005328:	da 2a       	popm	r4-r7,pc,r12=1
8000532a:	00 00       	add	r0,r0
8000532c:	80 00       	ld.sh	r0,r0[0x0]
8000532e:	50 ec       	stdsp	sp[0x38],r12
80005330:	00 00       	add	r0,r0
80005332:	01 20       	ld.uh	r0,r0++
80005334:	80 00       	ld.sh	r0,r0[0x0]
80005336:	50 f0       	stdsp	sp[0x3c],r0
80005338:	00 00       	add	r0,r0
8000533a:	05 2c       	ld.uh	r12,r2++
8000533c:	00 00       	add	r0,r0
8000533e:	06 40       	or	r0,r3
80005340:	80 00       	ld.sh	r0,r0[0x0]
80005342:	50 ee       	stdsp	sp[0x38],lr

80005344 <_free_r>:
80005344:	d4 21       	pushm	r4-r7,lr
80005346:	16 97       	mov	r7,r11
80005348:	18 95       	mov	r5,r12
8000534a:	58 0b       	cp.w	r11,0
8000534c:	e0 80 00 ce 	breq	800054e8 <_free_r+0x1a4>
80005350:	f0 1f 00 4c 	mcall	80005480 <_free_r+0x13c>
80005354:	ee cb 00 08 	sub	r11,r7,8
80005358:	76 18       	ld.w	r8,r11[0x4]
8000535a:	4c b6       	lddpc	r6,80005484 <_free_r+0x140>
8000535c:	10 9e       	mov	lr,r8
8000535e:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
80005362:	a1 ce       	cbr	lr,0x0
80005364:	6c 28       	ld.w	r8,r6[0x8]
80005366:	f6 0e 00 0a 	add	r10,r11,lr
8000536a:	74 1c       	ld.w	r12,r10[0x4]
8000536c:	e0 1c ff fc 	andl	r12,0xfffc
80005370:	10 3a       	cp.w	r10,r8
80005372:	c1 d1       	brne	800053ac <_free_r+0x68>
80005374:	f8 0e 00 0a 	add	r10,r12,lr
80005378:	58 07       	cp.w	r7,0
8000537a:	c0 81       	brne	8000538a <_free_r+0x46>
8000537c:	76 08       	ld.w	r8,r11[0x0]
8000537e:	10 1b       	sub	r11,r8
80005380:	10 0a       	add	r10,r8
80005382:	76 39       	ld.w	r9,r11[0xc]
80005384:	76 28       	ld.w	r8,r11[0x8]
80005386:	93 28       	st.w	r9[0x8],r8
80005388:	91 39       	st.w	r8[0xc],r9
8000538a:	14 98       	mov	r8,r10
8000538c:	8d 2b       	st.w	r6[0x8],r11
8000538e:	a1 a8       	sbr	r8,0x0
80005390:	97 18       	st.w	r11[0x4],r8
80005392:	4b e8       	lddpc	r8,80005488 <_free_r+0x144>
80005394:	70 08       	ld.w	r8,r8[0x0]
80005396:	10 3a       	cp.w	r10,r8
80005398:	c0 63       	brcs	800053a4 <_free_r+0x60>
8000539a:	4b d8       	lddpc	r8,8000548c <_free_r+0x148>
8000539c:	0a 9c       	mov	r12,r5
8000539e:	70 0b       	ld.w	r11,r8[0x0]
800053a0:	f0 1f 00 3c 	mcall	80005490 <_free_r+0x14c>
800053a4:	0a 9c       	mov	r12,r5
800053a6:	f0 1f 00 3c 	mcall	80005494 <_free_r+0x150>
800053aa:	d8 22       	popm	r4-r7,pc
800053ac:	95 1c       	st.w	r10[0x4],r12
800053ae:	58 07       	cp.w	r7,0
800053b0:	c0 30       	breq	800053b6 <_free_r+0x72>
800053b2:	30 07       	mov	r7,0
800053b4:	c1 08       	rjmp	800053d4 <_free_r+0x90>
800053b6:	76 08       	ld.w	r8,r11[0x0]
800053b8:	10 1b       	sub	r11,r8
800053ba:	10 0e       	add	lr,r8
800053bc:	76 29       	ld.w	r9,r11[0x8]
800053be:	ec c8 ff f8 	sub	r8,r6,-8
800053c2:	10 39       	cp.w	r9,r8
800053c4:	f9 b7 00 01 	moveq	r7,1
800053c8:	f7 f8 10 03 	ld.wne	r8,r11[0xc]
800053cc:	f1 f9 1a 02 	st.wne	r8[0x8],r9
800053d0:	f3 f8 1a 03 	st.wne	r9[0xc],r8
800053d4:	f4 0c 00 08 	add	r8,r10,r12
800053d8:	70 18       	ld.w	r8,r8[0x4]
800053da:	ed b8 00 00 	bld	r8,0x0
800053de:	c1 30       	breq	80005404 <_free_r+0xc0>
800053e0:	18 0e       	add	lr,r12
800053e2:	58 07       	cp.w	r7,0
800053e4:	c0 c1       	brne	800053fc <_free_r+0xb8>
800053e6:	4a 88       	lddpc	r8,80005484 <_free_r+0x140>
800053e8:	74 29       	ld.w	r9,r10[0x8]
800053ea:	2f 88       	sub	r8,-8
800053ec:	10 39       	cp.w	r9,r8
800053ee:	c0 71       	brne	800053fc <_free_r+0xb8>
800053f0:	93 3b       	st.w	r9[0xc],r11
800053f2:	93 2b       	st.w	r9[0x8],r11
800053f4:	97 29       	st.w	r11[0x8],r9
800053f6:	97 39       	st.w	r11[0xc],r9
800053f8:	30 17       	mov	r7,1
800053fa:	c0 58       	rjmp	80005404 <_free_r+0xc0>
800053fc:	74 29       	ld.w	r9,r10[0x8]
800053fe:	74 38       	ld.w	r8,r10[0xc]
80005400:	91 29       	st.w	r8[0x8],r9
80005402:	93 38       	st.w	r9[0xc],r8
80005404:	1c 98       	mov	r8,lr
80005406:	f6 0e 09 0e 	st.w	r11[lr],lr
8000540a:	a1 a8       	sbr	r8,0x0
8000540c:	97 18       	st.w	r11[0x4],r8
8000540e:	58 07       	cp.w	r7,0
80005410:	c6 91       	brne	800054e2 <_free_r+0x19e>
80005412:	e0 4e 01 ff 	cp.w	lr,511
80005416:	e0 8b 00 13 	brhi	8000543c <_free_r+0xf8>
8000541a:	fc 0a 16 03 	lsr	r10,lr,0x3
8000541e:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80005422:	70 29       	ld.w	r9,r8[0x8]
80005424:	97 38       	st.w	r11[0xc],r8
80005426:	97 29       	st.w	r11[0x8],r9
80005428:	93 3b       	st.w	r9[0xc],r11
8000542a:	91 2b       	st.w	r8[0x8],r11
8000542c:	6c 19       	ld.w	r9,r6[0x4]
8000542e:	a3 4a       	asr	r10,0x2
80005430:	30 18       	mov	r8,1
80005432:	f0 0a 09 48 	lsl	r8,r8,r10
80005436:	10 49       	or	r9,r8
80005438:	8d 19       	st.w	r6[0x4],r9
8000543a:	c5 48       	rjmp	800054e2 <_free_r+0x19e>
8000543c:	fc 0a 16 09 	lsr	r10,lr,0x9
80005440:	58 4a       	cp.w	r10,4
80005442:	e0 8b 00 07 	brhi	80005450 <_free_r+0x10c>
80005446:	fc 08 16 06 	lsr	r8,lr,0x6
8000544a:	f0 ca ff c8 	sub	r10,r8,-56
8000544e:	c2 f8       	rjmp	800054ac <_free_r+0x168>
80005450:	59 4a       	cp.w	r10,20
80005452:	e0 8b 00 04 	brhi	8000545a <_free_r+0x116>
80005456:	2a 5a       	sub	r10,-91
80005458:	c2 a8       	rjmp	800054ac <_free_r+0x168>
8000545a:	e0 4a 00 54 	cp.w	r10,84
8000545e:	e0 8b 00 07 	brhi	8000546c <_free_r+0x128>
80005462:	fc 08 16 0c 	lsr	r8,lr,0xc
80005466:	f0 ca ff 92 	sub	r10,r8,-110
8000546a:	c2 18       	rjmp	800054ac <_free_r+0x168>
8000546c:	e0 4a 01 54 	cp.w	r10,340
80005470:	e0 8b 00 14 	brhi	80005498 <_free_r+0x154>
80005474:	fc 08 16 0f 	lsr	r8,lr,0xf
80005478:	f0 ca ff 89 	sub	r10,r8,-119
8000547c:	c1 88       	rjmp	800054ac <_free_r+0x168>
8000547e:	00 00       	add	r0,r0
80005480:	80 00       	ld.sh	r0,r0[0x0]
80005482:	50 ec       	stdsp	sp[0x38],r12
80005484:	00 00       	add	r0,r0
80005486:	01 20       	ld.uh	r0,r0++
80005488:	00 00       	add	r0,r0
8000548a:	05 28       	ld.uh	r8,r2++
8000548c:	00 00       	add	r0,r0
8000548e:	06 3c       	cp.w	r12,r3
80005490:	80 00       	ld.sh	r0,r0[0x0]
80005492:	52 9c       	stdsp	sp[0xa4],r12
80005494:	80 00       	ld.sh	r0,r0[0x0]
80005496:	50 ee       	stdsp	sp[0x38],lr
80005498:	fc 08 16 12 	lsr	r8,lr,0x12
8000549c:	e0 4a 05 54 	cp.w	r10,1364
800054a0:	f9 ba 0b 7e 	movhi	r10,126
800054a4:	f9 b9 08 7c 	movls	r9,124
800054a8:	f1 d9 e8 0a 	addls	r10,r8,r9
800054ac:	ec 0a 00 39 	add	r9,r6,r10<<0x3
800054b0:	72 2c       	ld.w	r12,r9[0x8]
800054b2:	12 3c       	cp.w	r12,r9
800054b4:	c0 d1       	brne	800054ce <_free_r+0x18a>
800054b6:	a3 4a       	asr	r10,0x2
800054b8:	30 18       	mov	r8,1
800054ba:	f0 0a 09 48 	lsl	r8,r8,r10
800054be:	6c 19       	ld.w	r9,r6[0x4]
800054c0:	10 49       	or	r9,r8
800054c2:	18 98       	mov	r8,r12
800054c4:	8d 19       	st.w	r6[0x4],r9
800054c6:	c0 a8       	rjmp	800054da <_free_r+0x196>
800054c8:	78 2c       	ld.w	r12,r12[0x8]
800054ca:	12 3c       	cp.w	r12,r9
800054cc:	c0 60       	breq	800054d8 <_free_r+0x194>
800054ce:	78 18       	ld.w	r8,r12[0x4]
800054d0:	e0 18 ff fc 	andl	r8,0xfffc
800054d4:	10 3e       	cp.w	lr,r8
800054d6:	cf 93       	brcs	800054c8 <_free_r+0x184>
800054d8:	78 38       	ld.w	r8,r12[0xc]
800054da:	97 38       	st.w	r11[0xc],r8
800054dc:	97 2c       	st.w	r11[0x8],r12
800054de:	99 3b       	st.w	r12[0xc],r11
800054e0:	91 2b       	st.w	r8[0x8],r11
800054e2:	0a 9c       	mov	r12,r5
800054e4:	f0 1f 00 02 	mcall	800054ec <_free_r+0x1a8>
800054e8:	d8 22       	popm	r4-r7,pc
800054ea:	00 00       	add	r0,r0
800054ec:	80 00       	ld.sh	r0,r0[0x0]
800054ee:	50 ee       	stdsp	sp[0x38],lr

800054f0 <__do_global_ctors_aux>:
800054f0:	eb cd 40 80 	pushm	r7,lr
800054f4:	48 79       	lddpc	r9,80005510 <__do_global_ctors_aux+0x20>
800054f6:	f2 f8 ff fc 	ld.w	r8,r9[-4]
800054fa:	5b f8       	cp.w	r8,-1
800054fc:	c0 70       	breq	8000550a <__do_global_ctors_aux+0x1a>
800054fe:	f2 c7 00 04 	sub	r7,r9,4
80005502:	5d 18       	icall	r8
80005504:	0f 48       	ld.w	r8,--r7
80005506:	5b f8       	cp.w	r8,-1
80005508:	cf d1       	brne	80005502 <__do_global_ctors_aux+0x12>
8000550a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000550e:	00 00       	add	r0,r0
80005510:	00 00       	add	r0,r0
80005512:	00 0c       	add	r12,r0

Disassembly of section .exception:

80005600 <_evba>:
80005600:	c0 08       	rjmp	80005600 <_evba>
	...

80005604 <_handle_TLB_Multiple_Hit>:
80005604:	c0 08       	rjmp	80005604 <_handle_TLB_Multiple_Hit>
	...

80005608 <_handle_Bus_Error_Data_Fetch>:
80005608:	c0 08       	rjmp	80005608 <_handle_Bus_Error_Data_Fetch>
	...

8000560c <_handle_Bus_Error_Instruction_Fetch>:
8000560c:	c0 08       	rjmp	8000560c <_handle_Bus_Error_Instruction_Fetch>
	...

80005610 <_handle_NMI>:
80005610:	c0 08       	rjmp	80005610 <_handle_NMI>
	...

80005614 <_handle_Instruction_Address>:
80005614:	c0 08       	rjmp	80005614 <_handle_Instruction_Address>
	...

80005618 <_handle_ITLB_Protection>:
80005618:	c0 08       	rjmp	80005618 <_handle_ITLB_Protection>
	...

8000561c <_handle_Breakpoint>:
8000561c:	c0 08       	rjmp	8000561c <_handle_Breakpoint>
	...

80005620 <_handle_Illegal_Opcode>:
80005620:	c0 08       	rjmp	80005620 <_handle_Illegal_Opcode>
	...

80005624 <_handle_Unimplemented_Instruction>:
80005624:	c0 08       	rjmp	80005624 <_handle_Unimplemented_Instruction>
	...

80005628 <_handle_Privilege_Violation>:
80005628:	c0 08       	rjmp	80005628 <_handle_Privilege_Violation>
	...

8000562c <_handle_Floating_Point>:
8000562c:	c0 08       	rjmp	8000562c <_handle_Floating_Point>
	...

80005630 <_handle_Coprocessor_Absent>:
80005630:	c0 08       	rjmp	80005630 <_handle_Coprocessor_Absent>
	...

80005634 <_handle_Data_Address_Read>:
80005634:	c0 08       	rjmp	80005634 <_handle_Data_Address_Read>
	...

80005638 <_handle_Data_Address_Write>:
80005638:	c0 08       	rjmp	80005638 <_handle_Data_Address_Write>
	...

8000563c <_handle_DTLB_Protection_Read>:
8000563c:	c0 08       	rjmp	8000563c <_handle_DTLB_Protection_Read>
	...

80005640 <_handle_DTLB_Protection_Write>:
80005640:	c0 08       	rjmp	80005640 <_handle_DTLB_Protection_Write>
	...

80005644 <_handle_DTLB_Modified>:
80005644:	c0 08       	rjmp	80005644 <_handle_DTLB_Modified>
	...

80005650 <_handle_ITLB_Miss>:
80005650:	c0 08       	rjmp	80005650 <_handle_ITLB_Miss>
	...

80005660 <_handle_DTLB_Miss_Read>:
80005660:	c0 08       	rjmp	80005660 <_handle_DTLB_Miss_Read>
	...

80005670 <_handle_DTLB_Miss_Write>:
80005670:	c0 08       	rjmp	80005670 <_handle_DTLB_Miss_Write>
	...

80005700 <_handle_Supervisor_Call>:
80005700:	c0 08       	rjmp	80005700 <_handle_Supervisor_Call>
	...

80005704 <_int0>:
80005704:	30 0c       	mov	r12,0
80005706:	f0 1f 00 12 	mcall	8000574c <ipr_val+0x10>
8000570a:	58 0c       	cp.w	r12,0
8000570c:	f8 0f 17 10 	movne	pc,r12
80005710:	d6 03       	rete

80005712 <_int1>:
80005712:	30 1c       	mov	r12,1
80005714:	f0 1f 00 0e 	mcall	8000574c <ipr_val+0x10>
80005718:	58 0c       	cp.w	r12,0
8000571a:	f8 0f 17 10 	movne	pc,r12
8000571e:	d6 03       	rete

80005720 <_int2>:
80005720:	30 2c       	mov	r12,2
80005722:	f0 1f 00 0b 	mcall	8000574c <ipr_val+0x10>
80005726:	58 0c       	cp.w	r12,0
80005728:	f8 0f 17 10 	movne	pc,r12
8000572c:	d6 03       	rete

8000572e <_int3>:
8000572e:	30 3c       	mov	r12,3
80005730:	f0 1f 00 07 	mcall	8000574c <ipr_val+0x10>
80005734:	58 0c       	cp.w	r12,0
80005736:	f8 0f 17 10 	movne	pc,r12
8000573a:	d6 03       	rete

8000573c <ipr_val>:
8000573c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8000574c:	80 00 26 74 00 00 00 00 00 00 00 00 00 00 00 00     ..&t............
	...

Disassembly of section .fini:

80005800 <_fini>:
80005800:	eb cd 40 40 	pushm	r6,lr
80005804:	48 26       	lddpc	r6,8000580c <_fini+0xc>
80005806:	1e 26       	rsub	r6,pc
80005808:	c0 48       	rjmp	80005810 <_fini+0x10>
8000580a:	00 00       	add	r0,r0
8000580c:	80 00       	ld.sh	r0,r0[0x0]
8000580e:	57 ea       	stdsp	sp[0x1f8],r10
80005810:	f0 16 00 02 	mcall	r6[8]
80005814:	e3 cd 80 40 	ldm	sp++,r6,pc
